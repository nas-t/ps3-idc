/*
 * fnids.h -- FNID to Function Name association per module
 *
 * This software is distributed under the terms of the GNU General Public
 * License ("GPL") version 3, as published by the Free Software Foundation.
 *
 * Copyright nas
 */

#include <idc.idc>

static get_fnid_name(module, fnid) {
  if (fnid == 0x1529e506) {
    return "cellAdecDecodeAu";
  } else if (fnid == 0xf8d95c49) {
    return "cellFreeType2Ex";
  } else if (fnid == 0x211248e7) {
    return "cellFreeType2GetRevisionFlags";
  } else if (fnid == 0x06a553df) {
    return "FT_Activate_Size";
  } else if (fnid == 0x68c25868) {
    return "FT_Add_Default_Modules";
  } else if (fnid == 0xa6ec00f4) {
    return "FT_Add_Module";
  } else if (fnid == 0xa26a2e9c) {
    return "FT_Alloc";
  } else if (fnid == 0x1171aa63) {
    return "FT_Angle_Diff";
  } else if (fnid == 0xf78a4a76) {
    return "FT_Atan2";
  } else if (fnid == 0x6e560d59) {
    return "FT_Attach_File";
  } else if (fnid == 0xf9d31f75) {
    return "FT_Attach_Stream";
  } else if (fnid == 0xfd5b7c04) {
    return "FT_Bitmap_Convert";
  } else if (fnid == 0x7ec07f08) {
    return "FT_Bitmap_Copy";
  } else if (fnid == 0xc2261290) {
    return "FT_Bitmap_Done";
  } else if (fnid == 0x1aeb33a5) {
    return "FT_Bitmap_Embolden";
  } else if (fnid == 0x13268e21) {
    return "FT_Bitmap_New";
  } else if (fnid == 0xafe5ebc4) {
    return "FT_CeilFix";
  } else if (fnid == 0x2b74d0b3) {
    return "FT_CMap_Done";
  } else if (fnid == 0x32a1bd52) {
    return "FT_CMap_New";
  } else if (fnid == 0xe46f3662) {
    return "FT_Cos";
  } else if (fnid == 0xfa502b9b) {
    return "ft_debug_init";
  } else if (fnid == 0xe68e4744) {
    return "FT_DivFix";
  } else if (fnid == 0x1cedf8d0) {
    return "FT_Done_Face";
  } else if (fnid == 0xe956bf64) {
    return "FT_Done_FreeType";
  } else if (fnid == 0xdb615095) {
    return "FT_Done_Glyph";
  } else if (fnid == 0xac328493) {
    return "FT_Done_GlyphSlot";
  } else if (fnid == 0x0124a94b) {
    return "FT_Done_Library";
  } else if (fnid == 0x59394806) {
    return "FT_Done_Memory";
  } else if (fnid == 0x9295b0fd) {
    return "FT_Done_Size";
  } else if (fnid == 0x2803abd1) {
    return "FT_FloorFix";
  } else if (fnid == 0x98db2f48) {
    return "FT_Free";
  } else if (fnid == 0x55104762) {
    return "FT_Get_BDF_Charset_ID";
  } else if (fnid == 0xc8b94ee5) {
    return "FT_Get_BDF_Property";
  } else if (fnid == 0x4f36cf3f) {
    return "FT_Get_Char_Index";
  } else if (fnid == 0x5f8370d7) {
    return "FT_Get_Charmap_Index";
  } else if (fnid == 0x81eed68c) {
    return "FT_Get_CMap_Language_ID";
  } else if (fnid == 0x39d44176) {
    return "FT_Get_First_Char";
  } else if (fnid == 0x4b573039) {
    return "FT_Get_Glyph";
  } else if (fnid == 0x1e287e88) {
    return "FT_Get_Glyph_Name";
  } else if (fnid == 0xa6eb0b62) {
    return "FT_Get_Kerning";
  } else if (fnid == 0x8835c3c2) {
    return "FT_Get_MM_Var";
  } else if (fnid == 0x4654e796) {
    return "FT_Get_Module";
  } else if (fnid == 0x011687ee) {
    return "FT_Get_Module_Interface";
  } else if (fnid == 0x4ce3fc00) {
    return "FT_Get_Multi_Master";
  } else if (fnid == 0x4be810bc) {
    return "FT_Get_Name_Index";
  } else if (fnid == 0x37f42e67) {
    return "FT_Get_Next_Char";
  } else if (fnid == 0x184a21da) {
    return "FT_Get_PFR_Advance";
  } else if (fnid == 0xc141037d) {
    return "FT_Get_PFR_Kerning";
  } else if (fnid == 0x50ec3696) {
    return "FT_Get_PFR_Metrics";
  } else if (fnid == 0x9e2b935a) {
    return "FT_Get_Postscript_Name";
  } else if (fnid == 0x8d79a5f9) {
    return "FT_Get_PS_Font_Info";
  } else if (fnid == 0xc3b65d96) {
    return "FT_Get_PS_Font_Private";
  } else if (fnid == 0x492d8224) {
    return "FT_Get_Renderer";
  } else if (fnid == 0x9d74740f) {
    return "FT_Get_Sfnt_Name";
  } else if (fnid == 0x838fe0a5) {
    return "FT_Get_Sfnt_Name_Count";
  } else if (fnid == 0x89fb856e) {
    return "FT_Get_Sfnt_Table";
  } else if (fnid == 0x67d56767) {
    return "FT_Get_SubGlyph_Info";
  } else if (fnid == 0x36f59828) {
    return "FT_Get_Track_Kerning";
  } else if (fnid == 0xdd91f304) {
    return "FT_Get_TrueType_Engine_Type";
  } else if (fnid == 0x9a7a71b5) {
    return "FT_Get_WinFNT_Header";
  } else if (fnid == 0xa29ca82e) {
    return "FT_Get_X11_Font_Format";
  } else if (fnid == 0x420de176) {
    return "FT_Glyph_Copy";
  } else if (fnid == 0x44951709) {
    return "FT_Glyph_Get_CBox";
  } else if (fnid == 0x66d88c8c) {
    return "FT_Glyph_Stroke";
  } else if (fnid == 0xf7261881) {
    return "FT_Glyph_StrokeBorder";
  } else if (fnid == 0xb499d895) {
    return "FT_Glyph_To_Bitmap";
  } else if (fnid == 0xd912b0f4) {
    return "FT_Glyph_Transform";
  } else if (fnid == 0x5035c921) {
    return "FT_GlyphLoader_Add";
  } else if (fnid == 0x501d1814) {
    return "FT_GlyphLoader_CheckPoints";
  } else if (fnid == 0xab8f6a87) {
    return "FT_GlyphLoader_CheckSubGlyphs";
  } else if (fnid == 0xb67050bc) {
    return "FT_GlyphLoader_CopyPoints";
  } else if (fnid == 0x5c4c5880) {
    return "FT_GlyphLoader_CreateExtra";
  } else if (fnid == 0xacfe51d8) {
    return "FT_GlyphLoader_Done";
  } else if (fnid == 0xe6de720d) {
    return "FT_GlyphLoader_New";
  } else if (fnid == 0x875d29d5) {
    return "FT_GlyphLoader_Prepare";
  } else if (fnid == 0x9fe3dde6) {
    return "FT_GlyphLoader_Reset";
  } else if (fnid == 0xbd59bc75) {
    return "FT_GlyphLoader_Rewind";
  } else if (fnid == 0x416cdbc4) {
    return "ft_glyphslot_alloc_bitmap";
  } else if (fnid == 0x9b52f2d1) {
    return "FT_GlyphSlot_Embolden";
  } else if (fnid == 0x858df484) {
    return "ft_glyphslot_free_bitmap";
  } else if (fnid == 0xf5a883b6) {
    return "FT_GlyphSlot_Oblique";
  } else if (fnid == 0x67618ba2) {
    return "FT_GlyphSlot_Own_Bitmap";
  } else if (fnid == 0x09d37f90) {
    return "ft_glyphslot_set_bitmap";
  } else if (fnid == 0xaed08db1) {
    return "FT_Has_PS_Glyph_Names";
  } else if (fnid == 0x552550e5) {
    return "ft_highpow2";
  } else if (fnid == 0x85a969b6) {
    return "FT_Init_FreeType";
  } else if (fnid == 0x9eba183c) {
    return "FT_Library_Version";
  } else if (fnid == 0xc24e39fc) {
    return "FT_List_Add";
  } else if (fnid == 0x4ee1b202) {
    return "FT_List_Finalize";
  } else if (fnid == 0x4db200ef) {
    return "FT_List_Find";
  } else if (fnid == 0x5923488b) {
    return "FT_List_Insert";
  } else if (fnid == 0xa58c1554) {
    return "FT_List_Iterate";
  } else if (fnid == 0xb6aab704) {
    return "FT_List_Remove";
  } else if (fnid == 0x1827e724) {
    return "FT_List_Up";
  } else if (fnid == 0x9da74bb6) {
    return "FT_Load_Char";
  } else if (fnid == 0xb229e6bf) {
    return "FT_Load_Glyph";
  } else if (fnid == 0x3545bdc1) {
    return "FT_Load_Sfnt_Table";
  } else if (fnid == 0xeac06c4b) {
    return "FT_Lookup_Renderer";
  } else if (fnid == 0x64243044) {
    return "ft_lzwstate_done";
  } else if (fnid == 0x64f1f292) {
    return "ft_lzwstate_init";
  } else if (fnid == 0xd719f8ee) {
    return "ft_lzwstate_io";
  } else if (fnid == 0x214fe115) {
    return "ft_lzwstate_reset";
  } else if (fnid == 0xab4747b4) {
    return "FT_Match_Size";
  } else if (fnid == 0xff2d2f98) {
    return "FT_Matrix_Invert";
  } else if (fnid == 0x406d1e1a) {
    return "FT_Matrix_Multiply";
  } else if (fnid == 0x26eaafa7) {
    return "ft_mem_alloc";
  } else if (fnid == 0x2aa7a25f) {
    return "ft_mem_free";
  } else if (fnid == 0x808e665f) {
    return "ft_mem_qalloc";
  } else if (fnid == 0xc938c83a) {
    return "ft_mem_qrealloc";
  } else if (fnid == 0xa0237f5e) {
    return "ft_mem_realloc";
  } else if (fnid == 0xfe9bee8c) {
    return "ft_module_get_service";
  } else if (fnid == 0x84ce959c) {
    return "FT_MulDiv";
  } else if (fnid == 0x38e8695c) {
    return "FT_MulFix";
  } else if (fnid == 0xcc20195f) {
    return "FT_New_Face";
  } else if (fnid == 0xd5bb8191) {
    return "FT_New_GlyphSlot";
  } else if (fnid == 0xa11ba28b) {
    return "FT_New_Library";
  } else if (fnid == 0xbf97b657) {
    return "FT_New_Memory";
  } else if (fnid == 0x1bfbe848) {
    return "FT_New_Memory_Face";
  } else if (fnid == 0x055c1970) {
    return "FT_New_Size";
  } else if (fnid == 0x51b09e1d) {
    return "FT_Open_Face";
  } else if (fnid == 0xb5bbfbea) {
    return "FT_OpenType_Free";
  } else if (fnid == 0xa742c04e) {
    return "FT_OpenType_Validate";
  } else if (fnid == 0x9c8be729) {
    return "FT_Outline_Check";
  } else if (fnid == 0x3c863b04) {
    return "FT_Outline_Copy";
  } else if (fnid == 0x1fcaeebb) {
    return "FT_Outline_Decompose";
  } else if (fnid == 0x3f2b82df) {
    return "FT_Outline_Done";
  } else if (fnid == 0xfeb2e30e) {
    return "FT_Outline_Done_Internal";
  } else if (fnid == 0x4b4cbf7a) {
    return "FT_Outline_Embolden";
  } else if (fnid == 0x889c4159) {
    return "FT_Outline_Get_BBox";
  } else if (fnid == 0x18c23bdf) {
    return "FT_Outline_Get_Bitmap";
  } else if (fnid == 0x1b6f28a5) {
    return "FT_Outline_Get_CBox";
  } else if (fnid == 0x04dd4855) {
    return "FT_Outline_Get_Orientation";
  } else if (fnid == 0x52a1f1ec) {
    return "FT_Outline_GetInsideBorder";
  } else if (fnid == 0x04af4d22) {
    return "FT_Outline_GetOutsideBorder";
  } else if (fnid == 0xa60023ef) {
    return "FT_Outline_New";
  } else if (fnid == 0x11385230) {
    return "FT_Outline_New_Internal";
  } else if (fnid == 0xf67c1c4b) {
    return "FT_Outline_Render";
  } else if (fnid == 0xeb3b1212) {
    return "FT_Outline_Reverse";
  } else if (fnid == 0xeeb810ec) {
    return "FT_Outline_Transform";
  } else if (fnid == 0x6ef5d792) {
    return "FT_Outline_Translate";
  } else if (fnid == 0x33f54920) {
    return "FT_QAlloc";
  } else if (fnid == 0xee7b7aa7) {
    return "FT_QRealloc";
  } else if (fnid == 0x5a23db5b) {
    return "FT_Raccess_Get_DataOffsets";
  } else if (fnid == 0x2e1f7d0a) {
    return "FT_Raccess_Get_HeaderInfo";
  } else if (fnid == 0x2c272c13) {
    return "FT_Raccess_Guess";
  } else if (fnid == 0x1a789b68) {
    return "FT_Realloc";
  } else if (fnid == 0x99040a1d) {
    return "FT_Remove_Module";
  } else if (fnid == 0x5c36e44f) {
    return "FT_Render_Glyph";
  } else if (fnid == 0xc5792092) {
    return "FT_Render_Glyph_Internal";
  } else if (fnid == 0x6e565b59) {
    return "FT_Request_Metrics";
  } else if (fnid == 0x92342aa4) {
    return "FT_Request_Size";
  } else if (fnid == 0x85c80b7f) {
    return "FT_RoundFix";
  } else if (fnid == 0xa4e6c423) {
    return "FT_Select_Charmap";
  } else if (fnid == 0xd4770b4d) {
    return "FT_Select_Metrics";
  } else if (fnid == 0x576e31a5) {
    return "FT_Select_Size";
  } else if (fnid == 0xaee8277c) {
    return "ft_service_list_lookup";
  } else if (fnid == 0x46d8826f) {
    return "FT_Set_Char_Size";
  } else if (fnid == 0xb9b430c2) {
    return "FT_Set_Charmap";
  } else if (fnid == 0x72cf95fc) {
    return "FT_Set_Debug_Hook";
  } else if (fnid == 0xcee3c5a0) {
    return "FT_Set_MM_Blend_Coordinates";
  } else if (fnid == 0x0af56d94) {
    return "FT_Set_MM_Design_Coordinates";
  } else if (fnid == 0xd12673a0) {
    return "FT_Set_Pixel_Sizes";
  } else if (fnid == 0x917d6e9b) {
    return "FT_Set_Renderer";
  } else if (fnid == 0x7ea2c657) {
    return "FT_Set_Transform";
  } else if (fnid == 0x9164efd1) {
    return "FT_Set_Var_Blend_Coordinates";
  } else if (fnid == 0xfe7d5e4f) {
    return "FT_Set_Var_Design_Coordinates";
  } else if (fnid == 0x6a48d894) {
    return "FT_Sfnt_Table_Info";
  } else if (fnid == 0x3701f938) {
    return "FT_Sin";
  } else if (fnid == 0xd4c19fdb) {
    return "FT_Sqrt32";
  } else if (fnid == 0x20f438ad) {
    return "FT_SqrtFixed";
  } else if (fnid == 0xbe2789cc) {
    return "FT_Stream_Close";
  } else if (fnid == 0xdd872661) {
    return "FT_Stream_EnterFrame";
  } else if (fnid == 0x8be132ab) {
    return "FT_Stream_ExitFrame";
  } else if (fnid == 0x21182419) {
    return "FT_Stream_ExtractFrame";
  } else if (fnid == 0x29020e75) {
    return "FT_Stream_Free";
  } else if (fnid == 0xf745465c) {
    return "FT_Stream_GetChar";
  } else if (fnid == 0x4f4d2e71) {
    return "FT_Stream_GetLong";
  } else if (fnid == 0xae082411) {
    return "FT_Stream_GetLongLE";
  } else if (fnid == 0x52dd4e82) {
    return "FT_Stream_GetOffset";
  } else if (fnid == 0xc3e611c8) {
    return "FT_Stream_GetShort";
  } else if (fnid == 0x5ebe9fd4) {
    return "FT_Stream_GetShortLE";
  } else if (fnid == 0xc9e2965f) {
    return "FT_Stream_New";
  } else if (fnid == 0xe45c32bd) {
    return "FT_Stream_Open";
  } else if (fnid == 0x459907c4) {
    return "FT_Stream_OpenGzip";
  } else if (fnid == 0x084eb81a) {
    return "FT_Stream_OpenLZW";
  } else if (fnid == 0xbe48875f) {
    return "FT_Stream_OpenMemory";
  } else if (fnid == 0xab1e7527) {
    return "FT_Stream_Pos";
  } else if (fnid == 0xd56b3c5c) {
    return "FT_Stream_Read";
  } else if (fnid == 0x191899d0) {
    return "FT_Stream_ReadAt";
  } else if (fnid == 0xd0e3cbb0) {
    return "FT_Stream_ReadChar";
  } else if (fnid == 0xf70f8a7f) {
    return "FT_Stream_ReadFields";
  } else if (fnid == 0xa5b68c24) {
    return "FT_Stream_ReadLong";
  } else if (fnid == 0xb1a33dea) {
    return "FT_Stream_ReadLongLE";
  } else if (fnid == 0x0553ae54) {
    return "FT_Stream_ReadOffset";
  } else if (fnid == 0x9666b4c0) {
    return "FT_Stream_ReadShort";
  } else if (fnid == 0xcdb50080) {
    return "FT_Stream_ReadShortLE";
  } else if (fnid == 0x0fd3f094) {
    return "FT_Stream_ReleaseFrame";
  } else if (fnid == 0xba363b3e) {
    return "FT_Stream_Seek";
  } else if (fnid == 0xb06bd868) {
    return "FT_Stream_Skip";
  } else if (fnid == 0x6fa37ea0) {
    return "FT_Stream_TryRead";
  } else if (fnid == 0xa4afeb98) {
    return "FT_Stroker_BeginSubPath";
  } else if (fnid == 0xf885420c) {
    return "FT_Stroker_ConicTo";
  } else if (fnid == 0x4bbc14e6) {
    return "FT_Stroker_CubicTo";
  } else if (fnid == 0x0c8cae53) {
    return "FT_Stroker_Done";
  } else if (fnid == 0x6de0efb4) {
    return "FT_Stroker_EndSubPath";
  } else if (fnid == 0x18484dc6) {
    return "FT_Stroker_Export";
  } else if (fnid == 0xc3a7e8f2) {
    return "FT_Stroker_ExportBorder";
  } else if (fnid == 0x773ff791) {
    return "FT_Stroker_GetBorderCounts";
  } else if (fnid == 0xc20a2975) {
    return "FT_Stroker_GetCounts";
  } else if (fnid == 0xd78b41cb) {
    return "FT_Stroker_LineTo";
  } else if (fnid == 0xd9c9f093) {
    return "FT_Stroker_New";
  } else if (fnid == 0x684766e9) {
    return "FT_Stroker_ParseOutline";
  } else if (fnid == 0xcfd82265) {
    return "FT_Stroker_Rewind";
  } else if (fnid == 0xe7ebf1ef) {
    return "FT_Stroker_Set";
  } else if (fnid == 0x7f9976c7) {
    return "ft_stub_set_char_sizes";
  } else if (fnid == 0xe4347e6b) {
    return "ft_stub_set_pixel_sizes";
  } else if (fnid == 0x5f8bf2cc) {
    return "ft_synthesize_vertical_metrics";
  } else if (fnid == 0x7e5f23a4) {
    return "FT_Tan";
  } else if (fnid == 0x58d00078) {
    return "FT_Trace_Get_Count";
  } else if (fnid == 0x37e33878) {
    return "FT_Trace_Get_Name";
  } else if (fnid == 0x1f9bcbe6) {
    return "ft_validator_error";
  } else if (fnid == 0xd9ab9ae4) {
    return "ft_validator_init";
  } else if (fnid == 0xf1ad8ca5) {
    return "ft_validator_run";
  } else if (fnid == 0xd7f0afaa) {
    return "FT_Vector_From_Polar";
  } else if (fnid == 0x615369c3) {
    return "FT_Vector_Length";
  } else if (fnid == 0xfa34723f) {
    return "FT_Vector_Polarize";
  } else if (fnid == 0x0aa1b8de) {
    return "FT_Vector_Rotate";
  } else if (fnid == 0x4bc591d7) {
    return "FT_Vector_Transform";
  } else if (fnid == 0xe4969d9d) {
    return "FT_Vector_Unit";
  } else if (fnid == 0x8b14be9c) {
    return "FTC_CMapCache_Lookup";
  } else if (fnid == 0x6377137f) {
    return "FTC_CMapCache_New";
  } else if (fnid == 0x3d2c0f77) {
    return "FTC_Image_Cache_Lookup";
  } else if (fnid == 0x8b5d6149) {
    return "FTC_Image_Cache_New";
  } else if (fnid == 0xf926d22f) {
    return "FTC_ImageCache_Lookup";
  } else if (fnid == 0xbc8c081d) {
    return "FTC_ImageCache_New";
  } else if (fnid == 0xf4cf5435) {
    return "FTC_Manager_Done";
  } else if (fnid == 0x3ecdc98b) {
    return "FTC_Manager_Lookup_Face";
  } else if (fnid == 0xdec4091e) {
    return "FTC_Manager_Lookup_Size";
  } else if (fnid == 0x0b411261) {
    return "FTC_Manager_LookupFace";
  } else if (fnid == 0xf638c45e) {
    return "FTC_Manager_LookupSize";
  } else if (fnid == 0x0c08dd3a) {
    return "FTC_Manager_New";
  } else if (fnid == 0x61405530) {
    return "FTC_Manager_RemoveFaceID";
  } else if (fnid == 0xf5e23da4) {
    return "ftc_node_destroy";
  } else if (fnid == 0x6525ef63) {
    return "FTC_Node_Unref";
  } else if (fnid == 0xf73faa25) {
    return "FTC_SBit_Cache_Lookup";
  } else if (fnid == 0xc747f231) {
    return "FTC_SBit_Cache_New";
  } else if (fnid == 0x5f7f83aa) {
    return "FTC_SBitCache_Lookup";
  } else if (fnid == 0x15a11d97) {
    return "FTC_SBitCache_New";
  } else if (fnid == 0xf456ad89) {
    return "ps_hints_apply";
  } else if (fnid == 0x847d2380) {
    return "cellAdecClose";
  } else if (fnid == 0x1529e506) {
    return "cellAdecDecodeAu";
  } else if (fnid == 0xe2ea549b) {
    return "cellAdecEndSeq";
  } else if (fnid == 0x97ff2af1) {
    return "cellAdecGetPcm";
  } else if (fnid == 0xbd75f78b) {
    return "cellAdecGetPcmItem";
  } else if (fnid == 0xd00a6988) {
    return "cellAdecOpen";
  } else if (fnid == 0x8b5551a4) {
    return "cellAdecOpenEx";
  } else if (fnid == 0x7e4a4a49) {
    return "cellAdecQueryAttr";
  } else if (fnid == 0x487b613e) {
    return "cellAdecStartSeq";
  } else if (fnid == 0x46cfc013) {
    return "cellAtracAddStreamData";
  } else if (fnid == 0xfa293e88) {
    return "cellAtracCreateDecoder";
  } else if (fnid == 0x2642d4cc) {
    return "cellAtracCreateDecoderExt";
  } else if (fnid == 0x8eb0e65f) {
    return "cellAtracDecode";
  } else if (fnid == 0x761cb9be) {
    return "cellAtracDeleteDecoder";
  } else if (fnid == 0x006016da) {
    return "cellAtracGetBitrate";
  } else if (fnid == 0x99fb73d1) {
    return "cellAtracGetBufferInfoForResetting";
  } else if (fnid == 0x0f9667b6) {
    return "cellAtracGetChannel";
  } else if (fnid == 0xb5c11938) {
    return "cellAtracGetInternalErrorInfo";
  } else if (fnid == 0xab6b6dbf) {
    return "cellAtracGetLoopInfo";
  } else if (fnid == 0x5f62d546) {
    return "cellAtracGetMaxSample";
  } else if (fnid == 0x7b22e672) {
    return "cellAtracGetNextDecodePosition";
  } else if (fnid == 0x4797d1ff) {
    return "cellAtracGetNextSample";
  } else if (fnid == 0xdfab73aa) {
    return "cellAtracGetRemainFrame";
  } else if (fnid == 0xbe07f05e) {
    return "cellAtracGetSecondBufferInfo";
  } else if (fnid == 0xcf01d5d4) {
    return "cellAtracGetSoundInfo";
  } else if (fnid == 0x2bfff084) {
    return "cellAtracGetStreamDataInfo";
  } else if (fnid == 0xc9a95fcb) {
    return "cellAtracGetVacantSize";
  } else if (fnid == 0x99efe171) {
    return "cellAtracIsSecondBufferNeeded";
  } else if (fnid == 0x7772eb2b) {
    return "cellAtracResetPlayPosition";
  } else if (fnid == 0x66afc68e) {
    return "cellAtracSetDataAndGetMemSize";
  } else if (fnid == 0x78ba5c41) {
    return "cellAtracSetLoopNum";
  } else if (fnid == 0x06ddb53e) {
    return "cellAtracSetSecondBuffer";
  } else if (fnid == 0x9e4b1db8) {
    return "cellAudioAdd2chData";
  } else if (fnid == 0x832df17e) {
    return "cellAudioAdd6chData";
  } else if (fnid == 0xdab029aa) {
    return "cellAudioAddData";
  } else if (fnid == 0x04af134e) {
    return "cellAudioCreateNotifyEventQueue";
  } else if (fnid == 0xa4c9ba65) {
    return "cellAudioCreateNotifyEventQueueEx";
  } else if (fnid == 0xe4046afe) {
    return "cellAudioGetPortBlockTag";
  } else if (fnid == 0x74a66af0) {
    return "cellAudioGetPortConfig";
  } else if (fnid == 0x4109d08c) {
    return "cellAudioGetPortTimestamp";
  } else if (fnid == 0x0b168f92) {
    return "cellAudioInit";
  } else if (fnid == 0x31211f6b) {
    return "cellAudioMiscSetAccessoryVolume";
  } else if (fnid == 0x4129fe2d) {
    return "cellAudioPortClose";
  } else if (fnid == 0xcd7bc431) {
    return "cellAudioPortOpen";
  } else if (fnid == 0x89be28f2) {
    return "cellAudioPortStart";
  } else if (fnid == 0x5b1e2c73) {
    return "cellAudioPortStop";
  } else if (fnid == 0xca5ac370) {
    return "cellAudioQuit";
  } else if (fnid == 0xff3626fd) {
    return "cellAudioRemoveNotifyEventQueue";
  } else if (fnid == 0x2b9bd9ad) {
    return "cellAudioRemoveNotifyEventQueueEx";
  } else if (fnid == 0x17d1213b) {
    return "cellAudioSendAck";
  } else if (fnid == 0x377e0cd9) {
    return "cellAudioSetNotifyEventQueue";
  } else if (fnid == 0xb56ef5a1) {
    return "cellAudioSetNotifyEventQueueEx";
  } else if (fnid == 0x5676f81c) {
    return "cellAudioSetPersonalDevice";
  } else if (fnid == 0x56dfe179) {
    return "cellAudioSetPortLevel";
  } else if (fnid == 0x28bc1409) {
    return "cellAudioUnsetPersonalDevice";
  } else if (fnid == 0x4e9bb95b) {
    return "cellBGDLGetInfo";
  } else if (fnid == 0x2ab0d183) {
    return "cellBGDLGetInfo2";
  } else if (fnid == 0x74e57bdf) {
    return "cellBGDLGetMode";
  } else if (fnid == 0x7e134a90) {
    return "cellBGDLSetMode";
  } else if (fnid == 0x379c5dd6) {
    return "cellCameraClose";
  } else if (fnid == 0xeb6f95fb) {
    return "cellCameraCtrlExtensionUnit";
  } else if (fnid == 0x5ad46570) {
    return "cellCameraEnd";
  } else if (fnid == 0x532b8aaa) {
    return "cellCameraGetAttribute";
  } else if (fnid == 0x10697d7f) {
    return "cellCameraGetBufferInfo";
  } else if (fnid == 0x0e63c444) {
    return "cellCameraGetBufferInfoEx";
  } else if (fnid == 0x7dac520c) {
    return "cellCameraGetBufferSize";
  } else if (fnid == 0x602e2052) {
    return "cellCameraGetDeviceGUID";
  } else if (fnid == 0xb602e328) {
    return "cellCameraGetExtensionUnit";
  } else if (fnid == 0x58bc5870) {
    return "cellCameraGetType";
  } else if (fnid == 0xbf47c5dd) {
    return "cellCameraInit";
  } else if (fnid == 0x7e063bbc) {
    return "cellCameraIsAttached";
  } else if (fnid == 0x8ca53dde) {
    return "cellCameraIsAvailable";
  } else if (fnid == 0xfa160f24) {
    return "cellCameraIsOpen";
  } else if (fnid == 0x5eebf24e) {
    return "cellCameraIsStarted";
  } else if (fnid == 0x85e1b8da) {
    return "cellCameraOpen";
  } else if (fnid == 0x5d25f866) {
    return "cellCameraOpenEx";
  } else if (fnid == 0x61dfbe83) {
    return "cellCameraPrepExtensionUnit";
  } else if (fnid == 0x3845d39b) {
    return "cellCameraRead";
  } else if (fnid == 0xe28b206b) {
    return "cellCameraReadComplete";
  } else if (fnid == 0x21fc151f) {
    return "cellCameraReadEx";
  } else if (fnid == 0x9b98d258) {
    return "cellCameraRemoveNotifyEventQueue";
  } else if (fnid == 0x44673f07) {
    return "cellCameraRemoveNotifyEventQueue2";
  } else if (fnid == 0x81f83db9) {
    return "cellCameraReset";
  } else if (fnid == 0x8cd56eee) {
    return "cellCameraSetAttribute";
  } else if (fnid == 0x2dea3e9b) {
    return "cellCameraSetExtensionUnit";
  } else if (fnid == 0xb0647e5a) {
    return "cellCameraSetNotifyEventQueue";
  } else if (fnid == 0xa7fd2f5b) {
    return "cellCameraSetNotifyEventQueue2";
  } else if (fnid == 0x456dc4aa) {
    return "cellCameraStart";
  } else if (fnid == 0x02f5ced0) {
    return "cellCameraStop";
  } else if (fnid == 0xfd2566b4) {
    return "cellCelp8EncClose";
  } else if (fnid == 0x2099f86e) {
    return "cellCelp8EncEncodeFrame";
  } else if (fnid == 0xbbbc2c1c) {
    return "cellCelp8EncEnd";
  } else if (fnid == 0x48c5020d) {
    return "cellCelp8EncGetAu";
  } else if (fnid == 0x2eb6efee) {
    return "cellCelp8EncOpen";
  } else if (fnid == 0xcd48ad62) {
    return "cellCelp8EncOpenEx";
  } else if (fnid == 0x2d677e0c) {
    return "cellCelp8EncQueryAttr";
  } else if (fnid == 0x0f6ab57b) {
    return "cellCelp8EncStart";
  } else if (fnid == 0x29da1ea6) {
    return "cellCelp8EncWaitForOutput";
  } else if (fnid == 0x15ec0cca) {
    return "cellCelpEncClose";
  } else if (fnid == 0x81fe030c) {
    return "cellCelpEncEncodeFrame";
  } else if (fnid == 0xf2b85dff) {
    return "cellCelpEncEnd";
  } else if (fnid == 0x3773692f) {
    return "cellCelpEncGetAu";
  } else if (fnid == 0x77b3b29a) {
    return "cellCelpEncOpen";
  } else if (fnid == 0x9eb084db) {
    return "cellCelpEncOpenEx";
  } else if (fnid == 0x6b148570) {
    return "cellCelpEncQueryAttr";
  } else if (fnid == 0x55dc23de) {
    return "cellCelpEncStart";
  } else if (fnid == 0x9b244272) {
    return "cellCelpEncWaitForOutput";
  } else if (fnid == 0x8921232c) {
    return "_QN4cell5Daisy15LFQueue2PopOpenEPNS0_8LFQueue2E";
  } else if (fnid == 0x43838c2a) {
    return "_QN4cell5Daisy16LFQueue2PopCloseEPNS0_8LFQueue2EPFiPvjE";
  } else if (fnid == 0x437151f0) {
    return "_QN4cell5Daisy16LFQueue2PushOpenEPNS0_8LFQueue2E";
  } else if (fnid == 0xa2e6c4b0) {
    return "_QN4cell5Daisy17LFQueue2PushCloseEPNS0_8LFQueue2EPFiPvjE";
  } else if (fnid == 0x6f564a3d) {
    return "_QN4cell5Daisy21LFQueue2GetPopPointerEPNS0_8LFQueue2EPij";
  } else if (fnid == 0xa98e3c4b) {
    return "_QN4cell5Daisy22ScatterGatherInterlock21proceedSequenceNumberEv";
  } else if (fnid == 0xdeb0d2e6) {
    return "_QN4cell5Daisy22ScatterGatherInterlock5probeEj";
  } else if (fnid == 0xfa46fd99) {
    return "_QN4cell5Daisy22ScatterGatherInterlock7releaseEv";
  } else if (fnid == 0x20586bc0) {
    return "_QN4cell5Daisy22ScatterGatherInterlockC1EPVNS0_16_AtomicInterlockEjPjjh";
  } else if (fnid == 0x8d42fae9) {
    return "_QN4cell5Daisy22ScatterGatherInterlockC1EPVNS0_16_AtomicInterlockEjPvPFiS5_jE";
  } else if (fnid == 0xb8e85009) {
    return "_QN4cell5Daisy22ScatterGatherInterlockC2EPVNS0_16_AtomicInterlockEjPjjh";
  } else if (fnid == 0xa4cd494e) {
    return "_QN4cell5Daisy22ScatterGatherInterlockC2EPVNS0_16_AtomicInterlockEjPvPFiS5_jE";
  } else if (fnid == 0xed37e00a) {
    return "_QN4cell5Daisy22ScatterGatherInterlockD1Ev";
  } else if (fnid == 0x7e639d78) {
    return "_QN4cell5Daisy22ScatterGatherInterlockD2Ev";
  } else if (fnid == 0xce618901) {
    return "_QN4cell5Daisy26LFQueue2CompletePopPointerEPNS0_8LFQueue2EiPFiPvjEj";
  } else if (fnid == 0x72dee049) {
    return "_QN4cell5Daisy29LFQueue2HasUnfinishedConsumerEPNS0_8LFQueue2Ej";
  } else if (fnid == 0x8fd3b122) {
    return "_QN4cell5Daisy4Lock10initializeEj";
  } else if (fnid == 0x163dafeb) {
    return "_QN4cell5Daisy4Lock15completeConsumeEj";
  } else if (fnid == 0x933c2273) {
    return "_QN4cell5Daisy4Lock15completeProduceEj";
  } else if (fnid == 0xc3e29e69) {
    return "_QN4cell5Daisy4Lock18getNextHeadPointerEv";
  } else if (fnid == 0xf88e07db) {
    return "_QN4cell5Daisy4Lock18getNextTailPointerEv";
  } else if (fnid == 0x1cf82d42) {
    return "_QN4cell5Daisy4Lock7popOpenEv";
  } else if (fnid == 0x4c34ec38) {
    return "_QN4cell5Daisy4Lock8popCloseEv";
  } else if (fnid == 0xd888f42a) {
    return "_QN4cell5Daisy4Lock8pushOpenEv";
  } else if (fnid == 0xc6c5f3c6) {
    return "_QN4cell5Daisy4Lock9pushCloseEv";
  } else if (fnid == 0x17348ba6) {
    return "_QN4cell5Daisy9_snprintfEPcjPKcz";
  } else if (fnid == 0xa286b24a) {
    return "_ZN4cell5Daisy15LFQueue2PopOpenEPNS0_8LFQueue2E";
  } else if (fnid == 0x9581b8bc) {
    return "_ZN4cell5Daisy16LFQueue2PopCloseEPNS0_8LFQueue2EPFiPvjE";
  } else if (fnid == 0xf2034429) {
    return "_ZN4cell5Daisy16LFQueue2PushOpenEPNS0_8LFQueue2E";
  } else if (fnid == 0x0563627c) {
    return "_ZN4cell5Daisy17LFQueue2PushCloseEPNS0_8LFQueue2EPFiPvjE";
  } else if (fnid == 0x0d219671) {
    return "_ZN4cell5Daisy21LFQueue2GetPopPointerEPNS0_8LFQueue2EPij";
  } else if (fnid == 0xc0faf91c) {
    return "_ZN4cell5Daisy22ScatterGatherInterlock21proceedSequenceNumberEv";
  } else if (fnid == 0xd2be66e6) {
    return "_ZN4cell5Daisy22ScatterGatherInterlock5probeEj";
  } else if (fnid == 0x1ce8c914) {
    return "_ZN4cell5Daisy22ScatterGatherInterlock7releaseEv";
  } else if (fnid == 0x1e5b1e23) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockC1EPVNS0_16_AtomicInterlockEjPjjh";
  } else if (fnid == 0x3190dfe4) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockC1EPVNS0_16_AtomicInterlockEjPvPFiS5_jE";
  } else if (fnid == 0x34234bf0) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockC2EPVNS0_16_AtomicInterlockEjPjjh";
  } else if (fnid == 0xb190d6ad) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockC2EPVNS0_16_AtomicInterlockEjPvPFiS5_jE";
  } else if (fnid == 0x8dacb8d0) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockD1Ev";
  } else if (fnid == 0x5a93e4e8) {
    return "_ZN4cell5Daisy22ScatterGatherInterlockD2Ev";
  } else if (fnid == 0x1bbcb5b9) {
    return "_ZN4cell5Daisy26LFQueue2CompletePopPointerEPNS0_8LFQueue2EiPFiPvjEj";
  } else if (fnid == 0x2be4dde1) {
    return "_ZN4cell5Daisy29LFQueue2HasUnfinishedConsumerEPNS0_8LFQueue2Ej";
  } else if (fnid == 0x2e8654f8) {
    return "_ZN4cell5Daisy4Lock10initializeEj";
  } else if (fnid == 0xbd091e26) {
    return "_ZN4cell5Daisy4Lock15completeConsumeEj";
  } else if (fnid == 0x41df5d21) {
    return "_ZN4cell5Daisy4Lock15completeProduceEj";
  } else if (fnid == 0x2c967aa1) {
    return "_ZN4cell5Daisy4Lock18getNextHeadPointerEv";
  } else if (fnid == 0x6fc83371) {
    return "_ZN4cell5Daisy4Lock18getNextTailPointerEv";
  } else if (fnid == 0x17c35cc9) {
    return "_ZN4cell5Daisy4Lock7popOpenEv";
  } else if (fnid == 0x566c9460) {
    return "_ZN4cell5Daisy4Lock8popCloseEv";
  } else if (fnid == 0x706feed9) {
    return "_ZN4cell5Daisy4Lock8pushOpenEv";
  } else if (fnid == 0x7b79d6aa) {
    return "_ZN4cell5Daisy4Lock9pushCloseEv";
  } else if (fnid == 0x28acb77f) {
    return "_ZN4cell5Daisy9_snprintfEPcjPKcz";
  } else if (fnid == 0x8c692521) {
    return "cellDmuxClose";
  } else if (fnid == 0x05371c8d) {
    return "cellDmuxDisableEs";
  } else if (fnid == 0x7b56dc3f) {
    return "cellDmuxEnableEs";
  } else if (fnid == 0xebb3b2bd) {
    return "cellDmuxFlushEs";
  } else if (fnid == 0x42c716b5) {
    return "cellDmuxGetAu";
  } else if (fnid == 0x2c9a5857) {
    return "cellDmuxGetAuEx";
  } else if (fnid == 0x68492de9) {
    return "cellDmuxOpen";
  } else if (fnid == 0x11bc3a6c) {
    return "cellDmuxOpen2";
  } else if (fnid == 0xf6c23560) {
    return "cellDmuxOpenEx";
  } else if (fnid == 0x2750c5e0) {
    return "cellDmuxPeekAu";
  } else if (fnid == 0x002e8da2) {
    return "cellDmuxPeekAuEx";
  } else if (fnid == 0xa2d4189b) {
    return "cellDmuxQueryAttr";
  } else if (fnid == 0x3f76e3cd) {
    return "cellDmuxQueryAttr2";
  } else if (fnid == 0x02170d1a) {
    return "cellDmuxQueryEsAttr";
  } else if (fnid == 0x52911bcf) {
    return "cellDmuxQueryEsAttr2";
  } else if (fnid == 0x24ea6474) {
    return "cellDmuxReleaseAu";
  } else if (fnid == 0x21d424f0) {
    return "cellDmuxResetEs";
  } else if (fnid == 0x5d345de9) {
    return "cellDmuxResetStream";
  } else if (fnid == 0xccff1284) {
    return "cellDmuxResetStreamAndWaitDone";
  } else if (fnid == 0x04e7499f) {
    return "cellDmuxSetStream";
  } else if (fnid == 0xc11f8056) {
    return "_cellFiberPpuAttributeInitialize";
  } else if (fnid == 0x31252ec3) {
    return "_cellFiberPpuContextAttributeInitialize";
  } else if (fnid == 0x55870804) {
    return "_cellFiberPpuInitialize";
  } else if (fnid == 0x9e25c72d) {
    return "_cellFiberPpuSchedulerAttributeInitialize";
  } else if (fnid == 0x68ba4568) {
    return "_cellFiberPpuUtilWorkerControlAttributeInitialize";
  } else if (fnid == 0xf6c6900c) {
    return "cellFiberPpuCheckFlags";
  } else if (fnid == 0xf3e81219) {
    return "cellFiberPpuCheckStackLimit";
  } else if (fnid == 0xb90c871b) {
    return "cellFiberPpuContextCheckStackLimit";
  } else if (fnid == 0x0a25b6c8) {
    return "cellFiberPpuContextEnterScheduler";
  } else if (fnid == 0xb3a48079) {
    return "cellFiberPpuContextFinalize";
  } else if (fnid == 0x72086315) {
    return "cellFiberPpuContextInitialize";
  } else if (fnid == 0x01036193) {
    return "cellFiberPpuContextReturnToThread";
  } else if (fnid == 0xaba1c563) {
    return "cellFiberPpuContextRun";
  } else if (fnid == 0x081c98be) {
    return "cellFiberPpuContextRunScheduler";
  } else if (fnid == 0x34a81091) {
    return "cellFiberPpuContextSelf";
  } else if (fnid == 0xd0066b17) {
    return "cellFiberPpuContextSwitch";
  } else if (fnid == 0x7c2f4034) {
    return "cellFiberPpuCreateFiber";
  } else if (fnid == 0xfa8d5f95) {
    return "cellFiberPpuExit";
  } else if (fnid == 0x8b6baa01) {
    return "cellFiberPpuFinalizeScheduler";
  } else if (fnid == 0xb0594b2d) {
    return "cellFiberPpuGetScheduler";
  } else if (fnid == 0xe492a675) {
    return "cellFiberPpuHasRunnableFiber";
  } else if (fnid == 0xee3b604d) {
    return "cellFiberPpuInitializeScheduler";
  } else if (fnid == 0xa6004249) {
    return "cellFiberPpuJoinFiber";
  } else if (fnid == 0x12b1acf0) {
    return "cellFiberPpuRunFibers";
  } else if (fnid == 0x3860a12a) {
    return "cellFiberPpuSchedulerTraceFinalize";
  } else if (fnid == 0xbf9cd933) {
    return "cellFiberPpuSchedulerTraceInitialize";
  } else if (fnid == 0xadedbebf) {
    return "cellFiberPpuSchedulerTraceStart";
  } else if (fnid == 0xe665f9a9) {
    return "cellFiberPpuSchedulerTraceStop";
  } else if (fnid == 0x5d9a7034) {
    return "cellFiberPpuSelf";
  } else if (fnid == 0x8afb8356) {
    return "cellFiberPpuSendSignal";
  } else if (fnid == 0xfbf5fe40) {
    return "cellFiberPpuSetPriority";
  } else if (fnid == 0xea6dc1ad) {
    return "cellFiberPpuUtilWorkerControlCheckFlags";
  } else if (fnid == 0x62a20f0d) {
    return "cellFiberPpuUtilWorkerControlConnectEventQueueToSpurs";
  } else if (fnid == 0xbfca88d3) {
    return "cellFiberPpuUtilWorkerControlCreateFiber";
  } else if (fnid == 0x4fc86b2c) {
    return "cellFiberPpuUtilWorkerControlDisconnectEventQueue";
  } else if (fnid == 0xa27c95ca) {
    return "cellFiberPpuUtilWorkerControlFinalize";
  } else if (fnid == 0x3204b146) {
    return "cellFiberPpuUtilWorkerControlInitialize";
  } else if (fnid == 0xf2ccad4f) {
    return "cellFiberPpuUtilWorkerControlInitializeWithAttribute";
  } else if (fnid == 0x3b417f82) {
    return "cellFiberPpuUtilWorkerControlJoinFiber";
  } else if (fnid == 0x1e7a247a) {
    return "cellFiberPpuUtilWorkerControlRunFibers";
  } else if (fnid == 0x5d3992dd) {
    return "cellFiberPpuUtilWorkerControlSendSignal";
  } else if (fnid == 0x392c5aa5) {
    return "cellFiberPpuUtilWorkerControlSetPollingMode";
  } else if (fnid == 0xc04e2438) {
    return "cellFiberPpuUtilWorkerControlShutdown";
  } else if (fnid == 0xbabf714b) {
    return "cellFiberPpuUtilWorkerControlWakeup";
  } else if (fnid == 0xa4599cf3) {
    return "cellFiberPpuWaitFlag";
  } else if (fnid == 0x6c164b3b) {
    return "cellFiberPpuWaitSignal";
  } else if (fnid == 0x0c44f441) {
    return "cellFiberPpuYield";
  } else if (fnid == 0x47ca71ef) {
    return "cellFontAdjustFontScaling";
  } else if (fnid == 0x9e3b1e16) {
    return "cellFontAdjustGlyphExpandBuffer";
  } else if (fnid == 0x66a23100) {
    return "cellFontBindRenderer";
  } else if (fnid == 0x3da90559) {
    return "cellFontClearFileCache";
  } else if (fnid == 0xb276f1f6) {
    return "cellFontCloseFont";
  } else if (fnid == 0x042e74e3) {
    return "cellFontCreateRenderer";
  } else if (fnid == 0xa7b2103a) {
    return "cellFontDelete";
  } else if (fnid == 0xd62f5d76) {
    return "cellFontDeleteGlyph";
  } else if (fnid == 0x21ebb248) {
    return "cellFontDestroyRenderer";
  } else if (fnid == 0x7ab47f7e) {
    return "cellFontEnd";
  } else if (fnid == 0x8a35c887) {
    return "cellFontEndGraphics";
  } else if (fnid == 0x40d40544) {
    return "cellFontEndLibrary";
  } else if (fnid == 0xdee0836c) {
    return "cellFontExtend";
  } else if (fnid == 0xc17259de) {
    return "cellFontGenerateCharGlyph";
  } else if (fnid == 0xcaed32c1) {
    return "cellFontGenerateCharGlyphVertical";
  } else if (fnid == 0xc91c8ece) {
    return "cellFontGetBindingRenderer";
  } else if (fnid == 0xd8eaee9f) {
    return "cellFontGetCharGlyphMetrics";
  } else if (fnid == 0xfe9a6dd7) {
    return "cellFontGetCharGlyphMetricsVertical";
  } else if (fnid == 0xe16e679a) {
    return "cellFontGetEffectSlant";
  } else if (fnid == 0x25dbeff9) {
    return "cellFontGetEffectWeight";
  } else if (fnid == 0x98ac5524) {
    return "cellFontGetFontIdCode";
  } else if (fnid == 0x59ef0073) {
    return "cellFontGetGlyphExpandBufferInfo";
  } else if (fnid == 0x1387c45c) {
    return "cellFontGetHorizontalLayout";
  } else if (fnid == 0x7c5df0d8) {
    return "cellFontGetInitializedRevisionFlags";
  } else if (fnid == 0x06be743d) {
    return "cellFontGetKerning";
  } else if (fnid == 0x5abd8b1e) {
    return "cellFontGetLibrary";
  } else if (fnid == 0x2da9fd9d) {
    return "cellFontGetRenderCharGlyphMetrics";
  } else if (fnid == 0x700e6223) {
    return "cellFontGetRenderCharGlyphMetricsVertical";
  } else if (fnid == 0xced4dda9) {
    return "cellFontGetRenderEffectSlant";
  } else if (fnid == 0x0109f3d3) {
    return "cellFontGetRenderEffectWeight";
  } else if (fnid == 0x0baf90fe) {
    return "cellFontGetRenderScaledKerning";
  } else if (fnid == 0x0d106a11) {
    return "cellFontGetRenderScalePixel";
  } else if (fnid == 0xa165daae) {
    return "cellFontGetRenderScalePoint";
  } else if (fnid == 0x8a632038) {
    return "cellFontGetResolutionDpi";
  } else if (fnid == 0xb015a84e) {
    return "cellFontGetRevisionFlags";
  } else if (fnid == 0x285d30d6) {
    return "cellFontGetScalePixel";
  } else if (fnid == 0xf7a19060) {
    return "cellFontGetScalePoint";
  } else if (fnid == 0x698897f8) {
    return "cellFontGetVerticalLayout";
  } else if (fnid == 0x231d5941) {
    return "cellFontGlyphGetHorizontalShift";
  } else if (fnid == 0xa8fae920) {
    return "cellFontGlyphGetOutlineControlDistance";
  } else if (fnid == 0x9c8d3ff7) {
    return "cellFontGlyphGetOutlineVertexes";
  } else if (fnid == 0x22e24707) {
    return "cellFontGlyphGetScalePixel";
  } else if (fnid == 0xb4d112af) {
    return "cellFontGlyphGetVertexesGlyphSize";
  } else if (fnid == 0x534e785f) {
    return "cellFontGlyphGetVerticalShift";
  } else if (fnid == 0xe01b199e) {
    return "cellFontGlyphRenderImage";
  } else if (fnid == 0x97b95244) {
    return "cellFontGlyphRenderImageHorizontal";
  } else if (fnid == 0x8e3f2c40) {
    return "cellFontGlyphRenderImageVertical";
  } else if (fnid == 0x53f529fe) {
    return "cellFontGlyphSetupVertexesGlyph";
  } else if (fnid == 0x03a142b9) {
    return "cellFontGraphicsGetDrawType";
  } else if (fnid == 0xa41342dc) {
    return "cellFontGraphicsGetFontRGBA";
  } else if (fnid == 0xf7aaa8e2) {
    return "cellFontGraphicsGetLineRGBA";
  } else if (fnid == 0x2388186c) {
    return "cellFontGraphicsGetScalePixel";
  } else if (fnid == 0x87bd650f) {
    return "cellFontGraphicsSetDrawType";
  } else if (fnid == 0x061049ad) {
    return "cellFontGraphicsSetFontRGBA";
  } else if (fnid == 0x7c83bc15) {
    return "cellFontGraphicsSetLineRGBA";
  } else if (fnid == 0x16322df1) {
    return "cellFontGraphicsSetScalePixel";
  } else if (fnid == 0x970d4c22) {
    return "cellFontGraphicsSetupDrawContext";
  } else if (fnid == 0xf03dcc29) {
    return "cellFontInitializeWithRevision";
  } else if (fnid == 0x0a7306a4) {
    return "cellFontOpenFontFile";
  } else if (fnid == 0x29329541) {
    return "cellFontOpenFontInstance";
  } else if (fnid == 0x9e19072b) {
    return "cellFontOpenFontMemory";
  } else if (fnid == 0xa885cc9b) {
    return "cellFontOpenFontset";
  } else if (fnid == 0x073fa321) {
    return "cellFontOpenFontsetOnMemory";
  } else if (fnid == 0xb3d304b2) {
    return "cellFontPatchWorks";
  } else if (fnid == 0x88be4799) {
    return "cellFontRenderCharGlyphImage";
  } else if (fnid == 0x1a218fe4) {
    return "cellFontRenderCharGlyphImageHorizontal";
  } else if (fnid == 0xe857a0ca) {
    return "cellFontRenderCharGlyphImageVertical";
  } else if (fnid == 0x90b9465e) {
    return "cellFontRenderSurfaceInit";
  } else if (fnid == 0xb422b005) {
    return "cellFontRenderSurfaceSetScissor";
  } else if (fnid == 0x8657c8f5) {
    return "cellFontSetEffectSlant";
  } else if (fnid == 0x25253fe4) {
    return "cellFontSetEffectWeight";
  } else if (fnid == 0x6cfada83) {
    return "cellFontSetFontOpenMode";
  } else if (fnid == 0x6bf6f832) {
    return "cellFontSetFontsetOpenMode";
  } else if (fnid == 0xfb3341ba) {
    return "cellFontSetResolutionDpi";
  } else if (fnid == 0x297f0e93) {
    return "cellFontSetScalePixel";
  } else if (fnid == 0x70f3e728) {
    return "cellFontSetScalePoint";
  } else if (fnid == 0x78d05e08) {
    return "cellFontSetupRenderEffectSlant";
  } else if (fnid == 0xa6dc25d1) {
    return "cellFontSetupRenderEffectWeight";
  } else if (fnid == 0x227e1e3c) {
    return "cellFontSetupRenderScalePixel";
  } else if (fnid == 0x4d19c631) {
    return "cellFontSetupRenderScalePoint";
  } else if (fnid == 0xf16379fa) {
    return "cellFontUnbindRenderer";
  } else if (fnid == 0x6bad7a69) {
    return "cellFontVertexesGlyphRelocate";
  } else if (fnid == 0xfa0c2de0) {
    return "cellFontFTGetInitializedRevisionFlags";
  } else if (fnid == 0xec89a187) {
    return "cellFontFTGetRevisionFlags";
  } else if (fnid == 0x7a0a83c4) {
    return "cellFontInitLibraryFreeTypeWithRevision";
  } else if (fnid == 0xf52639ea) {
    return "cellGameBootCheck";
  } else if (fnid == 0xb0a1f8c6) {
    return "cellGameContentErrorDialog";
  } else if (fnid == 0x70acec67) {
    return "cellGameContentPermit";
  } else if (fnid == 0x42a2e133) {
    return "cellGameCreateGameData";
  } else if (fnid == 0xdb9819f3) {
    return "cellGameDataCheck";
  } else if (fnid == 0xb367c6e3) {
    return "cellGameDeleteGameData";
  } else if (fnid == 0x2a8e6b92) {
    return "cellGameGetDiscContentInfoUpdatePath";
  } else if (fnid == 0xa80bf223) {
    return "cellGameGetLocalWebContentPath";
  } else if (fnid == 0xb7a45caf) {
    return "cellGameGetParamInt";
  } else if (fnid == 0x3a5d726a) {
    return "cellGameGetParamString";
  } else if (fnid == 0xef9d42d5) {
    return "cellGameGetSizeKB";
  } else if (fnid == 0xce4374f6) {
    return "cellGamePatchCheck";
  } else if (fnid == 0xdaa5cd20) {
    return "cellGameSetParamString";
  } else if (fnid == 0xd24e3928) {
    return "cellGameThemeInstall";
  } else if (fnid == 0x87406734) {
    return "cellGameThemeInstallFromBuffer";
  } else if (fnid == 0xf6acd0bc) {
    return "cellGameGetBootGameInfo";
  } else if (fnid == 0x59b1ede1) {
    return "cellGameGetHomeDataExportPath";
  } else if (fnid == 0x72cc6cf7) {
    return "cellGameGetHomeDataImportPath";
  } else if (fnid == 0x94e9f81d) {
    return "cellGameGetHomeLaunchOptionPath";
  } else if (fnid == 0x59bbebd4) {
    return "cellGameGetHomePath";
  } else if (fnid == 0x38579ec9) {
    return "cellGameSetExitParam";
  } else if (fnid == 0x5f909b17) {
    return "_cellGcmFunc1";
  } else if (fnid == 0x661fe266) {
    return "_cellGcmFunc12";
  } else if (fnid == 0xbb42a9dd) {
    return "_cellGcmFunc13";
  } else if (fnid == 0x3a33c1fd) {
    return "_cellGcmFunc15";
  } else if (fnid == 0x8effb7fd) {
    return "_cellGcmFunc2";
  } else if (fnid == 0x1bd633f8) {
    return "_cellGcmFunc3";
  } else if (fnid == 0x688b8ac9) {
    return "_cellGcmFunc38";
  } else if (fnid == 0x7fc034bc) {
    return "_cellGcmFunc4";
  } else if (fnid == 0x15bae46b) {
    return "_cellGcmInitBody";
  } else if (fnid == 0x21397818) {
    return "_cellGcmSetFlipCommand";
  } else if (fnid == 0xd8f88e1a) {
    return "_cellGcmSetFlipCommandWithWaitLabel";
  } else if (fnid == 0x21ac3697) {
    return "cellGcmAddressToOffset";
  } else if (fnid == 0x4524cccd) {
    return "cellGcmBindTile";
  } else if (fnid == 0x9dc04436) {
    return "cellGcmBindZcull";
  } else if (fnid == 0x1f61b3ff) {
    return "cellGcmDumpGraphicsError";
  } else if (fnid == 0xe315a0b2) {
    return "cellGcmGetConfiguration";
  } else if (fnid == 0xa547adde) {
    return "cellGcmGetControlRegister";
  } else if (fnid == 0x93806525) {
    return "cellGcmGetCurrentDisplayBufferId";
  } else if (fnid == 0xc8f3bd09) {
    return "cellGcmGetCurrentField";
  } else if (fnid == 0x5e2ee0f0) {
    return "cellGcmGetDefaultCommandWordSize";
  } else if (fnid == 0x8cdf8c70) {
    return "cellGcmGetDefaultSegmentWordSize";
  } else if (fnid == 0x371674cf) {
    return "cellGcmGetDisplayBufferByFlipIndex";
  } else if (fnid == 0x0e6b0dae) {
    return "cellGcmGetDisplayInfo";
  } else if (fnid == 0x72a577ce) {
    return "cellGcmGetFlipStatus";
  } else if (fnid == 0xf80196c1) {
    return "cellGcmGetLabelAddress";
  } else if (fnid == 0x63387071) {
    return "cellGcmGetLastFlipTime";
  } else if (fnid == 0x23ae55a3) {
    return "cellGcmGetLastSecondVTime";
  } else if (fnid == 0xfb81c03e) {
    return "cellGcmGetMaxIoMapSize";
  } else if (fnid == 0x21cee035) {
    return "cellGcmGetNotifyDataAddress";
  } else if (fnid == 0x2922aed0) {
    return "cellGcmGetOffsetTable";
  } else if (fnid == 0x99d397ac) {
    return "cellGcmGetReport";
  } else if (fnid == 0x9a0159af) {
    return "cellGcmGetReportDataAddress";
  } else if (fnid == 0x8572bce2) {
    return "cellGcmGetReportDataAddressLocation";
  } else if (fnid == 0xa6b180ac) {
    return "cellGcmGetReportDataLocation";
  } else if (fnid == 0x055bd74d) {
    return "cellGcmGetTiledPitchSize";
  } else if (fnid == 0x657571f7) {
    return "cellGcmGetTileInfo";
  } else if (fnid == 0x5a41c10f) {
    return "cellGcmGetTimeStamp";
  } else if (fnid == 0x2ad4951b) {
    return "cellGcmGetTimeStampLocation";
  } else if (fnid == 0x723bbc7e) {
    return "cellGcmGetVBlankCount";
  } else if (fnid == 0xd9a0a879) {
    return "cellGcmGetZcullInfo";
  } else if (fnid == 0x107bf3a1) {
    return "cellGcmInitCursor";
  } else if (fnid == 0xcaabd992) {
    return "cellGcmInitDefaultFifoMode";
  } else if (fnid == 0xfce9e764) {
    return "cellGcmInitSystemMode";
  } else if (fnid == 0x2a6fba9c) {
    return "cellGcmIoOffsetToAddress";
  } else if (fnid == 0x63441cb4) {
    return "cellGcmMapEaIoAddress";
  } else if (fnid == 0x626e8518) {
    return "cellGcmMapEaIoAddressWithFlags";
  } else if (fnid == 0xdb769b32) {
    return "cellGcmMapLocalMemory";
  } else if (fnid == 0xa114ec67) {
    return "cellGcmMapMainMemory";
  } else if (fnid == 0xa7ede268) {
    return "cellGcmReserveIoMapSize";
  } else if (fnid == 0xb2e761d4) {
    return "cellGcmResetFlipStatus";
  } else if (fnid == 0x69c6cc82) {
    return "cellGcmSetCursorDisable";
  } else if (fnid == 0xc47d0812) {
    return "cellGcmSetCursorEnable";
  } else if (fnid == 0xf9bfdc72) {
    return "cellGcmSetCursorImageOffset";
  } else if (fnid == 0x1a0de550) {
    return "cellGcmSetCursorPosition";
  } else if (fnid == 0x51c9d62b) {
    return "cellGcmSetDebugOutputLevel";
  } else if (fnid == 0xbc982946) {
    return "cellGcmSetDefaultCommandBuffer";
  } else if (fnid == 0x172c3197) {
    return "cellGcmSetDefaultCommandBufferAndSegmentWordSize";
  } else if (fnid == 0x9ba451e4) {
    return "cellGcmSetDefaultFifoSize";
  } else if (fnid == 0xa53d12ae) {
    return "cellGcmSetDisplayBuffer";
  } else if (fnid == 0xdc09357e) {
    return "cellGcmSetFlip";
  } else if (fnid == 0xa41ef7e8) {
    return "cellGcmSetFlipHandler";
  } else if (fnid == 0xacee8542) {
    return "cellGcmSetFlipImmediate";
  } else if (fnid == 0x4ae8d215) {
    return "cellGcmSetFlipMode";
  } else if (fnid == 0xa47c09ff) {
    return "cellGcmSetFlipStatus";
  } else if (fnid == 0xd01b570d) {
    return "cellGcmSetGraphicsHandler";
  } else if (fnid == 0xbd6d60d9) {
    return "cellGcmSetInvalidateTile";
  } else if (fnid == 0x0b4b62d5) {
    return "cellGcmSetPrepareFlip";
  } else if (fnid == 0x0a862772) {
    return "cellGcmSetQueueHandler";
  } else if (fnid == 0x4d7ce993) {
    return "cellGcmSetSecondVFrequency";
  } else if (fnid == 0xdc494430) {
    return "cellGcmSetSecondVHandler";
  } else if (fnid == 0xd0b1d189) {
    return "cellGcmSetTile";
  } else if (fnid == 0xbd100dbc) {
    return "cellGcmSetTileInfo";
  } else if (fnid == 0x8bde5ebf) {
    return "cellGcmSetUserCommand";
  } else if (fnid == 0x06edea9e) {
    return "cellGcmSetUserHandler";
  } else if (fnid == 0xffe0160e) {
    return "cellGcmSetVBlankFrequency";
  } else if (fnid == 0xa91b0402) {
    return "cellGcmSetVBlankHandler";
  } else if (fnid == 0x983fb9aa) {
    return "cellGcmSetWaitFlip";
  } else if (fnid == 0xdf6476bd) {
    return "cellGcmSetWaitFlipUnsafe";
  } else if (fnid == 0xd34a420d) {
    return "cellGcmSetZcull";
  } else if (fnid == 0x25b40ab4) {
    return "cellGcmSortRemapEaIoAddress";
  } else if (fnid == 0xe44874f3) {
    return "cellGcmSysGetLastVBlankTime";
  } else if (fnid == 0x527c6439) {
    return "cellGcmTerminate";
  } else if (fnid == 0xd9b7653e) {
    return "cellGcmUnbindTile";
  } else if (fnid == 0xa75640e8) {
    return "cellGcmUnbindZcull";
  } else if (fnid == 0xefd00f54) {
    return "cellGcmUnmapEaIoAddress";
  } else if (fnid == 0xdb23e867) {
    return "cellGcmUnmapIoAddress";
  } else if (fnid == 0x3b9bd5bd) {
    return "cellGcmUnreserveIoMapSize";
  } else if (fnid == 0xbd2fa0a7) {
    return "cellGcmUpdateCursor";
  } else if (fnid == 0x116a7da9) {
    return "cellGifDecClose";
  } else if (fnid == 0xb60d42a5) {
    return "cellGifDecCreate";
  } else if (fnid == 0x44b1bc61) {
    return "cellGifDecDecodeData";
  } else if (fnid == 0xe74b2cb1) {
    return "cellGifDecDestroy";
  } else if (fnid == 0x4711cb7f) {
    return "cellGifDecExtCreate";
  } else if (fnid == 0x02e7e03e) {
    return "cellGifDecExtDecodeData";
  } else if (fnid == 0x17fb83c1) {
    return "cellGifDecExtOpen";
  } else if (fnid == 0xe53f91f2) {
    return "cellGifDecExtReadHeader";
  } else if (fnid == 0x95cae771) {
    return "cellGifDecExtSetParameter";
  } else if (fnid == 0x75745079) {
    return "cellGifDecOpen";
  } else if (fnid == 0xf0da95de) {
    return "cellGifDecReadHeader";
  } else if (fnid == 0x41a90dc4) {
    return "cellGifDecSetParameter";
  } else if (fnid == 0x1b5bdcc6) {
    return "cellHttpAddCookieWithClientId";
  } else if (fnid == 0x4b33942a) {
    return "cellHttpClientAddHeader";
  } else if (fnid == 0x2033b878) {
    return "cellHttpClientCloseAllConnections";
  } else if (fnid == 0x27f86d70) {
    return "cellHttpClientCloseConnections";
  } else if (fnid == 0x617eec02) {
    return "cellHttpClientDeleteHeader";
  } else if (fnid == 0x0d9c65be) {
    return "cellHttpClientGetAllHeaders";
  } else if (fnid == 0xfce39343) {
    return "cellHttpClientGetAuthenticationCacheStatus";
  } else if (fnid == 0x5980a293) {
    return "cellHttpClientGetAutoAuthentication";
  } else if (fnid == 0x2960e309) {
    return "cellHttpClientGetAutoRedirect";
  } else if (fnid == 0x14bfc765) {
    return "cellHttpClientGetConnTimeout";
  } else if (fnid == 0xeb9c1e5e) {
    return "cellHttpClientGetCookieStatus";
  } else if (fnid == 0xd1ec0b25) {
    return "cellHttpClientGetHeader";
  } else if (fnid == 0x591c21a8) {
    return "cellHttpClientGetKeepAlive";
  } else if (fnid == 0x46bcc9ff) {
    return "cellHttpClientGetPerHostKeepAliveMax";
  } else if (fnid == 0xffc74003) {
    return "cellHttpClientGetPerHostPoolSize";
  } else if (fnid == 0xd06c90a4) {
    return "cellHttpClientGetPerPipelineMax";
  } else if (fnid == 0x2a1f28f6) {
    return "cellHttpClientGetPipeline";
  } else if (fnid == 0x4d40cf98) {
    return "cellHttpClientGetProxy";
  } else if (fnid == 0x130150ea) {
    return "cellHttpClientGetRecvBufferSize";
  } else if (fnid == 0xba78e51f) {
    return "cellHttpClientGetRecvTimeout";
  } else if (fnid == 0x6884cdb7) {
    return "cellHttpClientGetResponseBufferMax";
  } else if (fnid == 0x271a0b06) {
    return "cellHttpClientGetSendTimeout";
  } else if (fnid == 0xccf57336) {
    return "cellHttpClientGetSslVersion";
  } else if (fnid == 0x070f1020) {
    return "cellHttpClientGetTotalPoolSize";
  } else if (fnid == 0xee05b0c1) {
    return "cellHttpClientGetUserAgent";
  } else if (fnid == 0xdc405507) {
    return "cellHttpClientGetVersion";
  } else if (fnid == 0xadc0a4b2) {
    return "cellHttpClientPollConnections";
  } else if (fnid == 0x6eed4999) {
    return "cellHttpClientSetAuthenticationCacheStatus";
  } else if (fnid == 0x660d42a9) {
    return "cellHttpClientSetAuthenticationCallback";
  } else if (fnid == 0x8eaf47a3) {
    return "cellHttpClientSetAutoAuthentication";
  } else if (fnid == 0x211d8ba3) {
    return "cellHttpClientSetAutoRedirect";
  } else if (fnid == 0xd7471088) {
    return "cellHttpClientSetConnTimeout";
  } else if (fnid == 0x13fe767b) {
    return "cellHttpClientSetCookieRecvCallback";
  } else if (fnid == 0x4d915204) {
    return "cellHttpClientSetCookieSendCallback";
  } else if (fnid == 0x434419c8) {
    return "cellHttpClientSetCookieStatus";
  } else if (fnid == 0xa34c4b6f) {
    return "cellHttpClientSetHeader";
  } else if (fnid == 0x5d473170) {
    return "cellHttpClientSetKeepAlive";
  } else if (fnid == 0x595adee9) {
    return "cellHttpClientSetPerHostKeepAliveMax";
  } else if (fnid == 0xab1c55ab) {
    return "cellHttpClientSetPerHostPoolSize";
  } else if (fnid == 0xdc7ed599) {
    return "cellHttpClientSetPerPipelineMax";
  } else if (fnid == 0x296a46cf) {
    return "cellHttpClientSetPipeline";
  } else if (fnid == 0xd7d3cd5d) {
    return "cellHttpClientSetProxy";
  } else if (fnid == 0xbf6e3659) {
    return "cellHttpClientSetRecvBufferSize";
  } else if (fnid == 0x224e1610) {
    return "cellHttpClientSetRecvTimeout";
  } else if (fnid == 0x473cd9f1) {
    return "cellHttpClientSetRedirectCallback";
  } else if (fnid == 0xadd66b5c) {
    return "cellHttpClientSetResponseBufferMax";
  } else if (fnid == 0x71714cdc) {
    return "cellHttpClientSetSendTimeout";
  } else if (fnid == 0x1395d8d1) {
    return "cellHttpClientSetSslCallback";
  } else if (fnid == 0xd8352a40) {
    return "cellHttpClientSetSslClientCertificate";
  } else if (fnid == 0x7313c78d) {
    return "cellHttpClientSetSslIdDestroyCallback";
  } else if (fnid == 0x65691795) {
    return "cellHttpClientSetSslVersion";
  } else if (fnid == 0x8aa5fcd3) {
    return "cellHttpClientSetTotalPoolSize";
  } else if (fnid == 0xb6feb84b) {
    return "cellHttpClientSetTransactionStateCallback";
  } else if (fnid == 0xcac9fc34) {
    return "cellHttpClientSetUserAgent";
  } else if (fnid == 0x40547d8b) {
    return "cellHttpClientSetVersion";
  } else if (fnid == 0xf972c733) {
    return "cellHttpCookieExportWithClientId";
  } else if (fnid == 0x0d846d63) {
    return "cellHttpCookieImportWithClientId";
  } else if (fnid == 0x4e4ee53a) {
    return "cellHttpCreateClient";
  } else if (fnid == 0x052a80d9) {
    return "cellHttpCreateTransaction";
  } else if (fnid == 0x980855ac) {
    return "cellHttpDestroyClient";
  } else if (fnid == 0x32f5cae2) {
    return "cellHttpDestroyTransaction";
  } else if (fnid == 0xd276ff1f) {
    return "cellHttpEnd";
  } else if (fnid == 0x61b2bade) {
    return "cellHttpEndCookie";
  } else if (fnid == 0x2a87603a) {
    return "cellHttpGetProxy";
  } else if (fnid == 0x250c386c) {
    return "cellHttpInit";
  } else if (fnid == 0x9638f766) {
    return "cellHttpInitCookie";
  } else if (fnid == 0x61c90691) {
    return "cellHttpRecvResponse";
  } else if (fnid == 0xed993147) {
    return "cellHttpRequestAddHeader";
  } else if (fnid == 0x16214411) {
    return "cellHttpRequestDeleteHeader";
  } else if (fnid == 0x42205fe0) {
    return "cellHttpRequestGetAllHeaders";
  } else if (fnid == 0x4137a1f6) {
    return "cellHttpRequestGetChunkedTransferStatus";
  } else if (fnid == 0x958323cf) {
    return "cellHttpRequestGetContentLength";
  } else if (fnid == 0x0b9fea5f) {
    return "cellHttpRequestGetHeader";
  } else if (fnid == 0x8e3f7ee1) {
    return "cellHttpRequestSetChunkedTransferStatus";
  } else if (fnid == 0xaf73a64e) {
    return "cellHttpRequestSetContentLength";
  } else if (fnid == 0x54f2a4de) {
    return "cellHttpRequestSetHeader";
  } else if (fnid == 0xbea17389) {
    return "cellHttpResponseGetAllHeaders";
  } else if (fnid == 0x464ff889) {
    return "cellHttpResponseGetContentLength";
  } else if (fnid == 0x4f5d8d20) {
    return "cellHttpResponseGetHeader";
  } else if (fnid == 0x10d0d7fc) {
    return "cellHttpResponseGetStatusCode";
  } else if (fnid == 0x6a81b5e4) {
    return "cellHttpResponseGetStatusLine";
  } else if (fnid == 0xe6d4202f) {
    return "cellHttpsEnd";
  } else if (fnid == 0xa755b005) {
    return "cellHttpSendRequest";
  } else if (fnid == 0xad6a2e5b) {
    return "cellHttpSessionCookieFlush";
  } else if (fnid == 0x0d896b97) {
    return "cellHttpSetProxy";
  } else if (fnid == 0x522180bc) {
    return "cellHttpsInit";
  } else if (fnid == 0x2d52848b) {
    return "cellHttpTransactionAbortConnection";
  } else if (fnid == 0xa0d9223c) {
    return "cellHttpTransactionCloseConnection";
  } else if (fnid == 0x38954133) {
    return "cellHttpTransactionGetSslCipherBits";
  } else if (fnid == 0x34061e49) {
    return "cellHttpTransactionGetSslCipherId";
  } else if (fnid == 0x895c604c) {
    return "cellHttpTransactionGetSslCipherName";
  } else if (fnid == 0xe3c424b3) {
    return "cellHttpTransactionGetSslCipherString";
  } else if (fnid == 0x93e938e5) {
    return "cellHttpTransactionGetSslCipherVersion";
  } else if (fnid == 0x2a78ff04) {
    return "cellHttpTransactionGetSslId";
  } else if (fnid == 0xad1c6f02) {
    return "cellHttpTransactionGetSslVersion";
  } else if (fnid == 0x0ef17399) {
    return "cellHttpTransactionGetUri";
  } else if (fnid == 0xd47cc666) {
    return "cellHttpTransactionReleaseConnection";
  } else if (fnid == 0x37bb53a2) {
    return "cellHttpUtilAppendHeaderValue";
  } else if (fnid == 0x8e52ee08) {
    return "cellHttpUtilBase64Decoder";
  } else if (fnid == 0x83faa354) {
    return "cellHttpUtilBase64Encoder";
  } else if (fnid == 0x04accebf) {
    return "cellHttpUtilBuildHeader";
  } else if (fnid == 0x1c6e4dbb) {
    return "cellHttpUtilBuildRequestLine";
  } else if (fnid == 0x6f0f7667) {
    return "cellHttpUtilBuildUri";
  } else if (fnid == 0x97f9fbe5) {
    return "cellHttpUtilCopyHeader";
  } else if (fnid == 0x50ea75bc) {
    return "cellHttpUtilCopyStatusLine";
  } else if (fnid == 0xf05df789) {
    return "cellHttpUtilCopyUri";
  } else if (fnid == 0x9003b1f2) {
    return "cellHttpUtilEscapeUri";
  } else if (fnid == 0x8e6c5bb9) {
    return "cellHttpUtilFormUrlDecode";
  } else if (fnid == 0x44d756d6) {
    return "cellHttpUtilFormUrlEncode";
  } else if (fnid == 0x8ea23deb) {
    return "cellHttpUtilMergeUriPath";
  } else if (fnid == 0xe1fb0ebd) {
    return "cellHttpUtilParseHeader";
  } else if (fnid == 0xa3457869) {
    return "cellHttpUtilParseProxy";
  } else if (fnid == 0x2bcbced4) {
    return "cellHttpUtilParseStatusLine";
  } else if (fnid == 0x32faaf58) {
    return "cellHttpUtilParseUri";
  } else if (fnid == 0x8bb608e4) {
    return "cellHttpUtilParseUriPath";
  } else if (fnid == 0xaabeb869) {
    return "cellHttpUtilSweepPath";
  } else if (fnid == 0x2763fd66) {
    return "cellHttpUtilUnescapeUri";
  } else if (fnid == 0x7189430b) {
    return "cellImeJpAllConfirm";
  } else if (fnid == 0xcbbc20b7) {
    return "cellImeJpAllConvertCancel";
  } else if (fnid == 0x6319eda3) {
    return "cellImeJpAllDeleteConvertString";
  } else if (fnid == 0xaa1d1f57) {
    return "cellImeJpBackspaceWord";
  } else if (fnid == 0x46d1234a) {
    return "cellImeJpClose";
  } else if (fnid == 0xeede898c) {
    return "cellImeJpConfirmPrediction";
  } else if (fnid == 0xc2bb48bc) {
    return "cellImeJpConvertBackward";
  } else if (fnid == 0xeae879dc) {
    return "cellImeJpConvertCancel";
  } else if (fnid == 0x1e29103b) {
    return "cellImeJpConvertForward";
  } else if (fnid == 0x7a18c2b9) {
    return "cellImeJpCurrentPartConfirm";
  } else if (fnid == 0x72257652) {
    return "cellImeJpDeleteWord";
  } else if (fnid == 0x6ccbe3d6) {
    return "cellImeJpEnterChar";
  } else if (fnid == 0x5b6ada55) {
    return "cellImeJpEnterCharExt";
  } else if (fnid == 0x441a1c2b) {
    return "cellImeJpEnterString";
  } else if (fnid == 0x6298b55a) {
    return "cellImeJpEnterStringExt";
  } else if (fnid == 0x37961cc1) {
    return "cellImeJpExtendConvertArea";
  } else if (fnid == 0xe4cc15ba) {
    return "cellImeJpGetCandidateList";
  } else if (fnid == 0xc4796a45) {
    return "cellImeJpGetCandidateListSize";
  } else if (fnid == 0x177bd218) {
    return "cellImeJpGetCandidateSelect";
  } else if (fnid == 0xd3fc3606) {
    return "cellImeJpGetConfirmString";
  } else if (fnid == 0x89f8a567) {
    return "cellImeJpGetConfirmYomiString";
  } else if (fnid == 0xf91abda3) {
    return "cellImeJpGetConvertString";
  } else if (fnid == 0xea2d4881) {
    return "cellImeJpGetConvertYomiString";
  } else if (fnid == 0x5f5b3227) {
    return "cellImeJpGetFocusLength";
  } else if (fnid == 0x0e363ae7) {
    return "cellImeJpGetFocusTop";
  } else if (fnid == 0x1986f2cd) {
    return "cellImeJpGetPredictList";
  } else if (fnid == 0x66c6cc78) {
    return "cellImeJpGetStatus";
  } else if (fnid == 0xe76c9700) {
    return "cellImeJpModeCaretLeft";
  } else if (fnid == 0xac6693d8) {
    return "cellImeJpModeCaretRight";
  } else if (fnid == 0x1e411261) {
    return "cellImeJpMoveFocusClause";
  } else if (fnid == 0x44608862) {
    return "cellImeJpOpen";
  } else if (fnid == 0x47b43dd4) {
    return "cellImeJpOpen2";
  } else if (fnid == 0x1b119958) {
    return "cellImeJpOpen3";
  } else if (fnid == 0x8bb41f47) {
    return "cellImeJpPostConvert";
  } else if (fnid == 0x36d38701) {
    return "cellImeJpReset";
  } else if (fnid == 0xc1786c81) {
    return "cellImeJpSetFixInputMode";
  } else if (fnid == 0xf5992ec8) {
    return "cellImeJpSetInputCharType";
  } else if (fnid == 0x24e9d8fc) {
    return "cellImeJpSetKanaInputMode";
  } else if (fnid == 0xaa2a3287) {
    return "cellImeJpShortenConvertArea";
  } else if (fnid == 0xbd679cc1) {
    return "cellImeJpTemporalConfirm";
  } else if (fnid == 0x9338a07a) {
    return "cellJpgDecClose";
  } else if (fnid == 0xa7978f59) {
    return "cellJpgDecCreate";
  } else if (fnid == 0xaf8bb012) {
    return "cellJpgDecDecodeData";
  } else if (fnid == 0xd8ea91f8) {
    return "cellJpgDecDestroy";
  } else if (fnid == 0x8b300f66) {
    return "cellJpgDecExtCreate";
  } else if (fnid == 0x716f8792) {
    return "cellJpgDecExtDecodeData";
  } else if (fnid == 0xa9f703e3) {
    return "cellJpgDecExtOpen";
  } else if (fnid == 0xb91eb3d2) {
    return "cellJpgDecExtReadHeader";
  } else if (fnid == 0x65cbbb16) {
    return "cellJpgDecExtSetParameter";
  } else if (fnid == 0x976ca5c2) {
    return "cellJpgDecOpen";
  } else if (fnid == 0x6d9ebccf) {
    return "cellJpgDecReadHeader";
  } else if (fnid == 0xe08f3910) {
    return "cellJpgDecSetParameter";
  } else if (fnid == 0x969fc5f7) {
    return "cellJpgEncClose";
  } else if (fnid == 0xa9e81214) {
    return "cellJpgEncEncodePicture";
  } else if (fnid == 0x636dc89e) {
    return "cellJpgEncEncodePicture2";
  } else if (fnid == 0x4262e880) {
    return "cellJpgEncGetStreamInfo";
  } else if (fnid == 0xa4bfae51) {
    return "cellJpgEncOpen";
  } else if (fnid == 0x6f2d371c) {
    return "cellJpgEncOpenEx";
  } else if (fnid == 0x12d9b6c5) {
    return "cellJpgEncQueryAttr";
  } else if (fnid == 0x0cf2b78b) {
    return "cellJpgEncReset";
  } else if (fnid == 0x2ae79be8) {
    return "cellJpgEncWaitForInput";
  } else if (fnid == 0x9b4e3a74) {
    return "cellJpgEncWaitForOutput";
  } else if (fnid == 0x14bf2dc1) {
    return "cellKey2CharClose";
  } else if (fnid == 0x56776c0d) {
    return "cellKey2CharGetChar";
  } else if (fnid == 0xabf629c1) {
    return "cellKey2CharOpen";
  } else if (fnid == 0x0dfbadfa) {
    return "cellKey2CharSetArrangement";
  } else if (fnid == 0xbfc03768) {
    return "cellKey2CharSetMode";
  } else if (fnid == 0xeb41cc68) {
    return "ARIBstoUCS2s";
  } else if (fnid == 0x32689828) {
    return "ARIBstoUTF8s";
  } else if (fnid == 0xfa4a675a) {
    return "BIG5stoUCS2s";
  } else if (fnid == 0xd990858b) {
    return "BIG5stoUTF8s";
  } else if (fnid == 0x9ec52258) {
    return "BIG5toUCS2";
  } else if (fnid == 0x4b3bbacb) {
    return "BIG5toUTF8";
  } else if (fnid == 0x9cd8135b) {
    return "EUCCNstoUCS2s";
  } else if (fnid == 0x1ae2acee) {
    return "EUCCNstoUTF8s";
  } else if (fnid == 0xd9fb1224) {
    return "EUCCNtoUCS2";
  } else if (fnid == 0x8171c1cc) {
    return "EUCCNtoUTF8";
  } else if (fnid == 0x21948c03) {
    return "eucjp2jis";
  } else if (fnid == 0xe2eabb32) {
    return "eucjp2kuten";
  } else if (fnid == 0x3df65b64) {
    return "eucjp2sjis";
  } else if (fnid == 0xa60ff5c9) {
    return "EucJpHan2Zen";
  } else if (fnid == 0x1da42d70) {
    return "eucjphan2zen";
  } else if (fnid == 0xa34fa0eb) {
    return "EUCJPstoJISs";
  } else if (fnid == 0x511d386b) {
    return "EUCJPstoSJISs";
  } else if (fnid == 0x90e9b5d2) {
    return "EUCJPstoUCS2s";
  } else if (fnid == 0x5ac783dc) {
    return "EUCJPstoUTF8s";
  } else if (fnid == 0x53c71ac2) {
    return "EUCJPtoSJIS";
  } else if (fnid == 0x54f59807) {
    return "EUCJPtoUCS2";
  } else if (fnid == 0x3dabd5a7) {
    return "EUCJPtoUTF8";
  } else if (fnid == 0xbe42e661) {
    return "eucjpzen2han";
  } else if (fnid == 0x82d5ecdf) {
    return "EucJpZen2Han";
  } else if (fnid == 0x14f504b8) {
    return "EUCKRstoUCS2s";
  } else if (fnid == 0x8a56f148) {
    return "EUCKRstoUHCs";
  } else if (fnid == 0x2b84030c) {
    return "EUCKRstoUTF8s";
  } else if (fnid == 0x9a72059d) {
    return "EUCKRtoUCS2";
  } else if (fnid == 0x58246762) {
    return "EUCKRtoUHC";
  } else if (fnid == 0x63219199) {
    return "EUCKRtoUTF8";
  } else if (fnid == 0x60ffa0ec) {
    return "GB18030stoUCS2s";
  } else if (fnid == 0xd02ef83d) {
    return "GB18030stoUTF8s";
  } else if (fnid == 0xaf18d499) {
    return "GB18030toUCS2";
  } else if (fnid == 0xeabc3d00) {
    return "GB18030toUTF8";
  } else if (fnid == 0x1cb1138f) {
    return "GBKstoUCS2s";
  } else if (fnid == 0x949bb14c) {
    return "GBKstoUTF8s";
  } else if (fnid == 0x1fb50183) {
    return "GBKtoUCS2";
  } else if (fnid == 0x860fc741) {
    return "GBKtoUTF8";
  } else if (fnid == 0x0bf867e2) {
    return "HZstoUCS2s";
  } else if (fnid == 0x42838145) {
    return "HZstoUTF8s";
  } else if (fnid == 0xa963619c) {
    return "isEucJpKigou";
  } else if (fnid == 0xbefe3869) {
    return "isSjisKigou";
  } else if (fnid == 0x9dcde367) {
    return "jis2eucjp";
  } else if (fnid == 0x05028763) {
    return "jis2kuten";
  } else if (fnid == 0x1758053c) {
    return "jis2sjis";
  } else if (fnid == 0xa609f3e9) {
    return "JISstoEUCJPs";
  } else if (fnid == 0x6169f205) {
    return "JISstoSJISs";
  } else if (fnid == 0xe956dc64) {
    return "JISstoUCS2s";
  } else if (fnid == 0x060ee3b2) {
    return "JISstoUTF8s";
  } else if (fnid == 0x750c363d) {
    return "jstrchk";
  } else if (fnid == 0x1906ce6b) {
    return "jstrnchk";
  } else if (fnid == 0x0f624540) {
    return "kuten2eucjp";
  } else if (fnid == 0x7c912bda) {
    return "kuten2jis";
  } else if (fnid == 0xb7e08f7a) {
    return "kuten2sjis";
  } else if (fnid == 0x01b0cbf4) {
    return "l10n_convert";
  } else if (fnid == 0xa298cad2) {
    return "l10n_convert_str";
  } else if (fnid == 0xcc1633cc) {
    return "l10n_get_converter";
  } else if (fnid == 0x1ac0d23d) {
    return "L10nConvert";
  } else if (fnid == 0x931ff25a) {
    return "L10nConvertStr";
  } else if (fnid == 0xc9b78f58) {
    return "MSJISstoUCS2s";
  } else if (fnid == 0x5a4ab223) {
    return "MSJISstoUTF8s";
  } else if (fnid == 0xb6e45343) {
    return "MSJIStoUCS2";
  } else if (fnid == 0x398a3dee) {
    return "MSJIStoUTF8";
  } else if (fnid == 0x9ce52809) {
    return "SBCSstoUCS2s";
  } else if (fnid == 0x72632e53) {
    return "SBCSstoUTF8s";
  } else if (fnid == 0xc944fa56) {
    return "SBCStoUCS2";
  } else if (fnid == 0x74496718) {
    return "SBCStoUTF8";
  } else if (fnid == 0x9874020d) {
    return "sjis2eucjp";
  } else if (fnid == 0x14ee3649) {
    return "sjis2jis";
  } else if (fnid == 0x6621a82c) {
    return "sjis2kuten";
  } else if (fnid == 0x638c2fc1) {
    return "SjisHan2Zen";
  } else if (fnid == 0x24fd32a9) {
    return "sjishan2zen";
  } else if (fnid == 0xd8721e2c) {
    return "SJISstoEUCJPs";
  } else if (fnid == 0x73f2cd21) {
    return "SJISstoJISs";
  } else if (fnid == 0xf9b1896d) {
    return "SJISstoUCS2s";
  } else if (fnid == 0x33435818) {
    return "SJISstoUTF8s";
  } else if (fnid == 0xf439728e) {
    return "SJIStoEUCJP";
  } else if (fnid == 0xbdd44ee3) {
    return "SJIStoUCS2";
  } else if (fnid == 0x6122e000) {
    return "SJIStoUTF8";
  } else if (fnid == 0x33f8b35c) {
    return "sjiszen2han";
  } else if (fnid == 0x07168a83) {
    return "SjisZen2Han";
  } else if (fnid == 0x408a622b) {
    return "ToEucJpHira";
  } else if (fnid == 0x41ccf033) {
    return "ToEucJpKata";
  } else if (fnid == 0x3968f176) {
    return "ToEucJpLower";
  } else if (fnid == 0x867f7b8b) {
    return "ToEucJpUpper";
  } else if (fnid == 0x1ec712e0) {
    return "ToSjisHira";
  } else if (fnid == 0x9d14dc46) {
    return "ToSjisKata";
  } else if (fnid == 0x0bc386c8) {
    return "ToSjisLower";
  } else if (fnid == 0x6de4b508) {
    return "ToSjisUpper";
  } else if (fnid == 0xbe8d5485) {
    return "UCS2stoARIBs";
  } else if (fnid == 0xee6c6a39) {
    return "UCS2stoBIG5s";
  } else if (fnid == 0x71804d64) {
    return "UCS2stoEUCCNs";
  } else if (fnid == 0x6e5906fd) {
    return "UCS2stoEUCJPs";
  } else if (fnid == 0xdc54886c) {
    return "UCS2stoEUCKRs";
  } else if (fnid == 0x53764725) {
    return "UCS2stoGB18030s";
  } else if (fnid == 0x55f6921c) {
    return "UCS2stoGBKs";
  } else if (fnid == 0x0ce278fd) {
    return "UCS2stoHZs";
  } else if (fnid == 0x88f8340b) {
    return "UCS2stoJISs";
  } else if (fnid == 0x3a20bc34) {
    return "UCS2stoMSJISs";
  } else if (fnid == 0xebae29c0) {
    return "UCS2stoSBCSs";
  } else if (fnid == 0x0d90a48d) {
    return "UCS2stoSJISs";
  } else if (fnid == 0xf1dcfa71) {
    return "UCS2stoUHCs";
  } else if (fnid == 0x714a9b4a) {
    return "UCS2stoUTF16s";
  } else if (fnid == 0xeb685b83) {
    return "UCS2stoUTF32s";
  } else if (fnid == 0x2ad091c6) {
    return "UCS2stoUTF8s";
  } else if (fnid == 0x5b684dfb) {
    return "UCS2toBIG5";
  } else if (fnid == 0x9a0e7d23) {
    return "UCS2toEUCCN";
  } else if (fnid == 0x005200e6) {
    return "UCS2toEUCJP";
  } else if (fnid == 0xc7bdcb4c) {
    return "UCS2toEUCKR";
  } else if (fnid == 0x0bedf77d) {
    return "UCS2toGB18030";
  } else if (fnid == 0xa0d463c0) {
    return "UCS2toGBK";
  } else if (fnid == 0x65444204) {
    return "UCS2toMSJIS";
  } else if (fnid == 0x256b6861) {
    return "UCS2toSBCS";
  } else if (fnid == 0x596df41c) {
    return "UCS2toSJIS";
  } else if (fnid == 0x6a6f25d1) {
    return "UCS2toUHC";
  } else if (fnid == 0x64a10ec8) {
    return "UCS2toUTF16";
  } else if (fnid == 0x0356038c) {
    return "UCS2toUTF32";
  } else if (fnid == 0xa9a76fb8) {
    return "UCS2toUTF8";
  } else if (fnid == 0x16eaf5f1) {
    return "UHCstoEUCKRs";
  } else if (fnid == 0x41b4a5ae) {
    return "UHCstoUCS2s";
  } else if (fnid == 0x5e1d9330) {
    return "UHCstoUTF8s";
  } else if (fnid == 0x7c5bde1c) {
    return "UHCtoEUCKR";
  } else if (fnid == 0x91a99765) {
    return "UHCtoUCS2";
  } else if (fnid == 0xb3361be6) {
    return "UHCtoUTF8";
  } else if (fnid == 0x53558b6b) {
    return "UTF16stoUCS2s";
  } else if (fnid == 0x2efa7294) {
    return "UTF16stoUTF32s";
  } else if (fnid == 0xe6f5711b) {
    return "UTF16stoUTF8s";
  } else if (fnid == 0x6fc530b3) {
    return "UTF16toUCS2";
  } else if (fnid == 0xa19fb9de) {
    return "UTF16toUTF32";
  } else if (fnid == 0x317ab7c2) {
    return "UTF16toUTF8";
  } else if (fnid == 0xd8cb24cb) {
    return "UTF32stoUCS2s";
  } else if (fnid == 0x8555fe15) {
    return "UTF32stoUTF16s";
  } else if (fnid == 0x21aa3045) {
    return "UTF32stoUTF8s";
  } else if (fnid == 0x6c62d879) {
    return "UTF32toUCS2";
  } else if (fnid == 0x9b1210c6) {
    return "UTF32toUTF16";
  } else if (fnid == 0x9768b6d3) {
    return "UTF32toUTF8";
  } else if (fnid == 0xa5146299) {
    return "UTF8stoARIBs";
  } else if (fnid == 0x52b7883f) {
    return "UTF8stoBIG5s";
  } else if (fnid == 0x8f472054) {
    return "UTF8stoEUCCNs";
  } else if (fnid == 0xc62b758d) {
    return "UTF8stoEUCJPs";
  } else if (fnid == 0x5cd29270) {
    return "UTF8stoEUCKRs";
  } else if (fnid == 0x89236c86) {
    return "UTF8stoGB18030s";
  } else if (fnid == 0x262a5ae2) {
    return "UTF8stoGBKs";
  } else if (fnid == 0xdefa1c17) {
    return "UTF8stoHZs";
  } else if (fnid == 0x9cf1ab77) {
    return "UTF8stoJISs";
  } else if (fnid == 0x62b36bcf) {
    return "UTF8stoMSJISs";
  } else if (fnid == 0xda67b37f) {
    return "UTF8stoSBCSs";
  } else if (fnid == 0xdd5ebdeb) {
    return "UTF8stoSJISs";
  } else if (fnid == 0xfdbf6ac5) {
    return "UTF8stoUCS2s";
  } else if (fnid == 0x9a13d6b8) {
    return "UTF8stoUHCs";
  } else if (fnid == 0xf7681b9a) {
    return "UTF8stoUTF16s";
  } else if (fnid == 0x8ccdba38) {
    return "UTF8stoUTF32s";
  } else if (fnid == 0xe6d9e234) {
    return "UTF8toBIG5";
  } else if (fnid == 0x7d07a1c2) {
    return "UTF8toEUCCN";
  } else if (fnid == 0x6e0705c4) {
    return "UTF8toEUCJP";
  } else if (fnid == 0x2f9eb543) {
    return "UTF8toEUCKR";
  } else if (fnid == 0x058addc8) {
    return "UTF8toGB18030";
  } else if (fnid == 0xb7cef4a6) {
    return "UTF8toGBK";
  } else if (fnid == 0x4931b44e) {
    return "UTF8toMSJIS";
  } else if (fnid == 0xb9cf473d) {
    return "UTF8toSBCS";
  } else if (fnid == 0xeb3dc670) {
    return "UTF8toSJIS";
  } else if (fnid == 0x28724522) {
    return "UTF8toUCS2";
  } else if (fnid == 0x9557ac9b) {
    return "UTF8toUHC";
  } else if (fnid == 0x61fb9442) {
    return "UTF8toUTF16";
  } else if (fnid == 0x74871fe0) {
    return "UTF8toUTF32";
  } else if (fnid == 0x0252efcc) {
    return "cellUserTraceInit";
  } else if (fnid == 0x05893e7c) {
    return "cellUserTraceRegister";
  } else if (fnid == 0x898c77bf) {
    return "cellUserTraceTerminate";
  } else if (fnid == 0x6d045c2e) {
    return "cellUserTraceUnregister";
  } else if (fnid == 0x8d229f8e) {
    return "cellMicClose";
  } else if (fnid == 0xc461563c) {
    return "cellMicCommand";
  } else if (fnid == 0xc6328caa) {
    return "cellMicEnd";
  } else if (fnid == 0x6a024aa0) {
    return "cellMicGetDeviceAttr";
  } else if (fnid == 0x017024a8) {
    return "cellMicGetDeviceGUID";
  } else if (fnid == 0xfdbbe469) {
    return "cellMicGetDeviceIdentifier";
  } else if (fnid == 0x48108a23) {
    return "cellMicGetFormat";
  } else if (fnid == 0xfda12276) {
    return "cellMicGetFormatAux";
  } else if (fnid == 0x87a08d29) {
    return "cellMicGetFormatDsp";
  } else if (fnid == 0xad049ecf) {
    return "cellMicGetFormatEx";
  } else if (fnid == 0x4e0b69ee) {
    return "cellMicGetFormatRaw";
  } else if (fnid == 0xac5ba03a) {
    return "cellMicGetSignalAttr";
  } else if (fnid == 0xb30780eb) {
    return "cellMicGetSignalState";
  } else if (fnid == 0x25c5723f) {
    return "cellMicGetStatus";
  } else if (fnid == 0xa52d2ae4) {
    return "cellMicGetType";
  } else if (fnid == 0x8325e02d) {
    return "cellMicInit";
  } else if (fnid == 0x1b42101b) {
    return "cellMicIsAttached";
  } else if (fnid == 0x186cb1fb) {
    return "cellMicIsOpen";
  } else if (fnid == 0xdd1b59f0) {
    return "cellMicOpen";
  } else if (fnid == 0x05709bbf) {
    return "cellMicOpenEx";
  } else if (fnid == 0xa42ac07a) {
    return "cellMicOpenRaw";
  } else if (fnid == 0x07e1b12c) {
    return "cellMicRead";
  } else if (fnid == 0x3acc118e) {
    return "cellMicReadAux";
  } else if (fnid == 0xc414faa5) {
    return "cellMicReadDsp";
  } else if (fnid == 0x72165a7f) {
    return "cellMicReadRaw";
  } else if (fnid == 0x65336418) {
    return "cellMicRemoveNotifyEventQueue";
  } else if (fnid == 0x6bc46aab) {
    return "cellMicReset";
  } else if (fnid == 0xb2c16321) {
    return "cellMicSetDeviceAttr";
  } else if (fnid == 0x891c6291) {
    return "cellMicSetMultiMicNotifyEventQueue";
  } else if (fnid == 0x7903400e) {
    return "cellMicSetNotifyEventQueue";
  } else if (fnid == 0x6cc7ae00) {
    return "cellMicSetNotifyEventQueue2";
  } else if (fnid == 0x323deb41) {
    return "cellMicSetSignalAttr";
  } else if (fnid == 0xdd724314) {
    return "cellMicStart";
  } else if (fnid == 0xddd19a89) {
    return "cellMicStartEx";
  } else if (fnid == 0xfcfaf246) {
    return "cellMicStop";
  } else if (fnid == 0xe839380f) {
    return "cellMicStopEx";
  } else if (fnid == 0x3ace58f3) {
    return "cellMicSysShareClose";
  } else if (fnid == 0xf82bbf7c) {
    return "cellMicSysShareEnd";
  } else if (fnid == 0xd127cd3e) {
    return "cellMicSysShareInit";
  } else if (fnid == 0xc3610dbd) {
    return "cellMicSysShareOpen";
  } else if (fnid == 0xcac7e7d7) {
    return "cellMicSysShareStart";
  } else if (fnid == 0xbdfd51e2) {
    return "cellMicSysShareStop";
  } else if (fnid == 0xa8615dc8) {
    return "cellMusicDecodeFinalize";
  } else if (fnid == 0x4aef2877) {
    return "cellMusicDecodeFinalize2";
  } else if (fnid == 0x58ab1999) {
    return "cellMusicDecodeGetContentsId";
  } else if (fnid == 0x25ea7ac0) {
    return "cellMusicDecodeGetContentsId2";
  } else if (fnid == 0x5af74c50) {
    return "cellMusicDecodeGetDecodeStatus";
  } else if (fnid == 0x1576e4f2) {
    return "cellMusicDecodeGetDecodeStatus2";
  } else if (fnid == 0xdbf70550) {
    return "cellMusicDecodeGetSelectionContext";
  } else if (fnid == 0xf91639f9) {
    return "cellMusicDecodeGetSelectionContext2";
  } else if (fnid == 0xd55dbc11) {
    return "cellMusicDecodeInitialize";
  } else if (fnid == 0xf80e31e5) {
    return "cellMusicDecodeInitialize2";
  } else if (fnid == 0xb641168e) {
    return "cellMusicDecodeInitialize2SystemWorkload";
  } else if (fnid == 0x84f154b2) {
    return "cellMusicDecodeInitializeSystemWorkload";
  } else if (fnid == 0xa881b744) {
    return "cellMusicDecodeRead";
  } else if (fnid == 0xb2d054df) {
    return "cellMusicDecodeRead2";
  } else if (fnid == 0xf24cb963) {
    return "cellMusicDecodeSelectContents";
  } else if (fnid == 0xc22563c4) {
    return "cellMusicDecodeSelectContents2";
  } else if (fnid == 0x066bb1cf) {
    return "cellMusicDecodeSetDecodeCommand";
  } else if (fnid == 0x2ef701ec) {
    return "cellMusicDecodeSetDecodeCommand2";
  } else if (fnid == 0xb84f5c81) {
    return "cellMusicDecodeSetSelectionContext";
  } else if (fnid == 0x491d6ba5) {
    return "cellMusicDecodeSetSelectionContext2";
  } else if (fnid == 0xe90effea) {
    return "cellMusicExportFinalize";
  } else if (fnid == 0xb202f0e8) {
    return "cellMusicExportFromFile";
  } else if (fnid == 0xb4c9b4f9) {
    return "cellMusicExportInitialize";
  } else if (fnid == 0xe0443a44) {
    return "cellMusicExportInitialize2";
  } else if (fnid == 0x92b50ebc) {
    return "cellMusicExportProgress";
  } else if (fnid == 0x6f2104f3) {
    return "cellMusicFinalize";
  } else if (fnid == 0x7be4dc31) {
    return "cellMusicFinalize2";
  } else if (fnid == 0x4c188caa) {
    return "cellMusicGetContentsId";
  } else if (fnid == 0x6674de2d) {
    return "cellMusicGetContentsId2";
  } else if (fnid == 0x95f7d9d9) {
    return "cellMusicGetPlaybackStatus";
  } else if (fnid == 0x648b7611) {
    return "cellMusicGetPlaybackStatus2";
  } else if (fnid == 0x0b461648) {
    return "cellMusicGetSelectionContext";
  } else if (fnid == 0x8793ef97) {
    return "cellMusicGetSelectionContext2";
  } else if (fnid == 0x8aa188e3) {
    return "cellMusicGetVolume";
  } else if (fnid == 0xf9073a24) {
    return "cellMusicGetVolume2";
  } else if (fnid == 0x72ec14b5) {
    return "cellMusicInitialize";
  } else if (fnid == 0xbe50b11e) {
    return "cellMusicInitialize2";
  } else if (fnid == 0x61865281) {
    return "cellMusicInitialize2SystemWorkload";
  } else if (fnid == 0x72876546) {
    return "cellMusicInitializeSystemWorkload";
  } else if (fnid == 0xb2336ba7) {
    return "cellMusicSelectContents";
  } else if (fnid == 0xad04cddd) {
    return "cellMusicSelectContents2";
  } else if (fnid == 0xa0661626) {
    return "cellMusicSetPlaybackCommand";
  } else if (fnid == 0x98947a6e) {
    return "cellMusicSetPlaybackCommand2";
  } else if (fnid == 0x5bff31bf) {
    return "cellMusicSetSelectionContext";
  } else if (fnid == 0x2bdc5d6b) {
    return "cellMusicSetSelectionContext2";
  } else if (fnid == 0xe74ce7bd) {
    return "cellMusicSetVolume";
  } else if (fnid == 0x4014c246) {
    return "cellMusicSetVolume2";
  } else if (fnid == 0x3e359ab6) {
    return "cellGameUpdateCheckAbort";
  } else if (fnid == 0xffa3d791) {
    return "cellGameUpdateCheckFinishAsync";
  } else if (fnid == 0xf463981c) {
    return "cellGameUpdateCheckFinishAsyncEx";
  } else if (fnid == 0xd0a5d727) {
    return "cellGameUpdateCheckStartAsync";
  } else if (fnid == 0x0791015f) {
    return "cellGameUpdateCheckStartAsyncEx";
  } else if (fnid == 0xa5e1fa60) {
    return "cellGameUpdateCheckStartWithoutDialogAsync";
  } else if (fnid == 0x558700f6) {
    return "cellGameUpdateCheckStartWithoutDialogAsyncEx";
  } else if (fnid == 0x99ab1a26) {
    return "cellGameUpdateInit";
  } else if (fnid == 0x10dae56d) {
    return "cellGameUpdateTerm";
  } else if (fnid == 0x0ce13c6b) {
    return "cellNetCtlAddHandler";
  } else if (fnid == 0x901815c3) {
    return "cellNetCtlDelHandler";
  } else if (fnid == 0x1e585b5d) {
    return "cellNetCtlGetInfo";
  } else if (fnid == 0x3a12865f) {
    return "cellNetCtlGetNatInfo";
  } else if (fnid == 0x8b3eba69) {
    return "cellNetCtlGetState";
  } else if (fnid == 0xbd5a59fc) {
    return "cellNetCtlInit";
  } else if (fnid == 0x71d53210) {
    return "cellNetCtlNetStartDialogAbortAsync";
  } else if (fnid == 0x04459230) {
    return "cellNetCtlNetStartDialogLoadAsync";
  } else if (fnid == 0x0f1f13d3) {
    return "cellNetCtlNetStartDialogUnloadAsync";
  } else if (fnid == 0x105ee2cb) {
    return "cellNetCtlTerm";
  } else if (fnid == 0x23a2ede6) {
    return "cellOskDialogExtAddJapaneseOptionDictionary";
  } else if (fnid == 0x4fe14d09) {
    return "cellOskDialogExtAddOptionDictionary";
  } else if (fnid == 0xe6c43c58) {
    return "cellOskDialogExtEnableHalfByteKana";
  } else if (fnid == 0x7c95feb8) {
    return "cellOskDialogExtInputDeviceLock";
  } else if (fnid == 0x09565b21) {
    return "cellOskDialogExtInputDeviceUnlock";
  } else if (fnid == 0x8692fcd2) {
    return "cellOskDialogExtRegisterConfirmWordFilterCallback";
  } else if (fnid == 0xe800f586) {
    return "cellOskDialogExtRegisterForceFinishCallback";
  } else if (fnid == 0x1e1b4c97) {
    return "cellOskDialogExtRegisterKeyboardEventHookCallback";
  } else if (fnid == 0x42439db5) {
    return "cellOskDialogExtSendFinishMessage";
  } else if (fnid == 0x7eb292cd) {
    return "cellOskDialogExtSetBaseColor";
  } else if (fnid == 0x75370397) {
    return "cellOskDialogExtSetInitialScale";
  } else if (fnid == 0x8b60c469) {
    return "cellOskDialogExtUpdateInputText";
  } else if (fnid == 0xce6cb776) {
    return "cellOvisFixSpuSegments";
  } else if (fnid == 0x82f294b2) {
    return "cellOvisGetOverlayTableSize";
  } else if (fnid == 0xa876c911) {
    return "cellOvisInitializeOverlayTable";
  } else if (fnid == 0x629ba0c0) {
    return "cellOvisInvalidateOverlappedSegments";
  } else if (fnid == 0x1abeb9d6) {
    return "cellPamfEpIteratorGetEp";
  } else if (fnid == 0x50b83205) {
    return "cellPamfEpIteratorMove";
  } else if (fnid == 0xca8181c1) {
    return "cellPamfGetHeaderSize";
  } else if (fnid == 0x90fc9a59) {
    return "cellPamfGetHeaderSize2";
  } else if (fnid == 0x44f5c9e3) {
    return "cellPamfGetStreamOffsetAndSize";
  } else if (fnid == 0xe8586ec6) {
    return "cellPamfReaderGetEpIteratorWithIndex";
  } else if (fnid == 0x439fba17) {
    return "cellPamfReaderGetEpIteratorWithTimeStamp";
  } else if (fnid == 0x71df326a) {
    return "cellPamfReaderGetEsFilterId";
  } else if (fnid == 0xdb70296c) {
    return "cellPamfReaderGetMuxRateBound";
  } else if (fnid == 0xd9ea3457) {
    return "cellPamfReaderGetNumberOfEp";
  } else if (fnid == 0xd0230671) {
    return "cellPamfReaderGetNumberOfSpecificStreams";
  } else if (fnid == 0x37f723f7) {
    return "cellPamfReaderGetNumberOfStreams";
  } else if (fnid == 0xf61609d6) {
    return "cellPamfReaderGetPresentationEndTime";
  } else if (fnid == 0x4de501b1) {
    return "cellPamfReaderGetPresentationStartTime";
  } else if (fnid == 0x041cc708) {
    return "cellPamfReaderGetStreamIndex";
  } else if (fnid == 0x67fd273b) {
    return "cellPamfReaderGetStreamInfo";
  } else if (fnid == 0x9ab20793) {
    return "cellPamfReaderGetStreamTypeAndChannel";
  } else if (fnid == 0xb8436ee5) {
    return "cellPamfReaderInitialize";
  } else if (fnid == 0x461534b4) {
    return "cellPamfReaderSetStreamWithIndex";
  } else if (fnid == 0x03fd2caa) {
    return "cellPamfReaderSetStreamWithTypeAndChannel";
  } else if (fnid == 0x28b4e2c1) {
    return "cellPamfReaderSetStreamWithTypeAndIndex";
  } else if (fnid == 0x01067e22) {
    return "cellPamfStreamTypeToEsFilterId";
  } else if (fnid == 0xd1a40ef4) {
    return "cellPamfVerify";
  } else if (fnid == 0xad7d8f38) {
    return "cellPhotoDecodeFinalize";
  } else if (fnid == 0x28b22e44) {
    return "cellPhotoDecodeFromFile";
  } else if (fnid == 0x596f0a56) {
    return "cellPhotoDecodeInitialize";
  } else if (fnid == 0x0f424ecb) {
    return "cellPhotoDecodeInitialize2";
  } else if (fnid == 0x0783bce0) {
    return "cellPhotoImport";
  } else if (fnid == 0x1ab8df55) {
    return "cellPhotoImport2";
  } else if (fnid == 0xed4a0148) {
    return "cellPhotoExportFinalize";
  } else if (fnid == 0x09ce84ac) {
    return "cellPhotoExportFromFile";
  } else if (fnid == 0x4357c77f) {
    return "cellPhotoExportInitialize";
  } else if (fnid == 0x08cbd8e1) {
    return "cellPhotoExportInitialize2";
  } else if (fnid == 0xde509ead) {
    return "cellPhotoExportProgress";
  } else if (fnid == 0x3f7fc0af) {
    return "cellPhotoFinalize";
  } else if (fnid == 0x55c70783) {
    return "cellPhotoInitialize";
  } else if (fnid == 0x42a32983) {
    return "cellPhotoRegistFromFile";
  } else if (fnid == 0x5b3d1ff1) {
    return "cellPngDecClose";
  } else if (fnid == 0x157d30c5) {
    return "cellPngDecCreate";
  } else if (fnid == 0x2310f155) {
    return "cellPngDecDecodeData";
  } else if (fnid == 0x820dae1a) {
    return "cellPngDecDestroy";
  } else if (fnid == 0x48436b2d) {
    return "cellPngDecExtCreate";
  } else if (fnid == 0x726fc1d0) {
    return "cellPngDecExtDecodeData";
  } else if (fnid == 0x0c515302) {
    return "cellPngDecExtOpen";
  } else if (fnid == 0x8b33f863) {
    return "cellPngDecExtReadHeader";
  } else if (fnid == 0x9e9d7d42) {
    return "cellPngDecExtSetParameter";
  } else if (fnid == 0x7585a275) {
    return "cellPngDecGetbKGD";
  } else if (fnid == 0x7a062d26) {
    return "cellPngDecGetcHRM";
  } else if (fnid == 0xb153629c) {
    return "cellPngDecGetgAMA";
  } else if (fnid == 0xb905ebb7) {
    return "cellPngDecGethIST";
  } else if (fnid == 0xf44b6c30) {
    return "cellPngDecGetiCCP";
  } else if (fnid == 0x27c921b5) {
    return "cellPngDecGetoFFs";
  } else if (fnid == 0xb4fe75e1) {
    return "cellPngDecGetpCAL";
  } else if (fnid == 0x3d50016a) {
    return "cellPngDecGetpHYs";
  } else if (fnid == 0xe163977f) {
    return "cellPngDecGetPLTE";
  } else if (fnid == 0x30cb334a) {
    return "cellPngDecGetsBIT";
  } else if (fnid == 0xc41e1198) {
    return "cellPngDecGetsCAL";
  } else if (fnid == 0xa5cdf57e) {
    return "cellPngDecGetsPLT";
  } else if (fnid == 0xe4416e82) {
    return "cellPngDecGetsRGB";
  } else if (fnid == 0xb40ca175) {
    return "cellPngDecGetTextChunk";
  } else if (fnid == 0x35a6846c) {
    return "cellPngDecGettIME";
  } else if (fnid == 0xb96fb26e) {
    return "cellPngDecGettRNS";
  } else if (fnid == 0x609ec7d5) {
    return "cellPngDecGetUnknownChunks";
  } else if (fnid == 0xd2bc5bfd) {
    return "cellPngDecOpen";
  } else if (fnid == 0x9ccdcc95) {
    return "cellPngDecReadHeader";
  } else if (fnid == 0xe97c9bd4) {
    return "cellPngDecSetParameter";
  } else if (fnid == 0x117cd726) {
    return "cellPngEncClose";
  } else if (fnid == 0x5b546ca4) {
    return "cellPngEncEncodePicture";
  } else if (fnid == 0x585269bc) {
    return "cellPngEncGetStreamInfo";
  } else if (fnid == 0x19256dc5) {
    return "cellPngEncOpen";
  } else if (fnid == 0xc82558ce) {
    return "cellPngEncOpenEx";
  } else if (fnid == 0x496cfcd0) {
    return "cellPngEncQueryAttr";
  } else if (fnid == 0x6ac91de3) {
    return "cellPngEncReset";
  } else if (fnid == 0x662bd637) {
    return "cellPngEncWaitForInput";
  } else if (fnid == 0x90ef2963) {
    return "cellPngEncWaitForOutput";
  } else if (fnid == 0x293d9e9c) {
    return "cellPrintCancelJob";
  } else if (fnid == 0xc04a7d42) {
    return "cellPrintEndJob";
  } else if (fnid == 0x0d44f661) {
    return "cellPrintEndPage";
  } else if (fnid == 0x6e952645) {
    return "cellPrintGetPrintableArea";
  } else if (fnid == 0x6802dfb5) {
    return "cellPrintGetStatus";
  } else if (fnid == 0xc9c3ef14) {
    return "cellPrintLoadAsync";
  } else if (fnid == 0xf0865182) {
    return "cellPrintLoadAsync2";
  } else if (fnid == 0xf9a53f35) {
    return "cellPrintOpenConfig";
  } else if (fnid == 0x0a373522) {
    return "cellPrintSendBand";
  } else if (fnid == 0x795b12b3) {
    return "cellPrintStartJob";
  } else if (fnid == 0x865acf74) {
    return "cellPrintStartPage";
  } else if (fnid == 0xeb51aa38) {
    return "cellPrintUnloadAsync";
  } else if (fnid == 0xcf1aaefa) {
    return "cellSysutilPrintInit";
  } else if (fnid == 0x6d996018) {
    return "cellSysutilPrintShutdown";
  } else if (fnid == 0x4ac76585) {
    return "cellRecClose";
  } else if (fnid == 0x5a8a8b0f) {
    return "cellRecGetInfo";
  } else if (fnid == 0x39651e01) {
    return "cellRecOpen";
  } else if (fnid == 0xdbf22bd1) {
    return "cellRecQueryMemSize";
  } else if (fnid == 0xf0958f73) {
    return "cellRecSetInfo";
  } else if (fnid == 0x964cd1b8) {
    return "cellRecStart";
  } else if (fnid == 0x5b45439d) {
    return "cellRecStop";
  } else if (fnid == 0xfb793f27) {
    return "cellRemotePlayBreak";
  } else if (fnid == 0xd29fe5e3) {
    return "cellRemotePlayEncryptAllData";
  } else if (fnid == 0xe12c8c19) {
    return "cellRemotePlayGetComparativeVolume";
  } else if (fnid == 0xa445cd55) {
    return "cellRemotePlayGetPeerInfo";
  } else if (fnid == 0xc267987b) {
    return "cellRemotePlayGetSharedMemory";
  } else if (fnid == 0x533f41df) {
    return "cellRemotePlayGetStatus";
  } else if (fnid == 0x743918bd) {
    return "cellRemotePlaySetComparativeVolume";
  } else if (fnid == 0xd6f3fc82) {
    return "cellRemotePlayStopPeerVideoOut";
  } else if (fnid == 0x22ae06d8) {
    return "cellRescAdjustAspectRatio";
  } else if (fnid == 0xe0cef79e) {
    return "cellRescCreateInterlaceTable";
  } else if (fnid == 0x2ea3061e) {
    return "cellRescExit";
  } else if (fnid == 0x01220224) {
    return "cellRescGcmSurface2RescSrc";
  } else if (fnid == 0x5a338cdb) {
    return "cellRescGetBufferSize";
  } else if (fnid == 0xc47c5c22) {
    return "cellRescGetFlipStatus";
  } else if (fnid == 0x66f5e388) {
    return "cellRescGetLastFlipTime";
  } else if (fnid == 0x0a2069c7) {
    return "cellRescGetNumColorBuffers";
  } else if (fnid == 0x1dd3c4cd) {
    return "cellRescGetRegisterCount";
  } else if (fnid == 0x516ee89e) {
    return "cellRescInit";
  } else if (fnid == 0x129922a0) {
    return "cellRescResetFlipStatus";
  } else if (fnid == 0x8107277c) {
    return "cellRescSetBufferAddress";
  } else if (fnid == 0x25c107e6) {
    return "cellRescSetConvertAndFlip";
  } else if (fnid == 0x23134710) {
    return "cellRescSetDisplayMode";
  } else if (fnid == 0x10db5b1a) {
    return "cellRescSetDsts";
  } else if (fnid == 0x2ea94661) {
    return "cellRescSetFlipHandler";
  } else if (fnid == 0x19a2a967) {
    return "cellRescSetPalInterpolateDropFlexRatio";
  } else if (fnid == 0x7af8a37f) {
    return "cellRescSetRegisterCount";
  } else if (fnid == 0x6cd0f95f) {
    return "cellRescSetSrc";
  } else if (fnid == 0xd3758645) {
    return "cellRescSetVBlankHandler";
  } else if (fnid == 0x0d3c22ce) {
    return "cellRescSetWaitFlip";
  } else if (fnid == 0xd1ca0503) {
    return "cellRescVideoOutResolutionId2RescBufferMode";
  } else if (fnid == 0x7f1086e6) {
    return "cellRtcCheckValid";
  } else if (fnid == 0xfb51fc61) {
    return "cellRtcCompareTick";
  } else if (fnid == 0x46ca7fe0) {
    return "cellRtcConvertLocalTimeToUtc";
  } else if (fnid == 0xc48d5002) {
    return "cellRtcConvertUtcToLocalTime";
  } else if (fnid == 0x5491b9d5) {
    return "cellRtcFormatRfc2822";
  } else if (fnid == 0xa07c3d2f) {
    return "cellRtcFormatRfc2822LocalTime";
  } else if (fnid == 0xd9c0b463) {
    return "cellRtcFormatRfc3339";
  } else if (fnid == 0x1324948a) {
    return "cellRtcFormatRfc3339LocalTime";
  } else if (fnid == 0x32c941cf) {
    return "cellRtcGetCurrentClock";
  } else if (fnid == 0x2cce9cf5) {
    return "cellRtcGetCurrentClockLocalTime";
  } else if (fnid == 0x9dafc0d9) {
    return "cellRtcGetCurrentTick";
  } else if (fnid == 0xc2d8cf95) {
    return "cellRtcGetDayOfWeek";
  } else if (fnid == 0x5b6a0a1d) {
    return "cellRtcGetDaysInMonth";
  } else if (fnid == 0xdfff32cf) {
    return "cellRtcGetDosTime";
  } else if (fnid == 0xc7bdb7eb) {
    return "cellRtcGetTick";
  } else if (fnid == 0xcb90c761) {
    return "cellRtcGetTime_t";
  } else if (fnid == 0xe7086f05) {
    return "cellRtcGetWin32FileTime";
  } else if (fnid == 0x5316b4a8) {
    return "cellRtcIsLeapYear";
  } else if (fnid == 0xc5bc0fac) {
    return "cellRtcParseDateTime";
  } else if (fnid == 0xcf11c3d6) {
    return "cellRtcParseRfc3339";
  } else if (fnid == 0x9598d4b3) {
    return "cellRtcSetDosTime";
  } else if (fnid == 0x99b13034) {
    return "cellRtcSetTick";
  } else if (fnid == 0xbb543189) {
    return "cellRtcSetTime_t";
  } else if (fnid == 0x5f68c268) {
    return "cellRtcSetWin32FileTime";
  } else if (fnid == 0x75744e2a) {
    return "cellRtcTickAddDays";
  } else if (fnid == 0xd41d3bd2) {
    return "cellRtcTickAddHours";
  } else if (fnid == 0xf8509925) {
    return "cellRtcTickAddMicroseconds";
  } else if (fnid == 0x2f010bfa) {
    return "cellRtcTickAddMinutes";
  } else if (fnid == 0xe0ecbb45) {
    return "cellRtcTickAddMonths";
  } else if (fnid == 0xccce71bd) {
    return "cellRtcTickAddSeconds";
  } else if (fnid == 0x269a1882) {
    return "cellRtcTickAddTicks";
  } else if (fnid == 0x64c63fd5) {
    return "cellRtcTickAddWeeks";
  } else if (fnid == 0x332a74dd) {
    return "cellRtcTickAddYears";
  } else if (fnid == 0xc1ad7ced) {
    return "cellRudpActivate";
  } else if (fnid == 0xee41e16a) {
    return "cellRudpBind";
  } else if (fnid == 0x7dadc739) {
    return "cellRudpCreateContext";
  } else if (fnid == 0x6c0cff03) {
    return "cellRudpEnableInternalIOThread";
  } else if (fnid == 0xb6bcb4a1) {
    return "cellRudpEnd";
  } else if (fnid == 0xa70737da) {
    return "cellRudpFlush";
  } else if (fnid == 0x74bfad12) {
    return "cellRudpGetContextStatus";
  } else if (fnid == 0xd666931f) {
    return "cellRudpGetLocalInfo";
  } else if (fnid == 0xfbf7e9e4) {
    return "cellRudpGetMaxSegmentSize";
  } else if (fnid == 0xff9d259c) {
    return "cellRudpGetOption";
  } else if (fnid == 0x576831ae) {
    return "cellRudpGetRemoteInfo";
  } else if (fnid == 0x2cde989f) {
    return "cellRudpGetSizeReadable";
  } else if (fnid == 0xa86b28e3) {
    return "cellRudpGetSizeWritable";
  } else if (fnid == 0xcd1a3f23) {
    return "cellRudpGetStatus";
  } else if (fnid == 0x63f63545) {
    return "cellRudpInit";
  } else if (fnid == 0xc407844f) {
    return "cellRudpInitiate";
  } else if (fnid == 0x6ee04954) {
    return "cellRudpNetReceived";
  } else if (fnid == 0xa3db855c) {
    return "cellRudpPollControl";
  } else if (fnid == 0x6bc587e9) {
    return "cellRudpPollCreate";
  } else if (fnid == 0x8ac398f1) {
    return "cellRudpPollDestroy";
  } else if (fnid == 0xd8310700) {
    return "cellRudpPollWait";
  } else if (fnid == 0xfade48b2) {
    return "cellRudpProcessEvents";
  } else if (fnid == 0x92e4d899) {
    return "cellRudpRead";
  } else if (fnid == 0x7ed95e60) {
    return "cellRudpSetEventHandler";
  } else if (fnid == 0x54f81789) {
    return "cellRudpSetMaxSegmentSize";
  } else if (fnid == 0x384ba777) {
    return "cellRudpSetOption";
  } else if (fnid == 0x48d3eeac) {
    return "cellRudpTerminate";
  } else if (fnid == 0x48c001b0) {
    return "cellRudpWrite";
  } else if (fnid == 0xed58e3ec) {
    return "cellSailAuReceiverFinalize";
  } else if (fnid == 0x3a1132ed) {
    return "cellSailAuReceiverGet";
  } else if (fnid == 0x3dd9639a) {
    return "cellSailAuReceiverInitialize";
  } else if (fnid == 0x10298371) {
    return "cellSailAviMovieGetHeader";
  } else if (fnid == 0x6e83f5c0) {
    return "cellSailAviMovieGetMovieInfo";
  } else if (fnid == 0x3e908c56) {
    return "cellSailAviMovieGetStreamByIndex";
  } else if (fnid == 0xddebd2a5) {
    return "cellSailAviMovieGetStreamByTypeAndIndex";
  } else if (fnid == 0xcc3cca60) {
    return "cellSailAviStreamGetHeader";
  } else if (fnid == 0xc09e2f23) {
    return "cellSailAviStreamGetMediaType";
  } else if (fnid == 0xdf5553ef) {
    return "cellSailDescriptorClearEs";
  } else if (fnid == 0x15fd6a2a) {
    return "cellSailDescriptorClose";
  } else if (fnid == 0x0abb318b) {
    return "cellSailDescriptorCreateDatabase";
  } else if (fnid == 0x28336e89) {
    return "cellSailDescriptorDestroyDatabase";
  } else if (fnid == 0xac9c3b1f) {
    return "cellSailDescriptorGetCapabilities";
  } else if (fnid == 0xbd1635f4) {
    return "cellSailDescriptorGetMediaInfo";
  } else if (fnid == 0xd5f9a15b) {
    return "cellSailDescriptorGetStreamType";
  } else if (fnid == 0x4c191088) {
    return "cellSailDescriptorGetUri";
  } else if (fnid == 0x92590d52) {
    return "cellSailDescriptorInquireCapability";
  } else if (fnid == 0x277adf21) {
    return "cellSailDescriptorIsAutoSelection";
  } else if (fnid == 0xc044fab1) {
    return "cellSailDescriptorOpen";
  } else if (fnid == 0x76b1a425) {
    return "cellSailDescriptorSetAutoSelection";
  } else if (fnid == 0x0d0c2f0c) {
    return "cellSailDescriptorSetEs";
  } else if (fnid == 0xee94b99b) {
    return "cellSailDescriptorSetParameter";
  } else if (fnid == 0x9553af65) {
    return "cellSailFutureFinalize";
  } else if (fnid == 0x3a2d806c) {
    return "cellSailFutureGet";
  } else if (fnid == 0x4cc54f8e) {
    return "cellSailFutureInitialize";
  } else if (fnid == 0x51ecf361) {
    return "cellSailFutureIsDone";
  } else if (fnid == 0x0c4cb439) {
    return "cellSailFutureReset";
  } else if (fnid == 0xa37fed15) {
    return "cellSailFutureSet";
  } else if (fnid == 0x76488bb1) {
    return "cellSailGraphicsAdapterFinalize";
  } else if (fnid == 0xffd58aa4) {
    return "cellSailGraphicsAdapterGetFormat";
  } else if (fnid == 0x0247c69e) {
    return "cellSailGraphicsAdapterGetFrame";
  } else if (fnid == 0x018281a8) {
    return "cellSailGraphicsAdapterGetFrame2";
  } else if (fnid == 0x1c983864) {
    return "cellSailGraphicsAdapterInitialize";
  } else if (fnid == 0x1872331b) {
    return "cellSailGraphicsAdapterPtsToTimePosition";
  } else if (fnid == 0x2e3ccb5e) {
    return "cellSailGraphicsAdapterSetPreferredFormat";
  } else if (fnid == 0x44a20e79) {
    return "cellSailGraphicsAdapterUpdateAvSync";
  } else if (fnid == 0x346ebba3) {
    return "cellSailMemAllocatorInitialize";
  } else if (fnid == 0xb980b76e) {
    return "cellSailMp4MovieGetBrand";
  } else if (fnid == 0x5783a454) {
    return "cellSailMp4MovieGetMovieInfo";
  } else if (fnid == 0x85b07126) {
    return "cellSailMp4MovieGetTrackById";
  } else if (fnid == 0x5faf802b) {
    return "cellSailMp4MovieGetTrackByIndex";
  } else if (fnid == 0xc2d90ec9) {
    return "cellSailMp4MovieGetTrackByTypeAndIndex";
  } else if (fnid == 0xd4049de0) {
    return "cellSailMp4MovieIsCompatibleBrand";
  } else if (fnid == 0xa48be428) {
    return "cellSailMp4TrackGetTrackInfo";
  } else if (fnid == 0x5f44f64f) {
    return "cellSailMp4TrackGetTrackReference";
  } else if (fnid == 0x72236ec1) {
    return "cellSailMp4TrackGetTrackReferenceCount";
  } else if (fnid == 0x7c8dff3b) {
    return "cellSailPlayerAddDescriptor";
  } else if (fnid == 0xbdf21b0f) {
    return "cellSailPlayerBoot";
  } else if (fnid == 0x950d53c1) {
    return "cellSailPlayerCancel";
  } else if (fnid == 0xbf9b8d72) {
    return "cellSailPlayerCloseEsAudio";
  } else if (fnid == 0xaed9d6cd) {
    return "cellSailPlayerCloseEsUser";
  } else if (fnid == 0x07924359) {
    return "cellSailPlayerCloseEsVideo";
  } else if (fnid == 0x85beffcc) {
    return "cellSailPlayerCloseStream";
  } else if (fnid == 0xd7938b8d) {
    return "cellSailPlayerCreateDescriptor";
  } else if (fnid == 0xfc839bd4) {
    return "cellSailPlayerDestroyDescriptor";
  } else if (fnid == 0xcc987ba6) {
    return "cellSailPlayerDumpImage";
  } else if (fnid == 0x18b4629d) {
    return "cellSailPlayerFinalize";
  } else if (fnid == 0x75fca288) {
    return "cellSailPlayerGetCurrentDescriptor";
  } else if (fnid == 0x752f8585) {
    return "cellSailPlayerGetDescriptorCount";
  } else if (fnid == 0x952269c9) {
    return "cellSailPlayerGetParameter";
  } else if (fnid == 0x186b98d3) {
    return "cellSailPlayerGetRegisteredProtocols";
  } else if (fnid == 0x38144ecf) {
    return "cellSailPlayerGetRepeatMode";
  } else if (fnid == 0x17932b26) {
    return "cellSailPlayerInitialize";
  } else if (fnid == 0x23654375) {
    return "cellSailPlayerInitialize2";
  } else if (fnid == 0x09de25fd) {
    return "cellSailPlayerIsEsAudioMuted";
  } else if (fnid == 0xdbe32ed4) {
    return "cellSailPlayerIsEsVideoMuted";
  } else if (fnid == 0xaafa17b8) {
    return "cellSailPlayerIsPaused";
  } else if (fnid == 0x26563ddc) {
    return "cellSailPlayerNext";
  } else if (fnid == 0x145f9b11) {
    return "cellSailPlayerOpenEsAudio";
  } else if (fnid == 0xa849d0a7) {
    return "cellSailPlayerOpenEsUser";
  } else if (fnid == 0x477501f6) {
    return "cellSailPlayerOpenEsVideo";
  } else if (fnid == 0x34ecc1b9) {
    return "cellSailPlayerOpenStream";
  } else if (fnid == 0xbedccc74) {
    return "cellSailPlayerRegisterSource";
  } else if (fnid == 0x9897fbd1) {
    return "cellSailPlayerRemoveDescriptor";
  } else if (fnid == 0x4fa5ad09) {
    return "cellSailPlayerReopenEsAudio";
  } else if (fnid == 0x7b6fa92e) {
    return "cellSailPlayerReopenEsUser";
  } else if (fnid == 0xf60a8a69) {
    return "cellSailPlayerReopenEsVideo";
  } else if (fnid == 0x47632810) {
    return "cellSailPlayerReplaceEventHandler";
  } else if (fnid == 0xf5747e1f) {
    return "cellSailPlayerSetAuReceiver";
  } else if (fnid == 0x91d287f6) {
    return "cellSailPlayerSetEsAudioMuted";
  } else if (fnid == 0xf1446a40) {
    return "cellSailPlayerSetEsVideoMuted";
  } else if (fnid == 0x18bcd21b) {
    return "cellSailPlayerSetGraphicsAdapter";
  } else if (fnid == 0x5f7c7a6f) {
    return "cellSailPlayerSetParameter";
  } else if (fnid == 0xd1d55a90) {
    return "cellSailPlayerSetPaused";
  } else if (fnid == 0x92eaf6ca) {
    return "cellSailPlayerSetRendererAudio";
  } else if (fnid == 0xecf56150) {
    return "cellSailPlayerSetRendererVideo";
  } else if (fnid == 0xfc5baf8a) {
    return "cellSailPlayerSetRepeatMode";
  } else if (fnid == 0x1139a206) {
    return "cellSailPlayerSetSoundAdapter";
  } else if (fnid == 0xe535b0d3) {
    return "cellSailPlayerStart";
  } else if (fnid == 0xeba8d4ec) {
    return "cellSailPlayerStop";
  } else if (fnid == 0x6f0b1002) {
    return "cellSailPlayerSubscribeEvent";
  } else if (fnid == 0x025b4974) {
    return "cellSailPlayerUnregisterSource";
  } else if (fnid == 0x69793952) {
    return "cellSailPlayerUnsubscribeEvent";
  } else if (fnid == 0x06dd4174) {
    return "cellSailRendererAudioFinalize";
  } else if (fnid == 0x67b4d01f) {
    return "cellSailRendererAudioInitialize";
  } else if (fnid == 0xb7b4ecee) {
    return "cellSailRendererAudioNotifyCallCompleted";
  } else if (fnid == 0xf841a537) {
    return "cellSailRendererAudioNotifyFrameDone";
  } else if (fnid == 0x325039b9) {
    return "cellSailRendererAudioNotifyOutputEos";
  } else if (fnid == 0x47055fea) {
    return "cellSailRendererVideoFinalize";
  } else if (fnid == 0x8d1ff475) {
    return "cellSailRendererVideoInitialize";
  } else if (fnid == 0x954f48f8) {
    return "cellSailRendererVideoNotifyCallCompleted";
  } else if (fnid == 0x5f77e8df) {
    return "cellSailRendererVideoNotifyFrameDone";
  } else if (fnid == 0xdff1cda2) {
    return "cellSailRendererVideoNotifyOutputEos";
  } else if (fnid == 0xd1462438) {
    return "cellSailSoundAdapterFinalize";
  } else if (fnid == 0xf25f197d) {
    return "cellSailSoundAdapterGetFormat";
  } else if (fnid == 0x7eb8d6b5) {
    return "cellSailSoundAdapterGetFrame";
  } else if (fnid == 0x3d0d3b72) {
    return "cellSailSoundAdapterInitialize";
  } else if (fnid == 0x4ae979df) {
    return "cellSailSoundAdapterPtsToTimePosition";
  } else if (fnid == 0x1c9d5e5a) {
    return "cellSailSoundAdapterSetPreferredFormat";
  } else if (fnid == 0xeec22809) {
    return "cellSailSoundAdapterUpdateAvSync";
  } else if (fnid == 0xee724c99) {
    return "cellSailSourceFinalize";
  } else if (fnid == 0x9d30bdce) {
    return "cellSailSourceInitialize";
  } else if (fnid == 0x764ec2d2) {
    return "cellSailSourceNotifyCallCompleted";
  } else if (fnid == 0xc457b203) {
    return "cellSailSourceNotifyCloseCompleted";
  } else if (fnid == 0x54c53688) {
    return "cellSailSourceNotifyInputEos";
  } else if (fnid == 0xf4009a94) {
    return "cellSailSourceNotifyMediaStateChanged";
  } else if (fnid == 0x3df98d41) {
    return "cellSailSourceNotifyOpenCompleted";
  } else if (fnid == 0x946ecca0) {
    return "cellSailSourceNotifyReadCompleted";
  } else if (fnid == 0xf289f0cd) {
    return "cellSailSourceNotifySessionError";
  } else if (fnid == 0x640c7278) {
    return "cellSailSourceNotifyStartCompleted";
  } else if (fnid == 0x7473970a) {
    return "cellSailSourceNotifyStopCompleted";
  } else if (fnid == 0x95ee1695) {
    return "cellSailSourceNotifyStreamOut";
  } else if (fnid == 0xbdb2251a) {
    return "cellSailSourceSetDiagHandler";
  } else if (fnid == 0x899d1587) {
    return "cellSailFeederAudioFinalize";
  } else if (fnid == 0xbd591197) {
    return "cellSailFeederAudioInitialize";
  } else if (fnid == 0xc2e2f30d) {
    return "cellSailFeederAudioNotifyCallCompleted";
  } else if (fnid == 0x3c775cea) {
    return "cellSailFeederAudioNotifyFrameOut";
  } else if (fnid == 0x999c0dc5) {
    return "cellSailFeederAudioNotifySessionEnd";
  } else if (fnid == 0xaf310ae6) {
    return "cellSailFeederAudioNotifySessionError";
  } else if (fnid == 0x81bfeae8) {
    return "cellSailFeederVideoFinalize";
  } else if (fnid == 0x57415dd3) {
    return "cellSailFeederVideoInitialize";
  } else if (fnid == 0xd84daeb9) {
    return "cellSailFeederVideoNotifyCallCompleted";
  } else if (fnid == 0xe5e0572a) {
    return "cellSailFeederVideoNotifyFrameOut";
  } else if (fnid == 0xbff6e8d3) {
    return "cellSailFeederVideoNotifySessionEnd";
  } else if (fnid == 0x86cae679) {
    return "cellSailFeederVideoNotifySessionError";
  } else if (fnid == 0xe14cae97) {
    return "cellSailProfileSetEsAudioParameter";
  } else if (fnid == 0x1422a425) {
    return "cellSailProfileSetEsVideoParameter";
  } else if (fnid == 0xe8d86c43) {
    return "cellSailProfileSetStreamParameter";
  } else if (fnid == 0xc4617ddc) {
    return "cellSailRecorderBoot";
  } else if (fnid == 0xd37fb694) {
    return "cellSailRecorderCancel";
  } else if (fnid == 0xe3f56f62) {
    return "cellSailRecorderCloseStream";
  } else if (fnid == 0x50affdc1) {
    return "cellSailRecorderCreateProfile";
  } else if (fnid == 0x49476a3d) {
    return "cellSailRecorderCreateVideoConverter";
  } else if (fnid == 0x376c3926) {
    return "cellSailRecorderDestroyProfile";
  } else if (fnid == 0x455c4709) {
    return "cellSailRecorderDestroyVideoConverter";
  } else if (fnid == 0x37aad85f) {
    return "cellSailRecorderDumpImage";
  } else if (fnid == 0xf57d74e3) {
    return "cellSailRecorderFinalize";
  } else if (fnid == 0xff20157b) {
    return "cellSailRecorderGetParameter";
  } else if (fnid == 0x7a52bf69) {
    return "cellSailRecorderInitialize";
  } else if (fnid == 0x10c81457) {
    return "cellSailRecorderOpenStream";
  } else if (fnid == 0x3deae857) {
    return "cellSailRecorderSetFeederAudio";
  } else if (fnid == 0x4fec43a9) {
    return "cellSailRecorderSetFeederVideo";
  } else if (fnid == 0x0a3ea2a9) {
    return "cellSailRecorderSetParameter";
  } else if (fnid == 0x4830faf8) {
    return "cellSailRecorderStart";
  } else if (fnid == 0x18ecc741) {
    return "cellSailRecorderStop";
  } else if (fnid == 0xe16de678) {
    return "cellSailVideoConverterCanGetResult";
  } else if (fnid == 0xb3d30b0d) {
    return "cellSailVideoConverterCanProcess";
  } else if (fnid == 0xe15679fe) {
    return "cellSailVideoConverterGetResult";
  } else if (fnid == 0x855da8c6) {
    return "cellSailVideoConverterProcess";
  } else if (fnid == 0x46a2d878) {
    return "cellSaveDataFixedExport";
  } else if (fnid == 0x52541151) {
    return "cellSaveDataFixedImport";
  } else if (fnid == 0x04c06fc2) {
    return "cellSaveDataGetListItem";
  } else if (fnid == 0x27cb8bc2) {
    return "cellSaveDataListDelete";
  } else if (fnid == 0x491cc554) {
    return "cellSaveDataListExport";
  } else if (fnid == 0x6b4e0de6) {
    return "cellSaveDataListImport";
  } else if (fnid == 0x95ae2cde) {
    return "cellSaveDataUserFixedExport";
  } else if (fnid == 0x529231b0) {
    return "cellSaveDataUserFixedImport";
  } else if (fnid == 0xf6482036) {
    return "cellSaveDataUserGetListItem";
  } else if (fnid == 0x7048a9ba) {
    return "cellSaveDataUserListDelete";
  } else if (fnid == 0x273d116a) {
    return "cellSaveDataUserListExport";
  } else if (fnid == 0x39d6ee43) {
    return "cellSaveDataUserListImport";
  } else if (fnid == 0xfc6f4e74) {
    return "cellScreenShotDisable";
  } else if (fnid == 0x9e33ab8f) {
    return "cellScreenShotEnable";
  } else if (fnid == 0x7a9c2243) {
    return "cellScreenShotSetOverlayImage";
  } else if (fnid == 0xd3ad63e4) {
    return "cellScreenShotSetParameter";
  } else if (fnid == 0x8fe376a6) {
    return "cellSearchCancel";
  } else if (fnid == 0x774033d6) {
    return "cellSearchEnd";
  } else if (fnid == 0xbfab7616) {
    return "cellSearchFinalize";
  } else if (fnid == 0x94e21701) {
    return "cellSearchGetContentIdByOffset";
  } else if (fnid == 0x9663a44b) {
    return "cellSearchGetContentInfoByContentId";
  } else if (fnid == 0x3b210319) {
    return "cellSearchGetContentInfoByOffset";
  } else if (fnid == 0x35cda406) {
    return "cellSearchGetContentInfoDeveloperData";
  } else if (fnid == 0xd7a7a433) {
    return "cellSearchGetContentInfoGameComment";
  } else if (fnid == 0xffb28491) {
    return "cellSearchGetContentInfoPath";
  } else if (fnid == 0x37b5ba0c) {
    return "cellSearchGetContentInfoPathMovieThumb";
  } else if (fnid == 0x025ce169) {
    return "cellSearchGetMusicSelectionContext";
  } else if (fnid == 0xed20e079) {
    return "cellSearchGetMusicSelectionContextOfSingleTrack";
  } else if (fnid == 0x540d9068) {
    return "cellSearchGetOffsetByContentId";
  } else if (fnid == 0xc81ccf8a) {
    return "cellSearchInitialize";
  } else if (fnid == 0xe73cb0d2) {
    return "cellSearchPrepareFile";
  } else if (fnid == 0x0591826f) {
    return "cellSearchStartContentSearch";
  } else if (fnid == 0x64fb0b76) {
    return "cellSearchStartContentSearchInList";
  } else if (fnid == 0x0a4c8295) {
    return "cellSearchStartListSearch";
  } else if (fnid == 0x13524faa) {
    return "cellSearchStartSceneSearch";
  } else if (fnid == 0xc0ed0522) {
    return "cellSearchStartSceneSearchInVideo";
  } else if (fnid == 0xf6f5fbca) {
    return "cellKeySheapBarrierDelete";
  } else if (fnid == 0xe897c835) {
    return "cellKeySheapBarrierNew";
  } else if (fnid == 0xe6b37362) {
    return "cellKeySheapBufferDelete";
  } else if (fnid == 0x4a5b9659) {
    return "cellKeySheapBufferNew";
  } else if (fnid == 0xa1b25841) {
    return "cellKeySheapInitialize";
  } else if (fnid == 0x2452679f) {
    return "cellKeySheapMutexDelete";
  } else if (fnid == 0x3478e1e6) {
    return "cellKeySheapMutexNew";
  } else if (fnid == 0x79a6abd0) {
    return "cellKeySheapQueueDelete";
  } else if (fnid == 0x987e260e) {
    return "cellKeySheapQueueNew";
  } else if (fnid == 0xed136702) {
    return "cellKeySheapRwmDelete";
  } else if (fnid == 0xf01ac471) {
    return "cellKeySheapRwmNew";
  } else if (fnid == 0x73a45cf8) {
    return "cellKeySheapSemaphoreDelete";
  } else if (fnid == 0x69a5861d) {
    return "cellKeySheapSemaphoreNew";
  } else if (fnid == 0x4b1383fb) {
    return "cellSheapAllocate";
  } else if (fnid == 0x5c5994bd) {
    return "cellSheapFree";
  } else if (fnid == 0xbbb47cd8) {
    return "cellSheapInitialize";
  } else if (fnid == 0x7fa23275) {
    return "cellSheapQueryFree";
  } else if (fnid == 0x37968718) {
    return "cellSheapQueryMax";
  } else if (fnid == 0xcccd3257) {
    return "cellSpudllGetImageSize";
  } else if (fnid == 0x3fbcf1d6) {
    return "cellSpudllHandleConfigSetDefaultValues";
  } else if (fnid == 0x95180230) {
    return "_cellSpursAttributeInitialize";
  } else if (fnid == 0x5ef96465) {
    return "_cellSpursEventFlagInitialize";
  } else if (fnid == 0x3548f483) {
    return "_cellSpursJobChainAttributeInitialize";
  } else if (fnid == 0x011ee38b) {
    return "_cellSpursLFQueueInitialize";
  } else if (fnid == 0x35dae22b) {
    return "_cellSpursLFQueuePopBody";
  } else if (fnid == 0x8a85674d) {
    return "_cellSpursLFQueuePushBody";
  } else if (fnid == 0x082bfb09) {
    return "_cellSpursQueueInitialize";
  } else if (fnid == 0x77cdac0c) {
    return "_cellSpursSemaphoreInitialize";
  } else if (fnid == 0xe0a6dbe4) {
    return "_cellSpursSendSignal";
  } else if (fnid == 0x8adadf65) {
    return "_cellSpursTaskAttribute2Initialize";
  } else if (fnid == 0xb8474eff) {
    return "_cellSpursTaskAttributeInitialize";
  } else if (fnid == 0xc2acdf43) {
    return "_cellSpursTasksetAttribute2Initialize";
  } else if (fnid == 0x16394a4e) {
    return "_cellSpursTasksetAttributeInitialize";
  } else if (fnid == 0xefeb2679) {
    return "_cellSpursWorkloadAttributeInitialize";
  } else if (fnid == 0xa73bf47e) {
    return "_cellSpursWorkloadFlagReceiver";
  } else if (fnid == 0x2ddbcc0a) {
    return "_cellSpursWorkloadFlagReceiver2";
  } else if (fnid == 0x8fdf50b2) {
    return "cellSpursAddUrgentCall";
  } else if (fnid == 0x17001000) {
    return "cellSpursAddUrgentCommand";
  } else if (fnid == 0x69726aa2) {
    return "cellSpursAddWorkload";
  } else if (fnid == 0xc0158d8b) {
    return "cellSpursAddWorkloadWithAttribute";
  } else if (fnid == 0xb9bc6207) {
    return "cellSpursAttachLv2EventQueue";
  } else if (fnid == 0x1051d134) {
    return "cellSpursAttributeEnableSpuPrintfIfAvailable";
  } else if (fnid == 0x9dcbcb5d) {
    return "cellSpursAttributeEnableSystemWorkload";
  } else if (fnid == 0x82275c1c) {
    return "cellSpursAttributeSetMemoryContainerForSpuThread";
  } else if (fnid == 0x07529113) {
    return "cellSpursAttributeSetNamePrefix";
  } else if (fnid == 0xa839a4d9) {
    return "cellSpursAttributeSetSpuThreadGroupType";
  } else if (fnid == 0x9aeb5432) {
    return "cellSpursBarrierGetTasksetAddress";
  } else if (fnid == 0x7fdf4fef) {
    return "cellSpursBarrierInitialize";
  } else if (fnid == 0x60eb2dec) {
    return "cellSpursCreateJobChain";
  } else if (fnid == 0x303c19cd) {
    return "cellSpursCreateJobChainWithAttribute";
  } else if (fnid == 0xbeb600ac) {
    return "cellSpursCreateTask";
  } else if (fnid == 0xe14ca62d) {
    return "cellSpursCreateTask2";
  } else if (fnid == 0xe4944a1c) {
    return "cellSpursCreateTask2WithBinInfo";
  } else if (fnid == 0x52cc6c82) {
    return "cellSpursCreateTaskset";
  } else if (fnid == 0x4a6465e3) {
    return "cellSpursCreateTaskset2";
  } else if (fnid == 0xc10931cb) {
    return "cellSpursCreateTasksetWithAttribute";
  } else if (fnid == 0x1d46fedf) {
    return "cellSpursCreateTaskWithAttribute";
  } else if (fnid == 0x1ebcf459) {
    return "cellSpursDestroyTaskset2";
  } else if (fnid == 0x4e66d483) {
    return "cellSpursDetachLv2EventQueue";
  } else if (fnid == 0x32b94add) {
    return "cellSpursEnableExceptionEventHandler";
  } else if (fnid == 0x87630976) {
    return "cellSpursEventFlagAttachLv2EventQueue";
  } else if (fnid == 0x4ac7bae4) {
    return "cellSpursEventFlagClear";
  } else if (fnid == 0x22aab31d) {
    return "cellSpursEventFlagDetachLv2EventQueue";
  } else if (fnid == 0x4d1e9373) {
    return "cellSpursEventFlagGetClearMode";
  } else if (fnid == 0x890f9e5a) {
    return "cellSpursEventFlagGetDirection";
  } else if (fnid == 0x947efb0b) {
    return "cellSpursEventFlagGetTasksetAddress";
  } else if (fnid == 0xf5507729) {
    return "cellSpursEventFlagSet";
  } else if (fnid == 0x6d2d9339) {
    return "cellSpursEventFlagTryWait";
  } else if (fnid == 0x373523d4) {
    return "cellSpursEventFlagWait";
  } else if (fnid == 0xca4c4600) {
    return "cellSpursFinalize";
  } else if (fnid == 0x1f402f8f) {
    return "cellSpursGetInfo";
  } else if (fnid == 0x86c864a2) {
    return "cellSpursGetJobChainId";
  } else if (fnid == 0x4ceb9694) {
    return "cellSpursGetJobChainInfo";
  } else if (fnid == 0xd86380d8) {
    return "cellSpursGetJobPipelineInfo";
  } else if (fnid == 0xc56defb5) {
    return "cellSpursGetNumSpuThread";
  } else if (fnid == 0x6fcdf6e3) {
    return "cellSpursGetSpuGuid";
  } else if (fnid == 0x39c173fb) {
    return "cellSpursGetSpuThreadGroupId";
  } else if (fnid == 0x6c960f6d) {
    return "cellSpursGetSpuThreadId";
  } else if (fnid == 0xe7dd87e1) {
    return "cellSpursGetTasksetId";
  } else if (fnid == 0x9fcb567b) {
    return "cellSpursGetTasksetInfo";
  } else if (fnid == 0xa7f9e716) {
    return "cellSpursGetWorkloadData";
  } else if (fnid == 0xc765b995) {
    return "cellSpursGetWorkloadFlag";
  } else if (fnid == 0x4e153e3e) {
    return "cellSpursGetWorkloadInfo";
  } else if (fnid == 0xacfc8dbc) {
    return "cellSpursInitialize";
  } else if (fnid == 0xaa6269a8) {
    return "cellSpursInitializeWithAttribute";
  } else if (fnid == 0x30aa96c4) {
    return "cellSpursInitializeWithAttribute2";
  } else if (fnid == 0xbb68d76e) {
    return "cellSpursJobChainAttributeSetHaltOnError";
  } else if (fnid == 0x2cfccb99) {
    return "cellSpursJobChainAttributeSetJobTypeMemoryCheck";
  } else if (fnid == 0x9fef70c2) {
    return "cellSpursJobChainAttributeSetName";
  } else if (fnid == 0x161da6a7) {
    return "cellSpursJobChainGetError";
  } else if (fnid == 0x494613c7) {
    return "cellSpursJobChainGetSpursAddress";
  } else if (fnid == 0x5202e53b) {
    return "cellSpursJobChainSetExceptionEventHandler";
  } else if (fnid == 0x6aa76999) {
    return "cellSpursJobChainUnsetExceptionEventHandler";
  } else if (fnid == 0x68aaeba9) {
    return "cellSpursJobGuardInitialize";
  } else if (fnid == 0xd5d0b256) {
    return "cellSpursJobGuardNotify";
  } else if (fnid == 0x00af2519) {
    return "cellSpursJobGuardReset";
  } else if (fnid == 0x97a2f6c8) {
    return "cellSpursJobHeaderSetJobbin2Param";
  } else if (fnid == 0xe7b0e69a) {
    return "cellSpursJobSetMaxGrab";
  } else if (fnid == 0xa7c066de) {
    return "cellSpursJoinJobChain";
  } else if (fnid == 0xa7a94892) {
    return "cellSpursJoinTask2";
  } else if (fnid == 0x9f72add3) {
    return "cellSpursJoinTaskset";
  } else if (fnid == 0xbfea60fa) {
    return "cellSpursKickJobChain";
  } else if (fnid == 0x1656d49f) {
    return "cellSpursLFQueueAttachLv2EventQueue";
  } else if (fnid == 0x73e06f91) {
    return "cellSpursLFQueueDetachLv2EventQueue";
  } else if (fnid == 0xb792ca1a) {
    return "cellSpursLFQueueGetTasksetAddress";
  } else if (fnid == 0x4cce88a9) {
    return "cellSpursLookUpTasksetAddress";
  } else if (fnid == 0xe5443be7) {
    return "cellSpursQueueAttachLv2EventQueue";
  } else if (fnid == 0x247414d0) {
    return "cellSpursQueueClear";
  } else if (fnid == 0x35f02287) {
    return "cellSpursQueueDepth";
  } else if (fnid == 0x039d70b7) {
    return "cellSpursQueueDetachLv2EventQueue";
  } else if (fnid == 0xec68442c) {
    return "cellSpursQueueGetDirection";
  } else if (fnid == 0x369fe03d) {
    return "cellSpursQueueGetEntrySize";
  } else if (fnid == 0x2093252b) {
    return "cellSpursQueueGetTasksetAddress";
  } else if (fnid == 0x91066667) {
    return "cellSpursQueuePopBody";
  } else if (fnid == 0x92cff6ed) {
    return "cellSpursQueuePushBody";
  } else if (fnid == 0x54876603) {
    return "cellSpursQueueSize";
  } else if (fnid == 0x75211196) {
    return "cellSpursReadyCountAdd";
  } else if (fnid == 0xf1d3552d) {
    return "cellSpursReadyCountCompareAndSwap";
  } else if (fnid == 0xf843818d) {
    return "cellSpursReadyCountStore";
  } else if (fnid == 0x49a3426d) {
    return "cellSpursReadyCountSwap";
  } else if (fnid == 0x57e4dec3) {
    return "cellSpursRemoveWorkload";
  } else if (fnid == 0x182d9890) {
    return "cellSpursRequestIdleSpu";
  } else if (fnid == 0xf31731bb) {
    return "cellSpursRunJobChain";
  } else if (fnid == 0x568b2352) {
    return "cellSpursSemaphoreGetTasksetAddress";
  } else if (fnid == 0x1d2bca4b) {
    return "cellSpursSendWorkloadSignal";
  } else if (fnid == 0xd2e23fa9) {
    return "cellSpursSetExceptionEventHandler";
  } else if (fnid == 0x7517724a) {
    return "cellSpursSetGlobalExceptionEventHandler";
  } else if (fnid == 0x84d2f6d5) {
    return "cellSpursSetMaxContention";
  } else if (fnid == 0x4de203e2) {
    return "cellSpursSetPreemptionVictimHints";
  } else if (fnid == 0x80a29e27) {
    return "cellSpursSetPriorities";
  } else if (fnid == 0x738e40e6) {
    return "cellSpursShutdownJobChain";
  } else if (fnid == 0xa789e631) {
    return "cellSpursShutdownTaskset";
  } else if (fnid == 0x98d5b343) {
    return "cellSpursShutdownWorkload";
  } else if (fnid == 0xa121a224) {
    return "cellSpursTaskAttributeSetExitCodeContainer";
  } else if (fnid == 0x13ae18f3) {
    return "cellSpursTaskExitCodeGet";
  } else if (fnid == 0x34552fa6) {
    return "cellSpursTaskExitCodeInitialize";
  } else if (fnid == 0xe717ac73) {
    return "cellSpursTaskExitCodeTryGet";
  } else if (fnid == 0x9197915f) {
    return "cellSpursTaskGenerateLsPattern";
  } else if (fnid == 0x9034e538) {
    return "cellSpursTaskGetContextSaveAreaSize";
  } else if (fnid == 0x1d344406) {
    return "cellSpursTaskGetLoadableSegmentPattern";
  } else if (fnid == 0x7cb33c2e) {
    return "cellSpursTaskGetReadOnlyAreaPattern";
  } else if (fnid == 0xdca13593) {
    return "cellSpursTasksetAttributeEnableClearLS";
  } else if (fnid == 0x652b70e2) {
    return "cellSpursTasksetAttributeSetName";
  } else if (fnid == 0x8f122ef8) {
    return "cellSpursTasksetAttributeSetTasksetSize";
  } else if (fnid == 0x58d58fcf) {
    return "cellSpursTasksetGetSpursAddress";
  } else if (fnid == 0x2edcff92) {
    return "cellSpursTasksetSetExceptionEventHandler";
  } else if (fnid == 0x94034c95) {
    return "cellSpursTasksetUnsetExceptionEventHandler";
  } else if (fnid == 0x7b9cbb74) {
    return "cellSpursTraceFinalize";
  } else if (fnid == 0x569674e3) {
    return "cellSpursTraceInitialize";
  } else if (fnid == 0xce853fbf) {
    return "cellSpursTraceStart";
  } else if (fnid == 0xddc81b5a) {
    return "cellSpursTraceStop";
  } else if (fnid == 0x838fa4f0) {
    return "cellSpursTryJoinTask2";
  } else if (fnid == 0x4c75deb8) {
    return "cellSpursUnsetExceptionEventHandler";
  } else if (fnid == 0x861237f8) {
    return "cellSpursUnsetGlobalExceptionEventHandler";
  } else if (fnid == 0x5fd43fe4) {
    return "cellSpursWaitForWorkloadShutdown";
  } else if (fnid == 0x7e4ea023) {
    return "cellSpursWakeUp";
  } else if (fnid == 0x4a5eab63) {
    return "cellSpursWorkloadAttributeSetName";
  } else if (fnid == 0x0eb4bc38) {
    return "cellSpursWorkloadAttributeSetShutdownCompletionEventHook";
  } else if (fnid == 0xf244e799) {
    return "_cellSpursCreateJobQueue";
  } else if (fnid == 0x983be7fc) {
    return "_cellSpursCreateJobQueueWithJobDescriptorPool";
  } else if (fnid == 0x0d69929e) {
    return "_cellSpursJobQueueAllocateJobDescriptorBody";
  } else if (fnid == 0xc39173a4) {
    return "_cellSpursJobQueuePort2CopyPushJobBody";
  } else if (fnid == 0xe1731df3) {
    return "_cellSpursJobQueuePort2PushAndReleaseJobBody";
  } else if (fnid == 0xcf89f218) {
    return "_cellSpursJobQueuePort2PushJobBody";
  } else if (fnid == 0xb53436e7) {
    return "_cellSpursJobQueuePort2PushJobListBody";
  } else if (fnid == 0x46c3fb5a) {
    return "_cellSpursJobQueuePortCopyPushBody";
  } else if (fnid == 0x1917359d) {
    return "_cellSpursJobQueuePortCopyPushJobBody";
  } else if (fnid == 0xef66c4b7) {
    return "_cellSpursJobQueuePortCopyPushJobBody2";
  } else if (fnid == 0x4e1a17a6) {
    return "_cellSpursJobQueuePortPushBody";
  } else if (fnid == 0xbd1c5d6b) {
    return "_cellSpursJobQueuePortPushFlush";
  } else if (fnid == 0x85cd04cd) {
    return "_cellSpursJobQueuePortPushJobBody";
  } else if (fnid == 0x90e392cf) {
    return "_cellSpursJobQueuePortPushJobBody2";
  } else if (fnid == 0x1b6eea7e) {
    return "_cellSpursJobQueuePortPushJobListBody";
  } else if (fnid == 0x9396be1d) {
    return "_cellSpursJobQueuePortPushSync";
  } else if (fnid == 0x1da890c7) {
    return "_cellSpursJobQueuePushAndReleaseJobBody";
  } else if (fnid == 0x99316997) {
    return "_cellSpursJobQueuePushBody";
  } else if (fnid == 0xdf0120c2) {
    return "_cellSpursJobQueuePushFlush";
  } else if (fnid == 0x36d0a53c) {
    return "_cellSpursJobQueuePushJob2Body";
  } else if (fnid == 0xc4843b74) {
    return "_cellSpursJobQueuePushJobBody";
  } else if (fnid == 0x98203e3c) {
    return "_cellSpursJobQueuePushJobBody2";
  } else if (fnid == 0xaf1c7a1d) {
    return "_cellSpursJobQueuePushJobListBody";
  } else if (fnid == 0x701fd8a9) {
    return "_cellSpursJobQueuePushSync";
  } else if (fnid == 0xc343ee10) {
    return "cellSpursGetJobQueueId";
  } else if (fnid == 0x43ddab4f) {
    return "cellSpursJobQueueAttributeInitialize";
  } else if (fnid == 0x0582338a) {
    return "cellSpursJobQueueAttributeSetDoBusyWaiting";
  } else if (fnid == 0xe70f874e) {
    return "cellSpursJobQueueAttributeSetGrabParameters";
  } else if (fnid == 0xff03cc79) {
    return "cellSpursJobQueueAttributeSetIsHaltOnError";
  } else if (fnid == 0x742cec0d) {
    return "cellSpursJobQueueAttributeSetIsJobTypeMemoryCheck";
  } else if (fnid == 0x5fb9b05d) {
    return "cellSpursJobQueueAttributeSetMaxGrab";
  } else if (fnid == 0x1686957e) {
    return "cellSpursJobQueueAttributeSetMaxSizeJobDescriptor";
  } else if (fnid == 0x0f03f712) {
    return "cellSpursJobQueueAttributeSetSubmitWithEntryLock";
  } else if (fnid == 0x29c2acc5) {
    return "cellSpursJobQueueClose";
  } else if (fnid == 0x2e775550) {
    return "cellSpursJobQueueGetError";
  } else if (fnid == 0x840c5239) {
    return "cellSpursJobQueueGetHandleCount";
  } else if (fnid == 0x5659da82) {
    return "cellSpursJobQueueGetMaxSizeJobDescriptor";
  } else if (fnid == 0x01bbf2e0) {
    return "cellSpursJobQueueGetSpurs";
  } else if (fnid == 0x15934401) {
    return "cellSpursJobQueueGetSuspendedJobSize";
  } else if (fnid == 0xff7a7bd2) {
    return "cellSpursJobQueueOpen";
  } else if (fnid == 0x934abb00) {
    return "cellSpursJobQueuePort2AllocateJobDescriptor";
  } else if (fnid == 0xf11fe0f1) {
    return "cellSpursJobQueuePort2Create";
  } else if (fnid == 0xc485d207) {
    return "cellSpursJobQueuePort2Destroy";
  } else if (fnid == 0x435bff07) {
    return "cellSpursJobQueuePort2GetJobQueue";
  } else if (fnid == 0xbfea28ab) {
    return "cellSpursJobQueuePort2PushFlush";
  } else if (fnid == 0xfc526b72) {
    return "cellSpursJobQueuePort2PushSync";
  } else if (fnid == 0xfacb3ced) {
    return "cellSpursJobQueuePort2Sync";
  } else if (fnid == 0x26fa81b4) {
    return "cellSpursJobQueuePortFinalize";
  } else if (fnid == 0x90c88f84) {
    return "cellSpursJobQueuePortGetJobQueue";
  } else if (fnid == 0x3d1294fc) {
    return "cellSpursJobQueuePortInitialize";
  } else if (fnid == 0xf5de6363) {
    return "cellSpursJobQueuePortInitializeWithDescriptorBuffer";
  } else if (fnid == 0x634b1502) {
    return "cellSpursJobQueuePortSync";
  } else if (fnid == 0x80a0264c) {
    return "cellSpursJobQueuePortTrySync";
  } else if (fnid == 0x6c93ea18) {
    return "cellSpursJobQueueSemaphoreAcquire";
  } else if (fnid == 0x677027af) {
    return "cellSpursJobQueueSemaphoreInitialize";
  } else if (fnid == 0x97409f67) {
    return "cellSpursJobQueueSemaphoreTryAcquire";
  } else if (fnid == 0x915455b3) {
    return "cellSpursJobQueueSendSignal";
  } else if (fnid == 0x9c300489) {
    return "cellSpursJobQueueSetExceptionEventHandler";
  } else if (fnid == 0x13671514) {
    return "cellSpursJobQueueSetWaitingMode";
  } else if (fnid == 0x93248b92) {
    return "cellSpursJobQueueUnsetExceptionEventHandler";
  } else if (fnid == 0x8ce4cffa) {
    return "cellSpursJoinJobQueue";
  } else if (fnid == 0x8c97a96c) {
    return "cellSpursShutdownJobQueue";
  } else if (fnid == 0xae6eb491) {
    return "cellSslCertGetIssuerName";
  } else if (fnid == 0x5e9253ca) {
    return "cellSslCertGetMd5Fingerprint";
  } else if (fnid == 0x766d3ca1) {
    return "cellSslCertGetNameEntryCount";
  } else if (fnid == 0x006c4900) {
    return "cellSslCertGetNameEntryInfo";
  } else if (fnid == 0x218b64da) {
    return "cellSslCertGetNotAfter";
  } else if (fnid == 0x31d9ba8d) {
    return "cellSslCertGetNotBefore";
  } else if (fnid == 0xf8206492) {
    return "cellSslCertGetPublicKey";
  } else if (fnid == 0x033c4905) {
    return "cellSslCertGetRsaPublicKeyExponent";
  } else if (fnid == 0x8e505175) {
    return "cellSslCertGetRsaPublicKeyModulus";
  } else if (fnid == 0x7b689ebc) {
    return "cellSslCertGetSerialNumber";
  } else if (fnid == 0x32c61bdf) {
    return "cellSslCertGetSubjectName";
  } else if (fnid == 0x571afaca) {
    return "cellSslCertificateLoader";
  } else if (fnid == 0x1650aea4) {
    return "cellSslEnd";
  } else if (fnid == 0xfb02c9d2) {
    return "cellSslInit";
  } else if (fnid == 0xaee1e0c2) {
    return "cellSubDisplayAudioOutBlocking";
  } else if (fnid == 0x5468d6b0) {
    return "cellSubDisplayAudioOutNonBlocking";
  } else if (fnid == 0x551d80a5) {
    return "cellSubDisplayEnd";
  } else if (fnid == 0xe2485f79) {
    return "cellSubDisplayGetPeerList";
  } else if (fnid == 0x8a264d71) {
    return "cellSubDisplayGetPeerNum";
  } else if (fnid == 0x6595ce22) {
    return "cellSubDisplayGetRequiredMemory";
  } else if (fnid == 0x938ac642) {
    return "cellSubDisplayGetVideoBuffer";
  } else if (fnid == 0xf9a7e8a5) {
    return "cellSubDisplayInit";
  } else if (fnid == 0xa5bccb47) {
    return "cellSubDisplayStart";
  } else if (fnid == 0x6d85ddb3) {
    return "cellSubDisplayStop";
  } else if (fnid == 0x54fc2032) {
    return "_cellSyncLFQueueAttachLv2EventQueue";
  } else if (fnid == 0xfe74e8e7) {
    return "_cellSyncLFQueueCompletePopPointer";
  } else if (fnid == 0x7a51deee) {
    return "_cellSyncLFQueueCompletePopPointer2";
  } else if (fnid == 0x4e88c68d) {
    return "_cellSyncLFQueueCompletePushPointer";
  } else if (fnid == 0x35bbdad2) {
    return "_cellSyncLFQueueCompletePushPointer2";
  } else if (fnid == 0x811d148e) {
    return "_cellSyncLFQueueDetachLv2EventQueue";
  } else if (fnid == 0x74c37666) {
    return "_cellSyncLFQueueGetPopPointer";
  } else if (fnid == 0x46356fe0) {
    return "_cellSyncLFQueueGetPopPointer2";
  } else if (fnid == 0xe9bf2110) {
    return "_cellSyncLFQueueGetPushPointer";
  } else if (fnid == 0x6bb4ef9d) {
    return "_cellSyncLFQueueGetPushPointer2";
  } else if (fnid == 0xaff7627a) {
    return "_cellSyncLFQueueGetSignalAddress";
  } else if (fnid == 0xe1bc7add) {
    return "_cellSyncLFQueuePopBody";
  } else if (fnid == 0xba5961ca) {
    return "_cellSyncLFQueuePushBody";
  } else if (fnid == 0x07254fda) {
    return "cellSyncBarrierInitialize";
  } else if (fnid == 0xf06a6415) {
    return "cellSyncBarrierNotify";
  } else if (fnid == 0x268edd6d) {
    return "cellSyncBarrierTryNotify";
  } else if (fnid == 0x6c272124) {
    return "cellSyncBarrierTryWait";
  } else if (fnid == 0x35f21355) {
    return "cellSyncBarrierWait";
  } else if (fnid == 0x2af0c515) {
    return "cellSyncLFQueueClear";
  } else if (fnid == 0xe18c273c) {
    return "cellSyncLFQueueDepth";
  } else if (fnid == 0xd59aa307) {
    return "cellSyncLFQueueGetDirection";
  } else if (fnid == 0x0c7cb9f7) {
    return "cellSyncLFQueueGetEntrySize";
  } else if (fnid == 0xaa355278) {
    return "cellSyncLFQueueInitialize";
  } else if (fnid == 0x167ea63e) {
    return "cellSyncLFQueueSize";
  } else if (fnid == 0xa9072dee) {
    return "cellSyncMutexInitialize";
  } else if (fnid == 0x1bb675c2) {
    return "cellSyncMutexLock";
  } else if (fnid == 0xd06918c4) {
    return "cellSyncMutexTryLock";
  } else if (fnid == 0x91f2b7b0) {
    return "cellSyncMutexUnlock";
  } else if (fnid == 0xa5362e73) {
    return "cellSyncQueueClear";
  } else if (fnid == 0x3929948d) {
    return "cellSyncQueueInitialize";
  } else if (fnid == 0x48154c9b) {
    return "cellSyncQueuePeek";
  } else if (fnid == 0x4da6d7e0) {
    return "cellSyncQueuePop";
  } else if (fnid == 0x5ae841e5) {
    return "cellSyncQueuePush";
  } else if (fnid == 0x4da349b2) {
    return "cellSyncQueueSize";
  } else if (fnid == 0x68af923c) {
    return "cellSyncQueueTryPeek";
  } else if (fnid == 0xa58df87f) {
    return "cellSyncQueueTryPop";
  } else if (fnid == 0x705985cd) {
    return "cellSyncQueueTryPush";
  } else if (fnid == 0xfc48b03f) {
    return "cellSyncRwmInitialize";
  } else if (fnid == 0xcece771f) {
    return "cellSyncRwmRead";
  } else if (fnid == 0xa6669751) {
    return "cellSyncRwmTryRead";
  } else if (fnid == 0xba5bee48) {
    return "cellSyncRwmTryWrite";
  } else if (fnid == 0xed773f5f) {
    return "cellSyncRwmWrite";
  } else if (fnid == 0xdf3c532a) {
    return "_cellSync2CondAttributeInitialize";
  } else if (fnid == 0x55836e73) {
    return "_cellSync2MutexAttributeInitialize";
  } else if (fnid == 0x5e00d433) {
    return "_cellSync2QueueAttributeInitialize";
  } else if (fnid == 0x2d77fe17) {
    return "_cellSync2SemaphoreAttributeInitialize";
  } else if (fnid == 0x5b1e4d7a) {
    return "cellSync2CondEstimateBufferSize";
  } else if (fnid == 0x63062249) {
    return "cellSync2CondFinalize";
  } else if (fnid == 0x58be9a0f) {
    return "cellSync2CondInitialize";
  } else if (fnid == 0x871af804) {
    return "cellSync2CondSignal";
  } else if (fnid == 0x8aae07c2) {
    return "cellSync2CondSignalAll";
  } else if (fnid == 0xbc96d751) {
    return "cellSync2CondWait";
  } else if (fnid == 0xd51bfae7) {
    return "cellSync2MutexEstimateBufferSize";
  } else if (fnid == 0x27f2d61c) {
    return "cellSync2MutexFinalize";
  } else if (fnid == 0xeb81a467) {
    return "cellSync2MutexInitialize";
  } else if (fnid == 0xa400d82e) {
    return "cellSync2MutexLock";
  } else if (fnid == 0xa69c749c) {
    return "cellSync2MutexTryLock";
  } else if (fnid == 0x0080fe88) {
    return "cellSync2MutexUnlock";
  } else if (fnid == 0xc08cc0f9) {
    return "cellSync2QueueEstimateBufferSize";
  } else if (fnid == 0x6af85cdf) {
    return "cellSync2QueueFinalize";
  } else if (fnid == 0xf0e1471c) {
    return "cellSync2QueueGetDepth";
  } else if (fnid == 0x12f0a27d) {
    return "cellSync2QueueGetSize";
  } else if (fnid == 0xf125e044) {
    return "cellSync2QueueInitialize";
  } else if (fnid == 0xd83ab0c9) {
    return "cellSync2QueuePop";
  } else if (fnid == 0x7d967d91) {
    return "cellSync2QueuePush";
  } else if (fnid == 0x0c9a0ea9) {
    return "cellSync2QueueTryPop";
  } else if (fnid == 0x7fd479fe) {
    return "cellSync2QueueTryPush";
  } else if (fnid == 0xd1b0d146) {
    return "cellSync2SemaphoreAcquire";
  } else if (fnid == 0x74c2780f) {
    return "cellSync2SemaphoreEstimateBufferSize";
  } else if (fnid == 0x164843a7) {
    return "cellSync2SemaphoreFinalize";
  } else if (fnid == 0x4e2ee031) {
    return "cellSync2SemaphoreGetCount";
  } else if (fnid == 0xc5dee254) {
    return "cellSync2SemaphoreInitialize";
  } else if (fnid == 0x0c2983ac) {
    return "cellSync2SemaphoreRelease";
  } else if (fnid == 0x5e4b0f87) {
    return "cellSync2SemaphoreTryAcquire";
  } else if (fnid == 0x08db2adf) {
    return "cellSysconfBtGetDeviceList";
  } else if (fnid == 0x3c92be09) {
    return "cellSysmoduleFetchImage";
  } else if (fnid == 0x96c07adf) {
    return "cellSysmoduleFinalize";
  } else if (fnid == 0x1ef115ef) {
    return "cellSysmoduleGetImagesize";
  } else if (fnid == 0x63ff6ff9) {
    return "cellSysmoduleInitialize";
  } else if (fnid == 0x5a59e258) {
    return "cellSysmoduleIsLoaded";
  } else if (fnid == 0x32267a31) {
    return "cellSysmoduleLoadModule";
  } else if (fnid == 0xa193143c) {
    return "cellSysmoduleSetMemcontainer";
  } else if (fnid == 0x112a5ee9) {
    return "cellSysmoduleUnloadModule";
  } else if (fnid == 0x4692ab35) {
    return "cellAudioOutConfigure";
  } else if (fnid == 0xed5d96af) {
    return "cellAudioOutGetConfiguration";
  } else if (fnid == 0x7663e368) {
    return "cellAudioOutGetDeviceInfo";
  } else if (fnid == 0xe5e2b09d) {
    return "cellAudioOutGetNumberOfDevice";
  } else if (fnid == 0xc01b4e7c) {
    return "cellAudioOutGetSoundAvailability";
  } else if (fnid == 0x2beac488) {
    return "cellAudioOutGetSoundAvailability2";
  } else if (fnid == 0xf4e3caa0) {
    return "cellAudioOutGetState";
  } else if (fnid == 0x68bc4ff3) {
    return "cellAudioOutRegisterCallback";
  } else if (fnid == 0xc96e89e9) {
    return "cellAudioOutSetCopyControl";
  } else if (fnid == 0x9dfdad46) {
    return "cellAudioOutUnregisterCallback";
  } else if (fnid == 0xb72bc4e6) {
    return "cellDiscGameGetBootDiscInfo";
  } else if (fnid == 0xdfdd302e) {
    return "cellDiscGameRegisterDiscChangeCallback";
  } else if (fnid == 0xedc34e1a) {
    return "cellDiscGameUnregisterDiscChangeCallback";
  } else if (fnid == 0xe7951dee) {
    return "cellGameDataCheckCreate";
  } else if (fnid == 0xc9645c41) {
    return "cellGameDataCheckCreate2";
  } else if (fnid == 0x9949bf82) {
    return "cellGameDataExitBroken";
  } else if (fnid == 0xa9b0c1d9) {
    return "cellGameDataGetSizeKB";
  } else if (fnid == 0x523a96c4) {
    return "cellGameDataSetSystemVer";
  } else if (fnid == 0xf8115d69) {
    return "cellGameRegisterDiscChangeCallback";
  } else if (fnid == 0x21fc0c71) {
    return "cellGameUnregisterDiscChangeCallback";
  } else if (fnid == 0x9117df20) {
    return "cellHddGameCheck";
  } else if (fnid == 0x4bdec82a) {
    return "cellHddGameCheck2";
  } else if (fnid == 0xafd605b3) {
    return "cellHddGameExitBroken";
  } else if (fnid == 0xf82e2ef7) {
    return "cellHddGameGetSizeKB";
  } else if (fnid == 0x9ca9ffa7) {
    return "cellHddGameSetSystemVer";
  } else if (fnid == 0x62b0f803) {
    return "cellMsgDialogAbort";
  } else if (fnid == 0x20543730) {
    return "cellMsgDialogClose";
  } else if (fnid == 0xf81eca25) {
    return "cellMsgDialogOpen";
  } else if (fnid == 0x7603d3db) {
    return "cellMsgDialogOpen2";
  } else if (fnid == 0x3e22cb4b) {
    return "cellMsgDialogOpenErrorCode";
  } else if (fnid == 0x94862702) {
    return "cellMsgDialogProgressBarInc";
  } else if (fnid == 0x7bc2c8a8) {
    return "cellMsgDialogProgressBarReset";
  } else if (fnid == 0x9d6af72a) {
    return "cellMsgDialogProgressBarSetMsg";
  } else if (fnid == 0xb6d84526) {
    return "cellOskDialogAbort";
  } else if (fnid == 0x7f21c918) {
    return "cellOskDialogAddSupportLanguage";
  } else if (fnid == 0x41f20828) {
    return "cellOskDialogDisableDimmer";
  } else if (fnid == 0x1d99c3ee) {
    return "cellOskDialogGetInputText";
  } else if (fnid == 0x35beade0) {
    return "cellOskDialogGetSize";
  } else if (fnid == 0x7fcfc915) {
    return "cellOskDialogLoadAsync";
  } else if (fnid == 0xd3790a86) {
    return "cellOskDialogSetDeviceMask";
  } else if (fnid == 0xf3b4b43e) {
    return "cellOskDialogSetInitialInputDevice";
  } else if (fnid == 0xc427890c) {
    return "cellOskDialogSetInitialKeyLayout";
  } else if (fnid == 0xb53c54fa) {
    return "cellOskDialogSetKeyLayoutOption";
  } else if (fnid == 0xf0ec3ccc) {
    return "cellOskDialogSetLayoutMode";
  } else if (fnid == 0x53e39df3) {
    return "cellOskDialogSetSeparateWindowOption";
  } else if (fnid == 0x3d1e1931) {
    return "cellOskDialogUnloadAsync";
  } else if (fnid == 0xc22c79b5) {
    return "cellSaveDataAutoLoad";
  } else if (fnid == 0xfbd5c856) {
    return "cellSaveDataAutoLoad2";
  } else if (fnid == 0xf8a175ec) {
    return "cellSaveDataAutoSave";
  } else if (fnid == 0x8b7ed64b) {
    return "cellSaveDataAutoSave2";
  } else if (fnid == 0xa4ed7dfe) {
    return "cellSaveDataDelete";
  } else if (fnid == 0xedadd797) {
    return "cellSaveDataDelete2";
  } else if (fnid == 0xe7fa820b) {
    return "cellSaveDataEnableOverlay";
  } else if (fnid == 0xced17573) {
    return "cellSaveDataFixedDelete";
  } else if (fnid == 0x50183b44) {
    return "cellSaveDataFixedLoad";
  } else if (fnid == 0x2a8eada2) {
    return "cellSaveDataFixedLoad2";
  } else if (fnid == 0x41bc2ca1) {
    return "cellSaveDataFixedSave";
  } else if (fnid == 0x2aae9ef5) {
    return "cellSaveDataFixedSave2";
  } else if (fnid == 0x21425307) {
    return "cellSaveDataListAutoLoad";
  } else if (fnid == 0x4dd03a4e) {
    return "cellSaveDataListAutoSave";
  } else if (fnid == 0xef5a353d) {
    return "cellSaveDataListLoad";
  } else if (fnid == 0x1dfbfdd6) {
    return "cellSaveDataListLoad2";
  } else if (fnid == 0x3dbd2314) {
    return "cellSaveDataListSave";
  } else if (fnid == 0x2de0d663) {
    return "cellSaveDataListSave2";
  } else if (fnid == 0xcdc6aefd) {
    return "cellSaveDataUserAutoLoad";
  } else if (fnid == 0x52aac4fa) {
    return "cellSaveDataUserAutoSave";
  } else if (fnid == 0x8b8a2f48) {
    return "cellSaveDataUserFixedDelete";
  } else if (fnid == 0x6e7264ed) {
    return "cellSaveDataUserFixedLoad";
  } else if (fnid == 0x40b34847) {
    return "cellSaveDataUserFixedSave";
  } else if (fnid == 0x248bd1d8) {
    return "cellSaveDataUserListAutoLoad";
  } else if (fnid == 0x0e091c36) {
    return "cellSaveDataUserListAutoSave";
  } else if (fnid == 0x39dd8425) {
    return "cellSaveDataUserListLoad";
  } else if (fnid == 0x0f03cfb0) {
    return "cellSaveDataUserListSave";
  } else if (fnid == 0xabc3cd2c) {
    return "cellStorageDataExport";
  } else if (fnid == 0x918288fb) {
    return "cellStorageDataImport";
  } else if (fnid == 0x27ac51e4) {
    return "cellStorageDataImportMove";
  } else if (fnid == 0x744c1544) {
    return "cellSysCacheClear";
  } else if (fnid == 0x1e7bff94) {
    return "cellSysCacheMount";
  } else if (fnid == 0x76948bfc) {
    return "cellSysconfAbort";
  } else if (fnid == 0xb2b6cdd0) {
    return "cellSysconfOpen";
  } else if (fnid == 0xf2c4a425) {
    return "cellSysutilAvcByeRequest";
  } else if (fnid == 0xf4aa8b27) {
    return "cellSysutilAvcCancelByeRequest";
  } else if (fnid == 0xbccd70dd) {
    return "cellSysutilAvcCancelJoinRequest";
  } else if (fnid == 0x5e91bc26) {
    return "cellSysutilAvcEnumPlayers";
  } else if (fnid == 0xf481967f) {
    return "cellSysutilAvcGetAttribute";
  } else if (fnid == 0xeb9d78d8) {
    return "cellSysutilAvcGetLayoutMode";
  } else if (fnid == 0x08269f37) {
    return "cellSysutilAvcGetShowStatus";
  } else if (fnid == 0x073b89d5) {
    return "cellSysutilAvcGetSpeakerVolumeLevel";
  } else if (fnid == 0x7d94ca36) {
    return "cellSysutilAvcGetVideoMuting";
  } else if (fnid == 0x5ee3bc26) {
    return "cellSysutilAvcGetVoiceMuting";
  } else if (fnid == 0xd9ea5709) {
    return "cellSysutilAvcHidePanel";
  } else if (fnid == 0x17dbe8b3) {
    return "cellSysutilAvcJoinRequest";
  } else if (fnid == 0x15df71ed) {
    return "cellSysutilAvcLoadAsync";
  } else if (fnid == 0xeca938ca) {
    return "cellSysutilAvcSetAttribute";
  } else if (fnid == 0x018a1381) {
    return "cellSysutilAvcSetLayoutMode";
  } else if (fnid == 0xaffdadc0) {
    return "cellSysutilAvcSetSpeakerVolumeLevel";
  } else if (fnid == 0x71acb8d3) {
    return "cellSysutilAvcSetVideoMuting";
  } else if (fnid == 0x4056c932) {
    return "cellSysutilAvcSetVoiceMuting";
  } else if (fnid == 0x2dbc92c7) {
    return "cellSysutilAvcShowPanel";
  } else if (fnid == 0x6c673f78) {
    return "cellSysutilAvcUnloadAsync";
  } else if (fnid == 0x189a74da) {
    return "cellSysutilCheckCallback";
  } else if (fnid == 0xcfdd8e87) {
    return "cellSysutilDisableBgmPlayback";
  } else if (fnid == 0xa36335a5) {
    return "cellSysutilDisableBgmPlaybackEx";
  } else if (fnid == 0x220894e3) {
    return "cellSysutilEnableBgmPlayback";
  } else if (fnid == 0xac58ad2b) {
    return "cellSysutilEnableBgmPlaybackEx";
  } else if (fnid == 0x9997e6b6) {
    return "cellSysutilGameDataAssignVmc";
  } else if (fnid == 0x1dfcce99) {
    return "cellSysutilGameDataExit";
  } else if (fnid == 0x2a95d8bc) {
    return "cellSysutilGameExit_I";
  } else if (fnid == 0x01f04d94) {
    return "cellSysutilGamePowerOff_I";
  } else if (fnid == 0x30d3d12b) {
    return "cellSysutilGameReboot_I";
  } else if (fnid == 0xa11552f6) {
    return "cellSysutilGetBgmPlaybackStatus";
  } else if (fnid == 0x6cfd856f) {
    return "cellSysutilGetBgmPlaybackStatus2";
  } else if (fnid == 0x40e895d3) {
    return "cellSysutilGetSystemParamInt";
  } else if (fnid == 0x938013a0) {
    return "cellSysutilGetSystemParamString";
  } else if (fnid == 0x9d98afa0) {
    return "cellSysutilRegisterCallback";
  } else if (fnid == 0xf3dbf5a7) {
    return "cellSysutilSetBgmPlaybackExtraParam";
  } else if (fnid == 0x02ff3c1b) {
    return "cellSysutilUnregisterCallback";
  } else if (fnid == 0x0bae8772) {
    return "cellVideoOutConfigure";
  } else if (fnid == 0xcfdf24bb) {
    return "cellVideoOutDebugSetMonitorType";
  } else if (fnid == 0x15b0b0cd) {
    return "cellVideoOutGetConfiguration";
  } else if (fnid == 0x55e425c3) {
    return "cellVideoOutGetConvertCursorColorInfo";
  } else if (fnid == 0x1e930eef) {
    return "cellVideoOutGetDeviceInfo";
  } else if (fnid == 0x75bbb672) {
    return "cellVideoOutGetNumberOfDevice";
  } else if (fnid == 0xe558748d) {
    return "cellVideoOutGetResolution";
  } else if (fnid == 0xa322db75) {
    return "cellVideoOutGetResolutionAvailability";
  } else if (fnid == 0x887572d5) {
    return "cellVideoOutGetState";
  } else if (fnid == 0x8e8bc444) {
    return "cellVideoOutRegisterCallback";
  } else if (fnid == 0x7871bed4) {
    return "cellVideoOutUnregisterCallback";
  } else if (fnid == 0x6d7444e6) {
    return "cellWebBrowserActivate";
  } else if (fnid == 0x83668b8e) {
    return "cellWebBrowserConfig";
  } else if (fnid == 0x7fb3c6a5) {
    return "cellWebBrowserConfig2";
  } else if (fnid == 0xa4dd11cc) {
    return "cellWebBrowserConfigGetHeapSize";
  } else if (fnid == 0x0c316b87) {
    return "cellWebBrowserConfigGetHeapSize2";
  } else if (fnid == 0x7f896a1f) {
    return "cellWebBrowserConfigSetCustomExit";
  } else if (fnid == 0x3261a9c8) {
    return "cellWebBrowserConfigSetDisableTabs";
  } else if (fnid == 0x1f6629e4) {
    return "cellWebBrowserConfigSetErrorHook2";
  } else if (fnid == 0x1a91874b) {
    return "cellWebBrowserConfigSetFullScreen2";
  } else if (fnid == 0x52d9457a) {
    return "cellWebBrowserConfigSetFullVersion2";
  } else if (fnid == 0x9c9fe6a4) {
    return "cellWebBrowserConfigSetFunction";
  } else if (fnid == 0xe22ed55d) {
    return "cellWebBrowserConfigSetFunction2";
  } else if (fnid == 0x76fc8fb1) {
    return "cellWebBrowserConfigSetHeapSize";
  } else if (fnid == 0xfe669845) {
    return "cellWebBrowserConfigSetHeapSize2";
  } else if (fnid == 0x0f8a3b6b) {
    return "cellWebBrowserConfigSetMimeSet";
  } else if (fnid == 0x93c523c6) {
    return "cellWebBrowserConfigSetNotifyHook2";
  } else if (fnid == 0xee7528f3) {
    return "cellWebBrowserConfigSetRequestHook2";
  } else if (fnid == 0xac16777e) {
    return "cellWebBrowserConfigSetStatusHook2";
  } else if (fnid == 0x619b1427) {
    return "cellWebBrowserConfigSetTabCount2";
  } else if (fnid == 0xa9a439e0) {
    return "cellWebBrowserConfigSetUnknownMIMETypeHook2";
  } else if (fnid == 0x60a4daab) {
    return "cellWebBrowserConfigSetVersion";
  } else if (fnid == 0xd7a617f5) {
    return "cellWebBrowserConfigSetViewCondition2";
  } else if (fnid == 0xa9b62ac8) {
    return "cellWebBrowserConfigSetViewRect2";
  } else if (fnid == 0x6c1082aa) {
    return "cellWebBrowserConfigWithVer";
  } else if (fnid == 0x7f881be1) {
    return "cellWebBrowserCreate";
  } else if (fnid == 0xa5f12145) {
    return "cellWebBrowserCreate2";
  } else if (fnid == 0xf1a443e7) {
    return "cellWebBrowserCreateRender2";
  } else if (fnid == 0x4b6e8560) {
    return "cellWebBrowserCreateRenderWithRect2";
  } else if (fnid == 0x8a4cb646) {
    return "cellWebBrowserCreateWithConfig";
  } else if (fnid == 0xb53b3d42) {
    return "cellWebBrowserCreateWithConfigFull";
  } else if (fnid == 0xa58943f8) {
    return "cellWebBrowserCreateWithRect2";
  } else if (fnid == 0x46a0285d) {
    return "cellWebBrowserDeactivate";
  } else if (fnid == 0xbed85cb8) {
    return "cellWebBrowserDestroy";
  } else if (fnid == 0xe8dee79c) {
    return "cellWebBrowserDestroy2";
  } else if (fnid == 0x58c89c4a) {
    return "cellWebBrowserEstimate";
  } else if (fnid == 0x6d087930) {
    return "cellWebBrowserEstimate2";
  } else if (fnid == 0x10cabeff) {
    return "cellWebBrowserGetUsrdataOnGameExit";
  } else if (fnid == 0x749c9b5f) {
    return "cellWebBrowserInitialize";
  } else if (fnid == 0x9fb97b10) {
    return "cellWebBrowserNavigate2";
  } else if (fnid == 0xc8971db5) {
    return "cellWebBrowserSetLocalContentsAdditionalTitleID";
  } else if (fnid == 0x6dfff31d) {
    return "cellWebBrowserSetSystemCallbackUsrdata";
  } else if (fnid == 0x93ced48d) {
    return "cellWebBrowserShutdown";
  } else if (fnid == 0x24644561) {
    return "cellWebBrowserWakeupWithGameExit";
  } else if (fnid == 0x8a5dbb58) {
    return "cellWebComponentCreate";
  } else if (fnid == 0x6144f033) {
    return "cellWebComponentCreateAsync";
  } else if (fnid == 0xdce51399) {
    return "cellWebComponentDestroy";
  } else if (fnid == 0x9e67e0dd) {
    return "cellSysutilApGetRequiredMemSize";
  } else if (fnid == 0x90c2bb19) {
    return "cellSysutilApOff";
  } else if (fnid == 0x3343824c) {
    return "cellSysutilApOn";
  } else if (fnid == 0x07236c83) {
    return "cellSysutilAvc2ChangeVideoResolution";
  } else if (fnid == 0xa8dc0efa) {
    return "cellSysutilAvc2CreateWindow";
  } else if (fnid == 0x3a37e7f1) {
    return "cellSysutilAvc2DestroyWindow";
  } else if (fnid == 0xb81b9777) {
    return "cellSysutilAvc2EnumPlayers";
  } else if (fnid == 0x2f280883) {
    return "cellSysutilAvc2EstimateMemoryContainerSize";
  } else if (fnid == 0x1be2b4e0) {
    return "cellSysutilAvc2GetAttribute";
  } else if (fnid == 0x02c5417a) {
    return "cellSysutilAvc2GetPlayerInfo";
  } else if (fnid == 0x5f3811f8) {
    return "cellSysutilAvc2GetPlayerVoiceMuting";
  } else if (fnid == 0xe40e3dfc) {
    return "cellSysutilAvc2GetScreenShowStatus";
  } else if (fnid == 0xa9f5b75c) {
    return "cellSysutilAvc2GetSpeakerMuting";
  } else if (fnid == 0x3ef4f668) {
    return "cellSysutilAvc2GetSpeakerVolumeLevel";
  } else if (fnid == 0x0f5a2afb) {
    return "cellSysutilAvc2GetVideoMuting";
  } else if (fnid == 0xdf2ed367) {
    return "cellSysutilAvc2GetVoiceMuting";
  } else if (fnid == 0x103d6b46) {
    return "cellSysutilAvc2GetWindowAttribute";
  } else if (fnid == 0xfc2873a9) {
    return "cellSysutilAvc2GetWindowPosition";
  } else if (fnid == 0x82ced772) {
    return "cellSysutilAvc2GetWindowShowStatus";
  } else if (fnid == 0x8a40a618) {
    return "cellSysutilAvc2GetWindowSize";
  } else if (fnid == 0xb856b63f) {
    return "cellSysutilAvc2GetWindowString";
  } else if (fnid == 0xd7d6272f) {
    return "cellSysutilAvc2HideScreen";
  } else if (fnid == 0xde6afc37) {
    return "cellSysutilAvc2HideWindow";
  } else if (fnid == 0x89456724) {
    return "cellSysutilAvc2InitParam";
  } else if (fnid == 0x4c4b9665) {
    return "cellSysutilAvc2IsCameraAttached";
  } else if (fnid == 0xa26aa437) {
    return "cellSysutilAvc2IsMicAttached";
  } else if (fnid == 0x02dc41ee) {
    return "cellSysutilAvc2JoinChat";
  } else if (fnid == 0x712d51d6) {
    return "cellSysutilAvc2JoinChatRequest";
  } else if (fnid == 0xbf022284) {
    return "cellSysutilAvc2LeaveChat";
  } else if (fnid == 0x97b2da6a) {
    return "cellSysutilAvc2LeaveChatRequest";
  } else if (fnid == 0xc6c93d62) {
    return "cellSysutilAvc2Load";
  } else if (fnid == 0x1d73ab8c) {
    return "cellSysutilAvc2LoadAsync";
  } else if (fnid == 0x55d7bbfd) {
    return "cellSysutilAvc2MicRead";
  } else if (fnid == 0xccf0aeff) {
    return "cellSysutilAvc2SetAttribute";
  } else if (fnid == 0x31fc8b92) {
    return "cellSysutilAvc2SetPlayerVoiceMuting";
  } else if (fnid == 0xc35ed665) {
    return "cellSysutilAvc2SetSpeakerMuting";
  } else if (fnid == 0x207621a8) {
    return "cellSysutilAvc2SetSpeakerVolumeLevel";
  } else if (fnid == 0x3447668a) {
    return "cellSysutilAvc2SetStreamingTarget";
  } else if (fnid == 0x8c2f5be3) {
    return "cellSysutilAvc2SetStreamPriority";
  } else if (fnid == 0x2fc0ab58) {
    return "cellSysutilAvc2SetVideoMuting";
  } else if (fnid == 0x14937714) {
    return "cellSysutilAvc2SetVoiceMuting";
  } else if (fnid == 0x7a69ecc1) {
    return "cellSysutilAvc2SetWindowAttribute";
  } else if (fnid == 0x3c8c827c) {
    return "cellSysutilAvc2SetWindowPosition";
  } else if (fnid == 0xaee75751) {
    return "cellSysutilAvc2SetWindowSize";
  } else if (fnid == 0x225142bd) {
    return "cellSysutilAvc2SetWindowString";
  } else if (fnid == 0x0b45cd84) {
    return "cellSysutilAvc2ShowScreen";
  } else if (fnid == 0xac170042) {
    return "cellSysutilAvc2ShowWindow";
  } else if (fnid == 0x74d22119) {
    return "cellSysutilAvc2StartStreaming";
  } else if (fnid == 0xd42657dd) {
    return "cellSysutilAvc2StartStreaming2";
  } else if (fnid == 0x16ff9ba0) {
    return "cellSysutilAvc2StartVoiceDetection";
  } else if (fnid == 0x04e1e1e4) {
    return "cellSysutilAvc2StopStreaming";
  } else if (fnid == 0x11f071cb) {
    return "cellSysutilAvc2StopStreaming2";
  } else if (fnid == 0x178982d9) {
    return "cellSysutilAvc2StopVoiceDetection";
  } else if (fnid == 0x38f33624) {
    return "cellSysutilAvc2Unload";
  } else if (fnid == 0xf3b5ff77) {
    return "cellSysutilAvc2Unload2";
  } else if (fnid == 0x17481336) {
    return "cellSysutilAvc2UnloadAsync";
  } else if (fnid == 0xce6780c9) {
    return "cellSysutilAvc2UnloadAsync2";
  } else if (fnid == 0x326fab55) {
    return "cellSysutilAvcExtGetNamePlateShowStatus";
  } else if (fnid == 0xcbe0c10a) {
    return "cellSysutilAvcExtGetSurfacePointer";
  } else if (fnid == 0xaed82c21) {
    return "cellSysutilAvcExtGetWindowAlpha";
  } else if (fnid == 0x22a36b23) {
    return "cellSysutilAvcExtGetWindowPosition";
  } else if (fnid == 0x8ed310e5) {
    return "cellSysutilAvcExtGetWindowRotation";
  } else if (fnid == 0x2d9a1997) {
    return "cellSysutilAvcExtGetWindowShowStatus";
  } else if (fnid == 0x28f0dc04) {
    return "cellSysutilAvcExtGetWindowSize";
  } else if (fnid == 0x683fe299) {
    return "cellSysutilAvcExtHidePanelEx";
  } else if (fnid == 0x739c2f63) {
    return "cellSysutilAvcExtHideWindow";
  } else if (fnid == 0xd8685383) {
    return "cellSysutilAvcExtInitOptionParam";
  } else if (fnid == 0x51ccbe09) {
    return "cellSysutilAvcExtLoadAsyncEx";
  } else if (fnid == 0x22ca0929) {
    return "cellSysutilAvcExtSetHideNamePlate";
  } else if (fnid == 0x5a763d0e) {
    return "cellSysutilAvcExtSetShowNamePlate";
  } else if (fnid == 0x332ee22c) {
    return "cellSysutilAvcExtSetWindowAlpha";
  } else if (fnid == 0x245ff230) {
    return "cellSysutilAvcExtSetWindowPosition";
  } else if (fnid == 0x1b6e8cd2) {
    return "cellSysutilAvcExtSetWindowRotation";
  } else if (fnid == 0x40bc33c8) {
    return "cellSysutilAvcExtSetWindowSize";
  } else if (fnid == 0xe8b1c18d) {
    return "cellSysutilAvcExtSetWindowZorder";
  } else if (fnid == 0x4466c0e2) {
    return "cellSysutilAvcExtShowPanelEx";
  } else if (fnid == 0x61b1cb18) {
    return "cellSysutilAvcExtShowWindow";
  } else if (fnid == 0xc851a4c0) {
    return "cellSysutilAvcExtStartVoiceDetection";
  } else if (fnid == 0x5ba98e47) {
    return "cellSysutilAvcExtStopVoiceDetection";
  } else if (fnid == 0x65bf9ea3) {
    return "cellAudioInGetAvailableDeviceInfo";
  } else if (fnid == 0x3d5730ce) {
    return "cellAudioInGetDeviceInfo";
  } else if (fnid == 0xeb6fcff1) {
    return "cellAudioInRegisterDevice";
  } else if (fnid == 0xeb6c50fb) {
    return "cellAudioInSetDeviceMode";
  } else if (fnid == 0xfa6bcc17) {
    return "cellAudioInUnregisterDevice";
  } else if (fnid == 0xc3273d9b) {
    return "cellAudioOutGetAvailableDeviceInfo";
  } else if (fnid == 0x18d0ada6) {
    return "cellAudioOutGetDeviceInfo2";
  } else if (fnid == 0xc7087631) {
    return "cellAudioOutRegisterDevice";
  } else if (fnid == 0xe4645af8) {
    return "cellAudioOutSetDeviceMode";
  } else if (fnid == 0x0bddef7d) {
    return "cellAudioOutUnregisterDevice";
  } else if (fnid == 0x4ec8c141) {
    return "cellVideoOutConvertCursorColor";
  } else if (fnid == 0x655a0364) {
    return "cellVideoOutGetGamma";
  } else if (fnid == 0xfaa275a4) {
    return "cellVideoOutGetScreenSize";
  } else if (fnid == 0xc7020f62) {
    return "cellVideoOutSetGamma";
  } else if (fnid == 0x269ffedd) {
    return "cellVideoOutSetupDisplay";
  } else if (fnid == 0x1cfa1a11) {
    return "cellVideoOutSetXVColor";
  } else if (fnid == 0x571dc686) {
    return "cellSysutilGetLicenseArea";
  } else if (fnid == 0x074dbb39) {
    return "cellUsbdAllocateMemory";
  } else if (fnid == 0xac77eb78) {
    return "cellUsbdBulkTransfer";
  } else if (fnid == 0x9763e962) {
    return "cellUsbdClosePipe";
  } else if (fnid == 0x97cf128e) {
    return "cellUsbdControlTransfer";
  } else if (fnid == 0x35f22ac3) {
    return "cellUsbdEnd";
  } else if (fnid == 0x4e456e81) {
    return "cellUsbdFreeMemory";
  } else if (fnid == 0xdb819e03) {
    return "cellUsbdGetDeviceLocation";
  } else if (fnid == 0xbdbd2428) {
    return "cellUsbdGetDeviceSpeed";
  } else if (fnid == 0x5de3af36) {
    return "cellUsbdGetPrivateData";
  } else if (fnid == 0xd5263dea) {
    return "cellUsbdGetThreadPriority";
  } else if (fnid == 0x7a1b6eab) {
    return "cellUsbdHSIsochronousTransfer";
  } else if (fnid == 0xd0e766fe) {
    return "cellUsbdInit";
  } else if (fnid == 0x0f411262) {
    return "cellUsbdInterruptTransfer";
  } else if (fnid == 0xde58c4c2) {
    return "cellUsbdIsochronousTransfer";
  } else if (fnid == 0x254289ac) {
    return "cellUsbdOpenPipe";
  } else if (fnid == 0x7fe92c54) {
    return "cellUsbdRegisterExtraLdd";
  } else if (fnid == 0xbd554bcb) {
    return "cellUsbdRegisterExtraLdd2";
  } else if (fnid == 0x359befba) {
    return "cellUsbdRegisterLdd";
  } else if (fnid == 0x2fb08e1e) {
    return "cellUsbdScanStaticDescriptor";
  } else if (fnid == 0x63bfdb97) {
    return "cellUsbdSetPrivateData";
  } else if (fnid == 0xc24af1d7) {
    return "cellUsbdSetThreadPriority";
  } else if (fnid == 0x5c832bd7) {
    return "cellUsbdSetThreadPriority2";
  } else if (fnid == 0x90460081) {
    return "cellUsbdUnregisterExtraLdd";
  } else if (fnid == 0x64951ac7) {
    return "cellUsbdUnregisterLdd";
  } else if (fnid == 0xabe090e3) {
    return "cellUsbPspcmBind";
  } else if (fnid == 0x17f42197) {
    return "cellUsbPspcmBindAsync";
  } else if (fnid == 0xf20df7fc) {
    return "cellUsbPspcmCalcPoolSize";
  } else if (fnid == 0xa4a5ddb4) {
    return "cellUsbPspcmCancelBind";
  } else if (fnid == 0xe76e79ab) {
    return "cellUsbPspcmCancelWaitData";
  } else if (fnid == 0xfa07d320) {
    return "cellUsbPspcmClose";
  } else if (fnid == 0x0f7b3b6d) {
    return "cellUsbPspcmEnd";
  } else if (fnid == 0x97670a90) {
    return "cellUsbPspcmGetAddr";
  } else if (fnid == 0x657fcd36) {
    return "cellUsbPspcmInit";
  } else if (fnid == 0x01a4cde0) {
    return "cellUsbPspcmPollBindAsync";
  } else if (fnid == 0x816799dd) {
    return "cellUsbPspcmPollData";
  } else if (fnid == 0x7b249315) {
    return "cellUsbPspcmPollRecvAsync";
  } else if (fnid == 0x3f22403e) {
    return "cellUsbPspcmPollResetAsync";
  } else if (fnid == 0x7f0a3eaf) {
    return "cellUsbPspcmPollSendAsync";
  } else if (fnid == 0xf9883d3b) {
    return "cellUsbPspcmRecv";
  } else if (fnid == 0x02955295) {
    return "cellUsbPspcmRecvAsync";
  } else if (fnid == 0xe3fbf64d) {
    return "cellUsbPspcmRegister";
  } else if (fnid == 0xe68a65ac) {
    return "cellUsbPspcmReset";
  } else if (fnid == 0x4ef182dd) {
    return "cellUsbPspcmResetAsync";
  } else if (fnid == 0x7277d7c3) {
    return "cellUsbPspcmSend";
  } else if (fnid == 0x4af23efa) {
    return "cellUsbPspcmSendAsync";
  } else if (fnid == 0x7ff72b42) {
    return "cellUsbPspcmUnregister";
  } else if (fnid == 0x4abe830e) {
    return "cellUsbPspcmWaitBindAsync";
  } else if (fnid == 0xdb864d11) {
    return "cellUsbPspcmWaitData";
  } else if (fnid == 0x461dc8cc) {
    return "cellUsbPspcmWaitRecvAsync";
  } else if (fnid == 0xe840f449) {
    return "cellUsbPspcmWaitResetAsync";
  } else if (fnid == 0x3caddf6c) {
    return "cellUsbPspcmWaitSendAsync";
  } else if (fnid == 0xb3516536) {
    return "cellUserInfoEnableOverlay";
  } else if (fnid == 0xc55e338b) {
    return "cellUserInfoGetList";
  } else if (fnid == 0x2b761140) {
    return "cellUserInfoGetStat";
  } else if (fnid == 0x3097cc1c) {
    return "cellUserInfoSelectUser_ListType";
  } else if (fnid == 0x55123a25) {
    return "cellUserInfoSelectUser_SetList";
  } else if (fnid == 0xc15be817) {
    return "cellVideoExportFinalize";
  } else if (fnid == 0x81296524) {
    return "cellVideoExportFromFile";
  } else if (fnid == 0x6a24cc70) {
    return "cellVideoExportInitialize";
  } else if (fnid == 0x2f457571) {
    return "cellVideoExportInitialize2";
  } else if (fnid == 0x1bb79ff4) {
    return "cellVideoExportProgress";
  } else if (fnid == 0x122e0d0f) {
    return "cellVideoUploadInitialize";
  } else if (fnid == 0xae6a21d5) {
    return "cellVoiceConnectIPortToOPort";
  } else if (fnid == 0x2a01013e) {
    return "cellVoiceCreateNotifyEventQueue";
  } else if (fnid == 0x2de54871) {
    return "cellVoiceCreatePort";
  } else if (fnid == 0x20bafe31) {
    return "cellVoiceDebugTopology";
  } else if (fnid == 0x9f70c475) {
    return "cellVoiceDeletePort";
  } else if (fnid == 0x18d3df30) {
    return "cellVoiceDisconnectIPortFromOPort";
  } else if (fnid == 0xe0e1ae12) {
    return "cellVoiceEnd";
  } else if (fnid == 0xbef53a2b) {
    return "cellVoiceGetBitRate";
  } else if (fnid == 0x474609e2) {
    return "cellVoiceGetMuteFlag";
  } else if (fnid == 0xf629ed67) {
    return "cellVoiceGetPortAttr";
  } else if (fnid == 0x54ac3519) {
    return "cellVoiceGetPortInfo";
  } else if (fnid == 0xd6811aa7) {
    return "cellVoiceGetSignalState";
  } else if (fnid == 0x762dc193) {
    return "cellVoiceGetVolume";
  } else if (fnid == 0xc7cf1182) {
    return "cellVoiceInit";
  } else if (fnid == 0xb1a2c38f) {
    return "cellVoiceInitEx";
  } else if (fnid == 0x87c71b06) {
    return "cellVoicePausePort";
  } else if (fnid == 0xd14e784d) {
    return "cellVoicePausePortAll";
  } else if (fnid == 0x36472c57) {
    return "cellVoiceReadFromOPort";
  } else if (fnid == 0xdd000886) {
    return "cellVoiceRemoveNotifyEventQueue";
  } else if (fnid == 0xff0fa43a) {
    return "cellVoiceResetPort";
  } else if (fnid == 0x7bf17b15) {
    return "cellVoiceResumePort";
  } else if (fnid == 0x7f3963f7) {
    return "cellVoiceResumePortAll";
  } else if (fnid == 0x7e60adc6) {
    return "cellVoiceSetBitRate";
  } else if (fnid == 0xdde35a0c) {
    return "cellVoiceSetMuteFlag";
  } else if (fnid == 0xd4d80ea5) {
    return "cellVoiceSetMuteFlagAll";
  } else if (fnid == 0x35d84910) {
    return "cellVoiceSetNotifyEventQueue";
  } else if (fnid == 0x9d0f4af1) {
    return "cellVoiceSetPortAttr";
  } else if (fnid == 0xd5ae37d8) {
    return "cellVoiceSetVolume";
  } else if (fnid == 0x0a563878) {
    return "cellVoiceStart";
  } else if (fnid == 0x94d51f92) {
    return "cellVoiceStartEx";
  } else if (fnid == 0xd3a84be1) {
    return "cellVoiceStop";
  } else if (fnid == 0x2f24fea3) {
    return "cellVoiceUpdatePort";
  } else if (fnid == 0x3dad26e7) {
    return "cellVoiceWriteToIPort";
  } else if (fnid == 0x30f0b5ab) {
    return "cellVoiceWriteToIPortEx";
  } else if (fnid == 0x10ef39f6) {
    return "cellVpostClose";
  } else if (fnid == 0xabb8cc3d) {
    return "cellVpostExec";
  } else if (fnid == 0xcd33f3e2) {
    return "cellVpostOpen";
  } else if (fnid == 0x40524325) {
    return "cellVpostOpenEx";
  } else if (fnid == 0x95e788c3) {
    return "cellVpostQueryAttr";
  } else if (fnid == 0xafa99ead) {
    return "cellGemCalibrate";
  } else if (fnid == 0x9b9714a4) {
    return "cellGemClearStatusFlags";
  } else if (fnid == 0x1a13d010) {
    return "cellGemConvertVideoFinish";
  } else if (fnid == 0x6dce048c) {
    return "cellGemConvertVideoStart";
  } else if (fnid == 0x4219de31) {
    return "cellGemEnableCameraPitchAngleCorrection";
  } else if (fnid == 0x1a2518a2) {
    return "cellGemEnableMagnetometer";
  } else if (fnid == 0xe1f85a80) {
    return "cellGemEnd";
  } else if (fnid == 0x6fc4c791) {
    return "cellGemFilterState";
  } else if (fnid == 0xce6d7791) {
    return "cellGemForceRGB";
  } else if (fnid == 0x6a5b7048) {
    return "cellGemGetAccelerometerPositionInDevice";
  } else if (fnid == 0x2d2c2764) {
    return "cellGemGetAllTrackableHues";
  } else if (fnid == 0x8befac67) {
    return "cellGemGetCameraState";
  } else if (fnid == 0x02eb41bb) {
    return "cellGemGetEnvironmentLightingColor";
  } else if (fnid == 0xb8ef56a6) {
    return "cellGemGetHuePixels";
  } else if (fnid == 0x92cc4b34) {
    return "cellGemGetImageState";
  } else if (fnid == 0xd37b127a) {
    return "cellGemGetInertialState";
  } else if (fnid == 0x9e1dff96) {
    return "cellGemGetInfo";
  } else if (fnid == 0x2e0a170d) {
    return "cellGemGetMemorySize";
  } else if (fnid == 0x1b30cc22) {
    return "cellGemGetRGB";
  } else if (fnid == 0x6db6b007) {
    return "cellGemGetRumble";
  } else if (fnid == 0x6441d38d) {
    return "cellGemGetState";
  } else if (fnid == 0xfee33481) {
    return "cellGemGetStatusFlags";
  } else if (fnid == 0x18ea899a) {
    return "cellGemGetTrackerHue";
  } else if (fnid == 0xc7622586) {
    return "cellGemHSVtoRGB";
  } else if (fnid == 0x13ea7c64) {
    return "cellGemInit";
  } else if (fnid == 0xe3e4f0d6) {
    return "cellGemInvalidateCalibration";
  } else if (fnid == 0xfb5887f9) {
    return "cellGemIsTrackableHue";
  } else if (fnid == 0xa03ef587) {
    return "cellGemPrepareCamera";
  } else if (fnid == 0xc07896f9) {
    return "cellGemPrepareVideoConvert";
  } else if (fnid == 0xde54e2fc) {
    return "cellGemReset";
  } else if (fnid == 0x49609306) {
    return "cellGemSetRumble";
  } else if (fnid == 0x77e08704) {
    return "cellGemSetYaw";
  } else if (fnid == 0x928ac5f8) {
    return "cellGemTrackHues";
  } else if (fnid == 0x41ae9c31) {
    return "cellGemUpdateFinish";
  } else if (fnid == 0x0ecd2261) {
    return "cellGemUpdateStart";
  } else if (fnid == 0x1f6328d8) {
    return "cellGemWriteExternalPort";
  } else if (fnid == 0xc324f60c) {
    return "cellMediatorCloseContext";
  } else if (fnid == 0x40ad67eb) {
    return "cellMediatorCreateContext";
  } else if (fnid == 0x5d4431f0) {
    return "cellMediatorFlushCache";
  } else if (fnid == 0x9d11991d) {
    return "cellMediatorGetProviderUrl";
  } else if (fnid == 0x4aecea24) {
    return "cellMediatorGetSignatureLength";
  } else if (fnid == 0xf7e4a50a) {
    return "cellMediatorGetStatus";
  } else if (fnid == 0x4d249136) {
    return "cellMediatorGetUserInfo";
  } else if (fnid == 0x85dc6981) {
    return "cellMediatorPostReports";
  } else if (fnid == 0xa14c6000) {
    return "cellMediatorReliablePostReports";
  } else if (fnid == 0x6b8f5cb9) {
    return "cellMediatorSign";
  } else if (fnid == 0x16698e83) {
    return "cellVdecClose";
  } else if (fnid == 0x2bf4ddd2) {
    return "cellVdecDecodeAu";
  } else if (fnid == 0x824433f0) {
    return "cellVdecEndSeq";
  } else if (fnid == 0x17c702b9) {
    return "cellVdecGetPicItem";
  } else if (fnid == 0x807c861a) {
    return "cellVdecGetPicture";
  } else if (fnid == 0xb6bbcd5d) {
    return "cellVdecOpen";
  } else if (fnid == 0x0053e2d8) {
    return "cellVdecOpenEx";
  } else if (fnid == 0xff6f6ebe) {
    return "cellVdecQueryAttr";
  } else if (fnid == 0xc982a84a) {
    return "cellVdecQueryAttrEx";
  } else if (fnid == 0xe13ef6fc) {
    return "cellVdecSetFrameRate";
  } else if (fnid == 0xc757c2aa) {
    return "cellVdecStartSeq";
  } else if (fnid == 0x816c6a5f) {
    return "_sceNpSysutilClientFree";
  } else if (fnid == 0xee0cc40c) {
    return "_sceNpSysutilClientMalloc";
  } else if (fnid == 0x48b3774f) {
    return "_Z27_sce_np_sysutil_recv_packetiRN4cxml8DocumentERNS_7ElementE";
  } else if (fnid == 0x25b8bd56) {
    return "_Z27_sce_np_sysutil_send_packetiRN4cxml8DocumentE";
  } else if (fnid == 0x9ba3e97f) {
    return "_Z29_sce_np_sysutil_cxml_set_npidRN4cxml8DocumentERNS_7ElementEPKcPK7SceNpId";
  } else if (fnid == 0xad12e5c9) {
    return "_Z31_sce_np_sysutil_send_packet_subiRN4cxml8DocumentE";
  } else if (fnid == 0xfd61dff5) {
    return "_Z32_sce_np_sysutil_cxml_prepare_docPN16sysutil_cxmlutil11FixedMemoryERN4cxml8DocumentEPKcRNS2_7ElementES6_i";
  } else if (fnid == 0x1fa740db) {
    return "_Z33_sce_np_sysutil_send_empty_packetiPN16sysutil_cxmlutil11FixedMemoryEPKcS3_";
  } else if (fnid == 0x2c5ad7b4) {
    return "_Z36_sce_np_sysutil_recv_packet_fixedmemiPN16sysutil_cxmlutil11FixedMemoryERN4cxml8DocumentERNS2_7ElementE";
  } else if (fnid == 0xadcc5ada) {
    return "_Z37sce_np_matching_set_matching2_runningb";
  } else if (fnid == 0x4299a92c) {
    return "_Z40_sce_np_sysutil_recv_packet_fixedmem_subiPN16sysutil_cxmlutil11FixedMemoryERN4cxml8DocumentERNS2_7ElementE";
  } else if (fnid == 0x481ce0e8) {
    return "sceNpBasicAbortGui";
  } else if (fnid == 0x1ae8a549) {
    return "sceNpBasicAddBlockListEntry";
  } else if (fnid == 0x27c69eba) {
    return "sceNpBasicAddFriend";
  } else if (fnid == 0x168a3117) {
    return "sceNpBasicAddPlayersHistory";
  } else if (fnid == 0xbcdbb2ab) {
    return "sceNpBasicAddPlayersHistoryAsync";
  } else if (fnid == 0xf2b3338a) {
    return "sceNpBasicGetBlockListEntry";
  } else if (fnid == 0x73931bd0) {
    return "sceNpBasicGetBlockListEntryCount";
  } else if (fnid == 0x4d9c615d) {
    return "sceNpBasicGetClanMessageEntry";
  } else if (fnid == 0xbf607ec6) {
    return "sceNpBasicGetClanMessageEntryCount";
  } else if (fnid == 0xd053f113) {
    return "sceNpBasicGetCustomInvitationEntry";
  } else if (fnid == 0xa8afa7d4) {
    return "sceNpBasicGetCustomInvitationEntryCount";
  } else if (fnid == 0xe035f7d6) {
    return "sceNpBasicGetEvent";
  } else if (fnid == 0x04372385) {
    return "sceNpBasicGetFriendListEntry";
  } else if (fnid == 0xafef640d) {
    return "sceNpBasicGetFriendListEntryCount";
  } else if (fnid == 0x32c78a6a) {
    return "sceNpBasicGetFriendPresenceByIndex";
  } else if (fnid == 0x6453b27b) {
    return "sceNpBasicGetFriendPresenceByIndex2";
  } else if (fnid == 0xfd39ae13) {
    return "sceNpBasicGetFriendPresenceByNpId";
  } else if (fnid == 0x260caedd) {
    return "sceNpBasicGetFriendPresenceByNpId2";
  } else if (fnid == 0x05af1cb8) {
    return "sceNpBasicGetMatchingInvitationEntry";
  } else if (fnid == 0xaf505def) {
    return "sceNpBasicGetMatchingInvitationEntryCount";
  } else if (fnid == 0x5d543bbe) {
    return "sceNpBasicGetMessageAttachmentEntry";
  } else if (fnid == 0x9153bdf4) {
    return "sceNpBasicGetMessageAttachmentEntryCount";
  } else if (fnid == 0x30d1cbde) {
    return "sceNpBasicGetMessageEntry";
  } else if (fnid == 0xecd503de) {
    return "sceNpBasicGetMessageEntryCount";
  } else if (fnid == 0xbab91fc9) {
    return "sceNpBasicGetPlayersHistoryEntry";
  } else if (fnid == 0xa15f35fe) {
    return "sceNpBasicGetPlayersHistoryEntryCount";
  } else if (fnid == 0xe1c9f675) {
    return "sceNpBasicMarkMessageAsUsed";
  } else if (fnid == 0xb5cb2d56) {
    return "sceNpBasicRecvMessageAttachment";
  } else if (fnid == 0x64a704cc) {
    return "sceNpBasicRecvMessageAttachmentLoad";
  } else if (fnid == 0x806960ab) {
    return "sceNpBasicRecvMessageCustom";
  } else if (fnid == 0x4026eac5) {
    return "sceNpBasicRegisterContextSensitiveHandler";
  } else if (fnid == 0xbcc09fe7) {
    return "sceNpBasicRegisterHandler";
  } else if (fnid == 0xec0a1fbf) {
    return "sceNpBasicSendMessage";
  } else if (fnid == 0x43b989f5) {
    return "sceNpBasicSendMessageAttachment";
  } else if (fnid == 0x01fbbc9b) {
    return "sceNpBasicSendMessageGui";
  } else if (fnid == 0x3f0808aa) {
    return "sceNpBasicSetPresence";
  } else if (fnid == 0xbe81c71c) {
    return "sceNpBasicSetPresenceDetails";
  } else if (fnid == 0x5e849303) {
    return "sceNpBasicSetPresenceDetails2";
  } else if (fnid == 0xacb9ee8e) {
    return "sceNpBasicUnregisterHandler";
  } else if (fnid == 0xfcac355a) {
    return "sceNpCommerceCreateCtx";
  } else if (fnid == 0xe2877bea) {
    return "sceNpCommerceDestroyCtx";
  } else if (fnid == 0x6cb81eb2) {
    return "sceNpCommerceDestroyProductCategory";
  } else if (fnid == 0xaf3eba5a) {
    return "sceNpCommerceDoCheckoutFinishAsync";
  } else if (fnid == 0xe36c660e) {
    return "sceNpCommerceDoCheckoutStartAsync";
  } else if (fnid == 0x359642a6) {
    return "sceNpCommerceGetCategoryDescription";
  } else if (fnid == 0xaee8cf71) {
    return "sceNpCommerceGetCategoryId";
  } else if (fnid == 0x9452f4f8) {
    return "sceNpCommerceGetCategoryImageURL";
  } else if (fnid == 0xeb9df054) {
    return "sceNpCommerceGetCategoryInfo";
  } else if (fnid == 0x6e2ab18b) {
    return "sceNpCommerceGetCategoryName";
  } else if (fnid == 0xba65de6d) {
    return "sceNpCommerceGetChildCategoryInfo";
  } else if (fnid == 0x01cd9cfd) {
    return "sceNpCommerceGetChildProductSkuInfo";
  } else if (fnid == 0x79225aa3) {
    return "sceNpCommerceGetCurrencyCode";
  } else if (fnid == 0xaf57d9c9) {
    return "sceNpCommerceGetCurrencyDecimals";
  } else if (fnid == 0xb1c02d66) {
    return "sceNpCommerceGetCurrencyInfo";
  } else if (fnid == 0x0561448b) {
    return "sceNpCommerceGetDataFlagAbort";
  } else if (fnid == 0x9281e87a) {
    return "sceNpCommerceGetDataFlagFinish";
  } else if (fnid == 0xdbdb909f) {
    return "sceNpCommerceGetDataFlagStart";
  } else if (fnid == 0xd03cea35) {
    return "sceNpCommerceGetDataFlagState";
  } else if (fnid == 0x2be41ece) {
    return "sceNpCommerceGetNumOfChildCategory";
  } else if (fnid == 0x7208dc08) {
    return "sceNpCommerceGetNumOfChildProductSku";
  } else if (fnid == 0x674bb9ff) {
    return "sceNpCommerceGetProductCategoryAbort";
  } else if (fnid == 0xcfd469e4) {
    return "sceNpCommerceGetProductCategoryFinish";
  } else if (fnid == 0x3f195b3a) {
    return "sceNpCommerceGetProductCategoryResult";
  } else if (fnid == 0x26f33146) {
    return "sceNpCommerceGetProductCategoryStart";
  } else if (fnid == 0x936df4aa) {
    return "sceNpCommerceGetProductId";
  } else if (fnid == 0xeb5f2544) {
    return "sceNpCommerceGetProductName";
  } else if (fnid == 0xa85a4951) {
    return "sceNpCommerceGetSkuDescription";
  } else if (fnid == 0x39a69619) {
    return "sceNpCommerceGetSkuId";
  } else if (fnid == 0xccbe2e69) {
    return "sceNpCommerceGetSkuImageURL";
  } else if (fnid == 0xee530059) {
    return "sceNpCommerceGetSkuName";
  } else if (fnid == 0x78d7f9ad) {
    return "sceNpCommerceGetSkuPrice";
  } else if (fnid == 0x1a3fcb69) {
    return "sceNpCommerceGetSkuUserData";
  } else if (fnid == 0x8d1d096c) {
    return "sceNpCommerceInitProductCategory";
  } else if (fnid == 0x8d4518a0) {
    return "sceNpCommerceSetDataFlagFinish";
  } else if (fnid == 0x99ac9952) {
    return "sceNpCommerceSetDataFlagStart";
  } else if (fnid == 0xf9732ac8) {
    return "sceNpCustomMenuActionSetActivation";
  } else if (fnid == 0x45f8f3aa) {
    return "sceNpCustomMenuRegisterActions";
  } else if (fnid == 0x9458f464) {
    return "sceNpCustomMenuRegisterExceptionList";
  } else if (fnid == 0xf283c143) {
    return "sceNpDrmExecuteGamePurchase";
  } else if (fnid == 0xcf51864b) {
    return "sceNpDrmGetTimelimit";
  } else if (fnid == 0xad218faf) {
    return "sceNpDrmIsAvailable";
  } else if (fnid == 0xf042b14f) {
    return "sceNpDrmIsAvailable2";
  } else if (fnid == 0xaa16695f) {
    return "sceNpDrmProcessExitSpawn";
  } else if (fnid == 0xe6c8f3f9) {
    return "sceNpDrmProcessExitSpawn2";
  } else if (fnid == 0x2ecd48ed) {
    return "sceNpDrmVerifyUpgradeLicense";
  } else if (fnid == 0xbe0e3ee2) {
    return "sceNpDrmVerifyUpgradeLicense2";
  } else if (fnid == 0xf0a9182b) {
    return "sceNpFriendlist";
  } else if (fnid == 0xf59e1da8) {
    return "sceNpFriendlistAbortGui";
  } else if (fnid == 0xd7fb1fa6) {
    return "sceNpFriendlistCustom";
  } else if (fnid == 0xbd28fdbf) {
    return "sceNpInit";
  } else if (fnid == 0x3d1760dc) {
    return "sceNpLookupAbortTransaction";
  } else if (fnid == 0xb6017827) {
    return "sceNpLookupAvatarImage";
  } else if (fnid == 0xbf9eea93) {
    return "sceNpLookupAvatarImageAsync";
  } else if (fnid == 0xce81c7f0) {
    return "sceNpLookupCreateTitleCtx";
  } else if (fnid == 0xea2e9ffc) {
    return "sceNpLookupCreateTransactionCtx";
  } else if (fnid == 0x5de61626) {
    return "sceNpLookupDestroyTitleCtx";
  } else if (fnid == 0xfb87cf5e) {
    return "sceNpLookupDestroyTransactionCtx";
  } else if (fnid == 0x5f2d9257) {
    return "sceNpLookupInit";
  } else if (fnid == 0x166dcc11) {
    return "sceNpLookupNpId";
  } else if (fnid == 0xd12e40ae) {
    return "sceNpLookupNpIdAsync";
  } else if (fnid == 0x7508112e) {
    return "sceNpLookupPollAsync";
  } else if (fnid == 0x71e5af7e) {
    return "sceNpLookupSetTimeout";
  } else if (fnid == 0x8440537c) {
    return "sceNpLookupTerm";
  } else if (fnid == 0xca39c4b2) {
    return "sceNpLookupTitleSmallStorage";
  } else if (fnid == 0x860b1756) {
    return "sceNpLookupTitleSmallStorageAsync";
  } else if (fnid == 0x9ee9f97e) {
    return "sceNpLookupTitleStorage";
  } else if (fnid == 0x5e117ed5) {
    return "sceNpLookupTitleStorageAsync";
  } else if (fnid == 0xdfd63b62) {
    return "sceNpLookupUserProfile";
  } else if (fnid == 0xff0a2378) {
    return "sceNpLookupUserProfileAsync";
  } else if (fnid == 0x2fccbfe0) {
    return "sceNpLookupUserProfileWithAvatarSize";
  } else if (fnid == 0x1fdb3ec2) {
    return "sceNpLookupUserProfileWithAvatarSizeAsync";
  } else if (fnid == 0xd737fd2d) {
    return "sceNpLookupWaitAsync";
  } else if (fnid == 0x168fcece) {
    return "sceNpManagerGetAccountAge";
  } else if (fnid == 0xb1e0718b) {
    return "sceNpManagerGetAccountRegion";
  } else if (fnid == 0x36d0c2c5) {
    return "sceNpManagerGetAvatarUrl";
  } else if (fnid == 0x4b9efb7a) {
    return "sceNpManagerGetCachedInfo";
  } else if (fnid == 0xeb7a3d84) {
    return "sceNpManagerGetChatRestrictionFlag";
  } else if (fnid == 0x6ee62ed2) {
    return "sceNpManagerGetContentRatingFlag";
  } else if (fnid == 0xa1709abd) {
    return "sceNpManagerGetEntitlementById";
  } else if (fnid == 0xb66d1c46) {
    return "sceNpManagerGetEntitlementIdList";
  } else if (fnid == 0x32200389) {
    return "sceNpManagerGetMyLanguages";
  } else if (fnid == 0xbdc07fd5) {
    return "sceNpManagerGetNetworkTime";
  } else if (fnid == 0xfe37a7f4) {
    return "sceNpManagerGetNpId";
  } else if (fnid == 0xbe07c708) {
    return "sceNpManagerGetOnlineId";
  } else if (fnid == 0xf42c0df8) {
    return "sceNpManagerGetOnlineName";
  } else if (fnid == 0x16f88a6f) {
    return "sceNpManagerGetPsHandle";
  } else if (fnid == 0xa7bff757) {
    return "sceNpManagerGetStatus";
  } else if (fnid == 0x0968aa36) {
    return "sceNpManagerGetTicket";
  } else if (fnid == 0x58fa4fcd) {
    return "sceNpManagerGetTicketParam";
  } else if (fnid == 0xe7dcd3b4) {
    return "sceNpManagerRegisterCallback";
  } else if (fnid == 0x7e2fef28) {
    return "sceNpManagerRequestTicket";
  } else if (fnid == 0x8297f1ec) {
    return "sceNpManagerRequestTicket2";
  } else if (fnid == 0x442381f7) {
    return "sceNpManagerSubSignin";
  } else if (fnid == 0x60440c73) {
    return "sceNpManagerSubSigninAbortGui";
  } else if (fnid == 0x000e53cc) {
    return "sceNpManagerSubSignout";
  } else if (fnid == 0x52a6b523) {
    return "sceNpManagerUnregisterCallback";
  } else if (fnid == 0x2ad7837d) {
    return "sceNpMatchingAcceptInvitationGUI";
  } else if (fnid == 0xac66568c) {
    return "sceNpMatchingCreateCtx";
  } else if (fnid == 0x3cc8588a) {
    return "sceNpMatchingCreateRoomGUI";
  } else if (fnid == 0x2e1c5068) {
    return "sceNpMatchingDestroyCtx";
  } else if (fnid == 0x03c741a7) {
    return "sceNpMatchingGetResult";
  } else if (fnid == 0x26b3bc94) {
    return "sceNpMatchingGetResultGUI";
  } else if (fnid == 0x691f429d) {
    return "sceNpMatchingGetRoomInfo";
  } else if (fnid == 0xb020684e) {
    return "sceNpMatchingGetRoomInfoNoLimit";
  } else if (fnid == 0xe24eea19) {
    return "sceNpMatchingGetRoomListLimitGUI";
  } else if (fnid == 0x73a2e36b) {
    return "sceNpMatchingGetRoomMemberListLocal";
  } else if (fnid == 0xee64cf8e) {
    return "sceNpMatchingGetRoomSearchFlag";
  } else if (fnid == 0xdae2d351) {
    return "sceNpMatchingGrantOwnership";
  } else if (fnid == 0x474b7b13) {
    return "sceNpMatchingJoinRoomGUI";
  } else if (fnid == 0x34cc0ca4) {
    return "sceNpMatchingKickRoomMember";
  } else if (fnid == 0xd20d7798) {
    return "sceNpMatchingKickRoomMemberWithOpt";
  } else if (fnid == 0xf806c54c) {
    return "sceNpMatchingLeaveRoom";
  } else if (fnid == 0x14497465) {
    return "sceNpMatchingQuickMatchGUI";
  } else if (fnid == 0x32febb4c) {
    return "sceNpMatchingSearchJoinRoomGUI";
  } else if (fnid == 0x8b7bbd73) {
    return "sceNpMatchingSendInvitationGUI";
  } else if (fnid == 0x6f8fd267) {
    return "sceNpMatchingSetRoomInfo";
  } else if (fnid == 0x4a18a89e) {
    return "sceNpMatchingSetRoomInfoNoLimit";
  } else if (fnid == 0xa284bd1d) {
    return "sceNpMatchingSetRoomSearchFlag";
  } else if (fnid == 0x2f2c6b3e) {
    return "sceNpProfileAbortGui";
  } else if (fnid == 0xceeebc7a) {
    return "sceNpProfileCallGui";
  } else if (fnid == 0xee5b20d9) {
    return "sceNpScoreAbortTransaction";
  } else if (fnid == 0x7deb244c) {
    return "sceNpScoreCensorComment";
  } else if (fnid == 0x7be47e61) {
    return "sceNpScoreCensorCommentAsync";
  } else if (fnid == 0xb9f93bbb) {
    return "sceNpScoreCreateTitleCtx";
  } else if (fnid == 0x6f5e8143) {
    return "sceNpScoreCreateTransactionCtx";
  } else if (fnid == 0x259113b8) {
    return "sceNpScoreDestroyTitleCtx";
  } else if (fnid == 0xc5f4cf82) {
    return "sceNpScoreDestroyTransactionCtx";
  } else if (fnid == 0xf4e0f607) {
    return "sceNpScoreGetBoardInfo";
  } else if (fnid == 0xddce7d15) {
    return "sceNpScoreGetBoardInfoAsync";
  } else if (fnid == 0x741fbf24) {
    return "sceNpScoreGetClanMemberGameData";
  } else if (fnid == 0xbef887e5) {
    return "sceNpScoreGetClanMemberGameDataAsync";
  } else if (fnid == 0xded17c26) {
    return "sceNpScoreGetClansMembersRankingByNpId";
  } else if (fnid == 0xe8a67160) {
    return "sceNpScoreGetClansMembersRankingByNpIdAsync";
  } else if (fnid == 0x41ffd4f2) {
    return "sceNpScoreGetClansMembersRankingByNpIdPcId";
  } else if (fnid == 0x433fcb30) {
    return "sceNpScoreGetClansMembersRankingByNpIdPcIdAsync";
  } else if (fnid == 0x6d4adc3b) {
    return "sceNpScoreGetClansMembersRankingByRange";
  } else if (fnid == 0x4d5e0670) {
    return "sceNpScoreGetClansMembersRankingByRangeAsync";
  } else if (fnid == 0x2a76895a) {
    return "sceNpScoreGetClansRankingByClanId";
  } else if (fnid == 0x227f8763) {
    return "sceNpScoreGetClansRankingByClanIdAsync";
  } else if (fnid == 0xb082003b) {
    return "sceNpScoreGetClansRankingByRange";
  } else if (fnid == 0x7b7e9137) {
    return "sceNpScoreGetClansRankingByRangeAsync";
  } else if (fnid == 0x3b02418d) {
    return "sceNpScoreGetGameData";
  } else if (fnid == 0xdb2e4dc2) {
    return "sceNpScoreGetGameDataAsync";
  } else if (fnid == 0x05d65dff) {
    return "sceNpScoreGetRankingByNpId";
  } else if (fnid == 0x3db7914d) {
    return "sceNpScoreGetRankingByNpIdAsync";
  } else if (fnid == 0xc3a991ee) {
    return "sceNpScoreGetRankingByNpIdPcId";
  } else if (fnid == 0xc4b6cd8f) {
    return "sceNpScoreGetRankingByNpIdPcIdAsync";
  } else if (fnid == 0xfbc82301) {
    return "sceNpScoreGetRankingByRange";
  } else if (fnid == 0x21206642) {
    return "sceNpScoreGetRankingByRangeAsync";
  } else if (fnid == 0x32cf311f) {
    return "sceNpScoreInit";
  } else if (fnid == 0xa7a090e5) {
    return "sceNpScorePollAsync";
  } else if (fnid == 0x04ca5e6a) {
    return "sceNpScoreRecordGameData";
  } else if (fnid == 0xf76847c2) {
    return "sceNpScoreRecordGameDataAsync";
  } else if (fnid == 0x1672170e) {
    return "sceNpScoreRecordScore";
  } else if (fnid == 0xf0b1e399) {
    return "sceNpScoreRecordScoreAsync";
  } else if (fnid == 0xf1b77918) {
    return "sceNpScoreSanitizeComment";
  } else if (fnid == 0x2cd2a1af) {
    return "sceNpScoreSanitizeCommentAsync";
  } else if (fnid == 0x2706eaa1) {
    return "sceNpScoreSetPlayerCharacterId";
  } else if (fnid == 0x29dd45dc) {
    return "sceNpScoreSetTimeout";
  } else if (fnid == 0x9851f805) {
    return "sceNpScoreTerm";
  } else if (fnid == 0x1a2704f7) {
    return "sceNpScoreWaitAsync";
  } else if (fnid == 0x60897c38) {
    return "sceNpSignalingActivateConnection";
  } else if (fnid == 0x50b86d94) {
    return "sceNpSignalingAddExtendedHandler";
  } else if (fnid == 0x64dbb89d) {
    return "sceNpSignalingCancelPeerNetInfo";
  } else if (fnid == 0x6356082e) {
    return "sceNpSignalingCreateCtx";
  } else if (fnid == 0xfd0eb5ae) {
    return "sceNpSignalingDeactivateConnection";
  } else if (fnid == 0xa8cf8451) {
    return "sceNpSignalingDestroyCtx";
  } else if (fnid == 0xe853d388) {
    return "sceNpSignalingGetConnectionFromNpId";
  } else if (fnid == 0x34ce82a0) {
    return "sceNpSignalingGetConnectionFromPeerAddress";
  } else if (fnid == 0x155de760) {
    return "sceNpSignalingGetConnectionInfo";
  } else if (fnid == 0xca0a2d04) {
    return "sceNpSignalingGetConnectionStatus";
  } else if (fnid == 0x2687a127) {
    return "sceNpSignalingGetCtxOpt";
  } else if (fnid == 0x9ad7fbd1) {
    return "sceNpSignalingGetLocalNetInfo";
  } else if (fnid == 0x75eb50cb) {
    return "sceNpSignalingGetPeerNetInfo";
  } else if (fnid == 0xd0958814) {
    return "sceNpSignalingGetPeerNetInfoResult";
  } else if (fnid == 0x276c72b2) {
    return "sceNpSignalingSetCtxOpt";
  } else if (fnid == 0x95c7bba3) {
    return "sceNpSignalingTerminateConnection";
  } else if (fnid == 0x4885aa18) {
    return "sceNpTerm";
  } else if (fnid == 0xd208f91d) {
    return "sceNpUtilCmpNpId";
  } else if (fnid == 0xf5ff5f31) {
    return "sceNpUtilCmpNpIdInOrder";
  } else if (fnid == 0x41251f74) {
    return "sceNp2Init";
  } else if (fnid == 0xaadb7c12) {
    return "sceNp2Term";
  } else if (fnid == 0x430ce063) {
    return "sceNpMatching2AbortContextStart";
  } else if (fnid == 0x2ed909dc) {
    return "sceNpMatching2AbortRequest";
  } else if (fnid == 0xaa6c2c43) {
    return "sceNpMatching2ClearEventData";
  } else if (fnid == 0x12d0b0f9) {
    return "sceNpMatching2ContextStart";
  } else if (fnid == 0x6ba4c668) {
    return "sceNpMatching2ContextStartAsync";
  } else if (fnid == 0xf43c647a) {
    return "sceNpMatching2ContextStop";
  } else if (fnid == 0x9cbce3f2) {
    return "sceNpMatching2CreateContext";
  } else if (fnid == 0xe7a3bc7a) {
    return "sceNpMatching2CreateJoinRoom";
  } else if (fnid == 0x16b3e5a4) {
    return "sceNpMatching2CreateServerContext";
  } else if (fnid == 0xc6b63b7e) {
    return "sceNpMatching2DeleteServerContext";
  } else if (fnid == 0x01379fd7) {
    return "sceNpMatching2DestroyContext";
  } else if (fnid == 0x62d446ac) {
    return "sceNpMatching2GetCbQueueInfo";
  } else if (fnid == 0x12034412) {
    return "sceNpMatching2GetClanLobbyId";
  } else if (fnid == 0x3c00c9d4) {
    return "sceNpMatching2GetEventData";
  } else if (fnid == 0xefbd9357) {
    return "sceNpMatching2GetLobbyInfoList";
  } else if (fnid == 0x129663d0) {
    return "sceNpMatching2GetLobbyMemberDataInternal";
  } else if (fnid == 0x0b2218a3) {
    return "sceNpMatching2GetLobbyMemberDataInternalList";
  } else if (fnid == 0xeffe5a16) {
    return "sceNpMatching2GetLobbyMemberIdListLocal";
  } else if (fnid == 0x196a06f9) {
    return "sceNpMatching2GetMemoryInfo";
  } else if (fnid == 0xe4ac32ca) {
    return "sceNpMatching2GetRoomDataExternalList";
  } else if (fnid == 0x8b209ca2) {
    return "sceNpMatching2GetRoomDataInternal";
  } else if (fnid == 0x2c5b7fc9) {
    return "sceNpMatching2GetRoomMemberDataExternalList";
  } else if (fnid == 0xb0c51412) {
    return "sceNpMatching2GetRoomMemberDataInternal";
  } else if (fnid == 0x58a04247) {
    return "sceNpMatching2GetRoomMemberDataInternalLocal";
  } else if (fnid == 0x490124fd) {
    return "sceNpMatching2GetRoomMemberIdListLocal";
  } else if (fnid == 0xde6d308b) {
    return "sceNpMatching2GetRoomPasswordLocal";
  } else if (fnid == 0x3cc27344) {
    return "sceNpMatching2GetRoomSlotInfoLocal";
  } else if (fnid == 0x8e5cfe9f) {
    return "sceNpMatching2GetServerIdListLocal";
  } else if (fnid == 0x3457c0db) {
    return "sceNpMatching2GetServerInfo";
  } else if (fnid == 0xa2b01449) {
    return "sceNpMatching2GetSignalingOptParamLocal";
  } else if (fnid == 0xac98b03a) {
    return "sceNpMatching2GetUserInfoList";
  } else if (fnid == 0x05bf2fbd) {
    return "sceNpMatching2GetWorldInfoList";
  } else if (fnid == 0x9344d41f) {
    return "sceNpMatching2GrantRoomOwner";
  } else if (fnid == 0x3f62c759) {
    return "sceNpMatching2Init";
  } else if (fnid == 0xf4babd3f) {
    return "sceNpMatching2Init2";
  } else if (fnid == 0x29e78389) {
    return "sceNpMatching2JoinLobby";
  } else if (fnid == 0xba578d19) {
    return "sceNpMatching2JoinProhibitiveRoom";
  } else if (fnid == 0x5721e711) {
    return "sceNpMatching2JoinRoom";
  } else if (fnid == 0x66f19527) {
    return "sceNpMatching2KickoutRoomMember";
  } else if (fnid == 0x02065e3d) {
    return "sceNpMatching2LeaveLobby";
  } else if (fnid == 0x1f372697) {
    return "sceNpMatching2LeaveRoom";
  } else if (fnid == 0x748029a2) {
    return "sceNpMatching2RegisterContextCallback";
  } else if (fnid == 0x0884fc95) {
    return "sceNpMatching2RegisterLobbyEventCallback";
  } else if (fnid == 0x03a2f42a) {
    return "sceNpMatching2RegisterLobbyMessageCallback";
  } else if (fnid == 0xdcb6b27d) {
    return "sceNpMatching2RegisterRoomEventCallback";
  } else if (fnid == 0xfee11e72) {
    return "sceNpMatching2RegisterRoomMessageCallback";
  } else if (fnid == 0xa9e6103e) {
    return "sceNpMatching2RegisterSignalingCallback";
  } else if (fnid == 0x0d22867f) {
    return "sceNpMatching2SearchRoom";
  } else if (fnid == 0x3f3bd413) {
    return "sceNpMatching2SendLobbyChatMessage";
  } else if (fnid == 0xefff8779) {
    return "sceNpMatching2SendLobbyInvitation";
  } else if (fnid == 0x7bf6e152) {
    return "sceNpMatching2SendRoomChatMessage";
  } else if (fnid == 0x28cad8b3) {
    return "sceNpMatching2SendRoomMessage";
  } else if (fnid == 0xdb87b088) {
    return "sceNpMatching2SetDefaultRequestOptParam";
  } else if (fnid == 0xfa0583c6) {
    return "sceNpMatching2SetLobbyMemberDataInternal";
  } else if (fnid == 0x215b0d75) {
    return "sceNpMatching2SetRoomDataExternal";
  } else if (fnid == 0x817d1090) {
    return "sceNpMatching2SetRoomDataInternal";
  } else if (fnid == 0xb851aacf) {
    return "sceNpMatching2SetRoomMemberDataInternal";
  } else if (fnid == 0x6fcd84c1) {
    return "sceNpMatching2SetSignalingOptParam";
  } else if (fnid == 0x1022e6d6) {
    return "sceNpMatching2SetUserInfo";
  } else if (fnid == 0x26ae9ff8) {
    return "sceNpMatching2SignalingGetConnectionInfo";
  } else if (fnid == 0x0ebe4c6b) {
    return "sceNpMatching2SignalingGetConnectionStatus";
  } else if (fnid == 0xe9946648) {
    return "sceNpMatching2SignalingGetCtxOpt";
  } else if (fnid == 0x8d3f8d49) {
    return "sceNpMatching2SignalingGetPingInfo";
  } else if (fnid == 0xbf014813) {
    return "sceNpMatching2SignalingSetCtxOpt";
  } else if (fnid == 0x2fe0da7d) {
    return "sceNpMatching2Term";
  } else if (fnid == 0x23009d07) {
    return "sceNpMatching2Term2";
  } else if (fnid == 0x8e930999) {
    return "sceNpUtilBuildCdnUrl";
  } else if (fnid == 0xe82969e2) {
    return "sceNpClansAbortRequest";
  } else if (fnid == 0x4d06aef7) {
    return "sceNpClansAddBlacklistEntry";
  } else if (fnid == 0x726dffd5) {
    return "sceNpClansCancelInvitation";
  } else if (fnid == 0x299ccc9b) {
    return "sceNpClansCancelMembershipRequest";
  } else if (fnid == 0x9cac2085) {
    return "sceNpClansChangeMemberRole";
  } else if (fnid == 0xa6a31a38) {
    return "sceNpClansCreateClan";
  } else if (fnid == 0x9a72232d) {
    return "sceNpClansCreateRequest";
  } else if (fnid == 0xd6551cd1) {
    return "sceNpClansDestroyRequest";
  } else if (fnid == 0x4826f6d5) {
    return "sceNpClansDisbandClan";
  } else if (fnid == 0x38dadf1f) {
    return "sceNpClansGetAutoAcceptStatus";
  } else if (fnid == 0x56bc5a7c) {
    return "sceNpClansGetBlacklist";
  } else if (fnid == 0x487de998) {
    return "sceNpClansGetClanInfo";
  } else if (fnid == 0xca4181b4) {
    return "sceNpClansGetClanList";
  } else if (fnid == 0x672399a8) {
    return "sceNpClansGetClanListByNpId";
  } else if (fnid == 0x20472da0) {
    return "sceNpClansGetMemberInfo";
  } else if (fnid == 0x856ff5c0) {
    return "sceNpClansGetMemberList";
  } else if (fnid == 0x9b820047) {
    return "sceNpClansInit";
  } else if (fnid == 0xdbf300ca) {
    return "sceNpClansJoinClan";
  } else if (fnid == 0xaa7912b5) {
    return "sceNpClansKickMember";
  } else if (fnid == 0x560f717b) {
    return "sceNpClansLeaveClan";
  } else if (fnid == 0xada45b84) {
    return "sceNpClansPostAnnouncement";
  } else if (fnid == 0x83d65529) {
    return "sceNpClansPostChallenge";
  } else if (fnid == 0xe2590f60) {
    return "sceNpClansRemoveAnnouncement";
  } else if (fnid == 0x5bff9da1) {
    return "sceNpClansRemoveBlacklistEntry";
  } else if (fnid == 0xce6dc0f0) {
    return "sceNpClansRemoveChallenge";
  } else if (fnid == 0xd3346dc4) {
    return "sceNpClansRemovePostedChallenge";
  } else if (fnid == 0x727aa7f8) {
    return "sceNpClansRetrieveAnnouncements";
  } else if (fnid == 0x0df25834) {
    return "sceNpClansRetrieveChallenges";
  } else if (fnid == 0x8e785b97) {
    return "sceNpClansRetrievePostedChallenges";
  } else if (fnid == 0xace0cfba) {
    return "sceNpClansSearchByName";
  } else if (fnid == 0x1221a1bf) {
    return "sceNpClansSearchByProfile";
  } else if (fnid == 0xbc05ef31) {
    return "sceNpClansSendInvitation";
  } else if (fnid == 0x095e12c6) {
    return "sceNpClansSendInvitationResponse";
  } else if (fnid == 0x59743b2b) {
    return "sceNpClansSendMembershipRequest";
  } else if (fnid == 0x942dbdc4) {
    return "sceNpClansSendMembershipResponse";
  } else if (fnid == 0x42332cb7) {
    return "sceNpClansTerm";
  } else if (fnid == 0x5da94854) {
    return "sceNpClansUpdateAutoAcceptStatus";
  } else if (fnid == 0x09f9e1a9) {
    return "sceNpClansUpdateClanInfo";
  } else if (fnid == 0xf4a2d52b) {
    return "sceNpClansUpdateMemberInfo";
  } else if (fnid == 0x8df0057f) {
    return "sceNpCommerce2AbortReq";
  } else if (fnid == 0xd9fdcec2) {
    return "sceNpCommerce2CreateCtx";
  } else if (fnid == 0x62023e98) {
    return "sceNpCommerce2CreateSessionAbort";
  } else if (fnid == 0x91f8843d) {
    return "sceNpCommerce2CreateSessionFinish";
  } else if (fnid == 0xcc18cd2c) {
    return "sceNpCommerce2CreateSessionStart";
  } else if (fnid == 0x6f67ea80) {
    return "sceNpCommerce2DestroyCtx";
  } else if (fnid == 0x9d9cb96b) {
    return "sceNpCommerce2DestroyGetCategoryContentsResult";
  } else if (fnid == 0xf6139b58) {
    return "sceNpCommerce2DestroyGetProductInfoListResult";
  } else if (fnid == 0xef8eafcd) {
    return "sceNpCommerce2DestroyGetProductInfoResult";
  } else if (fnid == 0x2a910f05) {
    return "sceNpCommerce2DestroyReq";
  } else if (fnid == 0xd43a130e) {
    return "sceNpCommerce2DoCheckoutFinishAsync";
  } else if (fnid == 0x104551a6) {
    return "sceNpCommerce2DoCheckoutStartAsync";
  } else if (fnid == 0x410d42be) {
    return "sceNpCommerce2DoDlListFinishAsync";
  } else if (fnid == 0x6ca9efd4) {
    return "sceNpCommerce2DoDlListStartAsync";
  } else if (fnid == 0xb23e3bd1) {
    return "sceNpCommerce2DoProductBrowseFinishAsync";
  } else if (fnid == 0x9825a0fc) {
    return "sceNpCommerce2DoProductBrowseStartAsync";
  } else if (fnid == 0xa9f945b3) {
    return "sceNpCommerce2DoProductCodeFinishAsync";
  } else if (fnid == 0xde7ab33d) {
    return "sceNpCommerce2DoProductCodeStartAsync";
  } else if (fnid == 0xeef51be0) {
    return "sceNpCommerce2ExecuteStoreBrowse";
  } else if (fnid == 0x3d627d81) {
    return "sceNpCommerce2GetBGDLAvailability";
  } else if (fnid == 0x7370d8d0) {
    return "sceNpCommerce2GetCategoryContentsCreateReq";
  } else if (fnid == 0xca0ea996) {
    return "sceNpCommerce2GetCategoryContentsGetResult";
  } else if (fnid == 0x371a2edd) {
    return "sceNpCommerce2GetCategoryContentsStart";
  } else if (fnid == 0xbd49eab2) {
    return "sceNpCommerce2GetCategoryInfo";
  } else if (fnid == 0xfc216890) {
    return "sceNpCommerce2GetCategoryInfoFromContentInfo";
  } else if (fnid == 0x972ab46c) {
    return "sceNpCommerce2GetContentInfo";
  } else if (fnid == 0x150fdca3) {
    return "sceNpCommerce2GetContentRatingDescriptor";
  } else if (fnid == 0xac78c1f3) {
    return "sceNpCommerce2GetContentRatingInfoFromCategoryInfo";
  } else if (fnid == 0xec324c8f) {
    return "sceNpCommerce2GetContentRatingInfoFromGameProductInfo";
  } else if (fnid == 0xef645654) {
    return "sceNpCommerce2GetGameProductInfo";
  } else if (fnid == 0xe51a4944) {
    return "sceNpCommerce2GetGameProductInfoFromContentInfo";
  } else if (fnid == 0xd9956ce7) {
    return "sceNpCommerce2GetGameProductInfoFromGetProductInfoListResult";
  } else if (fnid == 0xdb19194c) {
    return "sceNpCommerce2GetGameSkuInfoFromGameProductInfo";
  } else if (fnid == 0xda8e322d) {
    return "sceNpCommerce2GetPrice";
  } else if (fnid == 0xa975ebb4) {
    return "sceNpCommerce2GetProductInfoCreateReq";
  } else if (fnid == 0xbf5f58ea) {
    return "sceNpCommerce2GetProductInfoGetResult";
  } else if (fnid == 0xe1e7b5ac) {
    return "sceNpCommerce2GetProductInfoListCreateReq";
  } else if (fnid == 0x146618df) {
    return "sceNpCommerce2GetProductInfoListGetResult";
  } else if (fnid == 0x9cde07cc) {
    return "sceNpCommerce2GetProductInfoListStart";
  } else if (fnid == 0x8f46325b) {
    return "sceNpCommerce2GetProductInfoStart";
  } else if (fnid == 0x1fa1b312) {
    return "sceNpCommerce2GetStoreBrowseUserdata";
  } else if (fnid == 0x3539d233) {
    return "sceNpCommerce2Init";
  } else if (fnid == 0xd8a473a3) {
    return "sceNpCommerce2InitGetCategoryContentsResult";
  } else if (fnid == 0xe0f90e44) {
    return "sceNpCommerce2InitGetProductInfoListResult";
  } else if (fnid == 0xf798f5e3) {
    return "sceNpCommerce2InitGetProductInfoResult";
  } else if (fnid == 0xa5a863fe) {
    return "sceNpCommerce2SetBGDLAvailability";
  } else if (fnid == 0x4d4a094c) {
    return "sceNpCommerce2Term";
  } else if (fnid == 0x48bd97c7) {
    return "sceNpTrophyAbortHandle";
  } else if (fnid == 0xe3bf9a28) {
    return "sceNpTrophyCreateContext";
  } else if (fnid == 0x1c25470d) {
    return "sceNpTrophyCreateHandle";
  } else if (fnid == 0x3741ecc7) {
    return "sceNpTrophyDestroyContext";
  } else if (fnid == 0x623cd2dc) {
    return "sceNpTrophyDestroyHandle";
  } else if (fnid == 0xff299e03) {
    return "sceNpTrophyGetGameIcon";
  } else if (fnid == 0x49d18217) {
    return "sceNpTrophyGetGameInfo";
  } else if (fnid == 0x079f0e87) {
    return "sceNpTrophyGetGameProgress";
  } else if (fnid == 0x370136fe) {
    return "sceNpTrophyGetRequiredDiskSpace";
  } else if (fnid == 0xbaedf689) {
    return "sceNpTrophyGetTrophyIcon";
  } else if (fnid == 0xfce6d30a) {
    return "sceNpTrophyGetTrophyInfo";
  } else if (fnid == 0xb3ac3478) {
    return "sceNpTrophyGetTrophyUnlockState";
  } else if (fnid == 0x39567781) {
    return "sceNpTrophyInit";
  } else if (fnid == 0x1197b52c) {
    return "sceNpTrophyRegisterContext";
  } else if (fnid == 0x27deda93) {
    return "sceNpTrophySetSoundLevel";
  } else if (fnid == 0xa7fabf4d) {
    return "sceNpTrophyTerm";
  } else if (fnid == 0x8ceedd21) {
    return "sceNpTrophyUnlockTrophy";
  } else if (fnid == 0x325c6284) {
    return "sceNpTusAbortTransaction";
  } else if (fnid == 0x94989003) {
    return "sceNpTusAddAndGetVariable";
  } else if (fnid == 0x1fa5c87d) {
    return "sceNpTusAddAndGetVariableAsync";
  } else if (fnid == 0xf60be06f) {
    return "sceNpTusAddAndGetVariableVUser";
  } else if (fnid == 0xa7993bf3) {
    return "sceNpTusAddAndGetVariableVUserAsync";
  } else if (fnid == 0x7caf58ee) {
    return "sceNpTusCreateTitleCtx";
  } else if (fnid == 0x1904435e) {
    return "sceNpTusCreateTransactionCtx";
  } else if (fnid == 0xe0719847) {
    return "sceNpTusDeleteMultiSlotData";
  } else if (fnid == 0x3175af23) {
    return "sceNpTusDeleteMultiSlotDataAsync";
  } else if (fnid == 0x01711e81) {
    return "sceNpTusDeleteMultiSlotDataVUser";
  } else if (fnid == 0xc815b219) {
    return "sceNpTusDeleteMultiSlotDataVUserAsync";
  } else if (fnid == 0xaf985783) {
    return "sceNpTusDeleteMultiSlotVariable";
  } else if (fnid == 0xf5363608) {
    return "sceNpTusDeleteMultiSlotVariableAsync";
  } else if (fnid == 0xc4e51fbf) {
    return "sceNpTusDeleteMultiSlotVariableVUser";
  } else if (fnid == 0xc2e18da8) {
    return "sceNpTusDeleteMultiSlotVariableVUserAsync";
  } else if (fnid == 0x2e162a62) {
    return "sceNpTusDestroyTitleCtx";
  } else if (fnid == 0x44eca8b4) {
    return "sceNpTusDestroyTransactionCtx";
  } else if (fnid == 0x8ddd0d85) {
    return "sceNpTusGetData";
  } else if (fnid == 0x5175abb9) {
    return "sceNpTusGetDataAsync";
  } else if (fnid == 0xae4e590e) {
    return "sceNpTusGetDataVUser";
  } else if (fnid == 0x38f364b0) {
    return "sceNpTusGetDataVUserAsync";
  } else if (fnid == 0xc848d425) {
    return "sceNpTusGetMultiSlotDataStatus";
  } else if (fnid == 0x651fd79f) {
    return "sceNpTusGetMultiSlotDataStatusAsync";
  } else if (fnid == 0xa3abfadb) {
    return "sceNpTusGetMultiSlotDataStatusVUser";
  } else if (fnid == 0x2ab21ea9) {
    return "sceNpTusGetMultiSlotDataStatusVUserAsync";
  } else if (fnid == 0x0423e622) {
    return "sceNpTusGetMultiSlotVariable";
  } else if (fnid == 0xbb2877f2) {
    return "sceNpTusGetMultiSlotVariableAsync";
  } else if (fnid == 0x2357ba9e) {
    return "sceNpTusGetMultiSlotVariableVUser";
  } else if (fnid == 0xfc7d346e) {
    return "sceNpTusGetMultiSlotVariableVUserAsync";
  } else if (fnid == 0x348dbcb4) {
    return "sceNpTusGetMultiUserDataStatus";
  } else if (fnid == 0xc66ba67e) {
    return "sceNpTusGetMultiUserDataStatusAsync";
  } else if (fnid == 0x2d1b9f1a) {
    return "sceNpTusGetMultiUserDataStatusVUser";
  } else if (fnid == 0x368fec59) {
    return "sceNpTusGetMultiUserDataStatusVUserAsync";
  } else if (fnid == 0x0d15043b) {
    return "sceNpTusGetMultiUserVariable";
  } else if (fnid == 0xcc7a31cd) {
    return "sceNpTusGetMultiUserVariableAsync";
  } else if (fnid == 0x6c511024) {
    return "sceNpTusGetMultiUserVariableVUser";
  } else if (fnid == 0x9549d22c) {
    return "sceNpTusGetMultiUserVariableVUserAsync";
  } else if (fnid == 0x8f87a06b) {
    return "sceNpTusInit";
  } else if (fnid == 0x19bce18c) {
    return "sceNpTusPollAsync";
  } else if (fnid == 0x7d5f0f0e) {
    return "sceNpTusSetData";
  } else if (fnid == 0xe847341f) {
    return "sceNpTusSetDataAsync";
  } else if (fnid == 0x0835deb2) {
    return "sceNpTusSetDataVUser";
  } else if (fnid == 0x9cc0cf44) {
    return "sceNpTusSetDataVUserAsync";
  } else if (fnid == 0xcc86a8f6) {
    return "sceNpTusSetMultiSlotVariable";
  } else if (fnid == 0x065b610d) {
    return "sceNpTusSetMultiSlotVariableAsync";
  } else if (fnid == 0xf819be91) {
    return "sceNpTusSetMultiSlotVariableVUser";
  } else if (fnid == 0x96a06212) {
    return "sceNpTusSetMultiSlotVariableVUserAsync";
  } else if (fnid == 0x59432970) {
    return "sceNpTusSetTimeout";
  } else if (fnid == 0x225aed26) {
    return "sceNpTusTerm";
  } else if (fnid == 0x47e9424a) {
    return "sceNpTusTryAndSetVariable";
  } else if (fnid == 0xbbb244b7) {
    return "sceNpTusTryAndSetVariableAsync";
  } else if (fnid == 0x3602bc80) {
    return "sceNpTusTryAndSetVariableVUser";
  } else if (fnid == 0x17db7aa7) {
    return "sceNpTusTryAndSetVariableVUserAsync";
  } else if (fnid == 0xb8e8ff22) {
    return "sceNpTusWaitAsync";
  } else if (fnid == 0xc99ee313) {
    return "sceNpUtilBandwidthTestAbort";
  } else if (fnid == 0xc880f37d) {
    return "sceNpUtilBandwidthTestGetStatus";
  } else if (fnid == 0xc2ced2b7) {
    return "sceNpUtilBandwidthTestInitStart";
  } else if (fnid == 0x432b3cbf) {
    return "sceNpUtilBandwidthTestShutdown";
  } else if (fnid == 0x7f13fc8c) {
    return "cellFsAioCancel";
  } else if (fnid == 0x9f951810) {
    return "cellFsAioFinish";
  } else if (fnid == 0xdb869f20) {
    return "cellFsAioInit";
  } else if (fnid == 0xc1c507e7) {
    return "cellFsAioRead";
  } else if (fnid == 0x4cef342e) {
    return "cellFsAioWrite";
  } else if (fnid == 0x3394f037) {
    return "cellFsAllocateFileAreaByFdWithInitialData";
  } else if (fnid == 0x2cf1296b) {
    return "cellFsAllocateFileAreaByFdWithoutZeroFill";
  } else if (fnid == 0x103b8632) {
    return "cellFsAllocateFileAreaWithInitialData";
  } else if (fnid == 0x7a0329a1) {
    return "cellFsAllocateFileAreaWithoutZeroFill";
  } else if (fnid == 0x1ea02e2f) {
    return "cellFsArcadeHddSerialNumber";
  } else if (fnid == 0xe15939c3) {
    return "cellFsChangeFileSizeByFdWithoutAllocation";
  } else if (fnid == 0x606f9f42) {
    return "cellFsChangeFileSizeWithoutAllocation";
  } else if (fnid == 0x99406d0b) {
    return "cellFsChmod";
  } else if (fnid == 0x2cb51f0d) {
    return "cellFsClose";
  } else if (fnid == 0xff42dcc3) {
    return "cellFsClosedir";
  } else if (fnid == 0xcb588dba) {
    return "cellFsFGetBlockSize";
  } else if (fnid == 0xef3efa34) {
    return "cellFsFstat";
  } else if (fnid == 0x967a162b) {
    return "cellFsFsync";
  } else if (fnid == 0x0e2939e5) {
    return "cellFsFtruncate";
  } else if (fnid == 0x1a108ab7) {
    return "cellFsGetBlockSize";
  } else if (fnid == 0x9b882495) {
    return "cellFsGetDirectoryEntries";
  } else if (fnid == 0xaa3b4bcd) {
    return "cellFsGetFreeSize";
  } else if (fnid == 0xa397d042) {
    return "cellFsLseek";
  } else if (fnid == 0xba901fe6) {
    return "cellFsMkdir";
  } else if (fnid == 0x718bf5f8) {
    return "cellFsOpen";
  } else if (fnid == 0x3f61245c) {
    return "cellFsOpendir";
  } else if (fnid == 0x4d5ff8e2) {
    return "cellFsRead";
  } else if (fnid == 0x5c74903d) {
    return "cellFsReaddir";
  } else if (fnid == 0x0d5b4a14) {
    return "cellFsReadWithOffset";
  } else if (fnid == 0xa01ee33a) {
    return "cellFsRegisterConversionCallback";
  } else if (fnid == 0xf12eecc8) {
    return "cellFsRename";
  } else if (fnid == 0x2796fdf3) {
    return "cellFsRmdir";
  } else if (fnid == 0xb1840b53) {
    return "cellFsSdataOpen";
  } else if (fnid == 0x6d3bb15b) {
    return "cellFsSdataOpenByFd";
  } else if (fnid == 0x02671310) {
    return "cellFsSetDefaultContainer";
  } else if (fnid == 0x91a1beaa) {
    return "cellFsSetDiscReadRetrySetting";
  } else if (fnid == 0x3140f6e1) {
    return "cellFsSetIoBuffer";
  } else if (fnid == 0x75f16dc5) {
    return "cellFsSetIoBufferFromDefaultContainer";
  } else if (fnid == 0x7de6dced) {
    return "cellFsStat";
  } else if (fnid == 0x27800c6b) {
    return "cellFsStRead";
  } else if (fnid == 0xd73938df) {
    return "cellFsStReadFinish";
  } else if (fnid == 0x190912f6) {
    return "cellFsStReadGetCurrentAddr";
  } else if (fnid == 0xbd273a88) {
    return "cellFsStReadGetRegid";
  } else if (fnid == 0xb3afee8b) {
    return "cellFsStReadGetRingBuf";
  } else if (fnid == 0xcf34969c) {
    return "cellFsStReadGetStatus";
  } else if (fnid == 0x2664c8ae) {
    return "cellFsStReadInit";
  } else if (fnid == 0x81f33783) {
    return "cellFsStReadPutCurrentAddr";
  } else if (fnid == 0x8df28ff9) {
    return "cellFsStReadStart";
  } else if (fnid == 0xf8e5d9a0) {
    return "cellFsStReadStop";
  } else if (fnid == 0x8f71c5b2) {
    return "cellFsStReadWait";
  } else if (fnid == 0x866f6aec) {
    return "cellFsStReadWaitCallback";
  } else if (fnid == 0xc9dc3ac5) {
    return "cellFsTruncate";
  } else if (fnid == 0x3a1c8393) {
    return "cellFsTruncate2";
  } else if (fnid == 0x7f4677a8) {
    return "cellFsUnlink";
  } else if (fnid == 0xf94baa80) {
    return "cellFsUnregisterL10nCallbacks";
  } else if (fnid == 0xbef554a4) {
    return "cellFsUtime";
  } else if (fnid == 0xecdcf2ab) {
    return "cellFsWrite";
  } else if (fnid == 0x8cb722d5) {
    return "cellFsWriteWithOffset";
  } else if (fnid == 0x2073b7f6) {
    return "cellKbClearBuf";
  } else if (fnid == 0x4ab1fa77) {
    return "cellKbCnvRawCode";
  } else if (fnid == 0xbfce3285) {
    return "cellKbEnd";
  } else if (fnid == 0x1f71ecbe) {
    return "cellKbGetConfiguration";
  } else if (fnid == 0x2f1774d5) {
    return "cellKbGetInfo";
  } else if (fnid == 0x433f6ec0) {
    return "cellKbInit";
  } else if (fnid == 0xff0a21b7) {
    return "cellKbRead";
  } else if (fnid == 0xa5f85e4d) {
    return "cellKbSetCodeType";
  } else if (fnid == 0x3f72c56e) {
    return "cellKbSetLEDStatus";
  } else if (fnid == 0xdeefdfa7) {
    return "cellKbSetReadMode";
  } else if (fnid == 0x3ef66b95) {
    return "cellMouseClearBuf";
  } else if (fnid == 0xe10183ce) {
    return "cellMouseEnd";
  } else if (fnid == 0x3138e632) {
    return "cellMouseGetData";
  } else if (fnid == 0x6bd131f0) {
    return "cellMouseGetDataList";
  } else if (fnid == 0x5baf30fb) {
    return "cellMouseGetInfo";
  } else if (fnid == 0xa328cc35) {
    return "cellMouseGetRawData";
  } else if (fnid == 0x21a62e9b) {
    return "cellMouseGetTabletDataList";
  } else if (fnid == 0x4d0b3b1f) {
    return "cellMouseInfoTabletMode";
  } else if (fnid == 0xc9030138) {
    return "cellMouseInit";
  } else if (fnid == 0x2d16da4f) {
    return "cellMouseSetTabletMode";
  } else if (fnid == 0x0d5f2c14) {
    return "cellPadClearBuf";
  } else if (fnid == 0xcf3051f7) {
    return "cellPadDbgGetData";
  } else if (fnid == 0xa74396e5) {
    return "cellPadDbgLddRegisterController";
  } else if (fnid == 0x94b98e39) {
    return "cellPadDbgLddSetDataInsertMode";
  } else if (fnid == 0x7c5d5fc1) {
    return "cellPadDbgPeriphRegisterDevice";
  } else if (fnid == 0x4d9b75d5) {
    return "cellPadEnd";
  } else if (fnid == 0x8b72cda1) {
    return "cellPadGetData";
  } else if (fnid == 0x6bc09c61) {
    return "cellPadGetDataExtra";
  } else if (fnid == 0x3aaad464) {
    return "cellPadGetInfo";
  } else if (fnid == 0xa703a51d) {
    return "cellPadGetInfo2";
  } else if (fnid == 0x3f797dff) {
    return "cellPadGetRawData";
  } else if (fnid == 0x0e2dfaad) {
    return "cellPadInfoPressMode";
  } else if (fnid == 0x78200559) {
    return "cellPadInfoSensorMode";
  } else if (fnid == 0x1cf98800) {
    return "cellPadInit";
  } else if (fnid == 0xbafd6409) {
    return "cellPadLddDataInsert";
  } else if (fnid == 0x8b8231e5) {
    return "cellPadLddGetPortNo";
  } else if (fnid == 0x20a97ba2) {
    return "cellPadLddRegisterController";
  } else if (fnid == 0xe442faa8) {
    return "cellPadLddUnregisterController";
  } else if (fnid == 0x8a00f264) {
    return "cellPadPeriphGetData";
  } else if (fnid == 0x4cc9b68d) {
    return "cellPadPeriphGetInfo";
  } else if (fnid == 0xf65544ee) {
    return "cellPadSetActDirect";
  } else if (fnid == 0x578e3c98) {
    return "cellPadSetPortSetting";
  } else if (fnid == 0xf83f8182) {
    return "cellPadSetPressMode";
  } else if (fnid == 0xbe5be3ba) {
    return "cellPadSetSensorMode";
  } else if (fnid == 0x6ae10596) {
    return "sys_config_add_service_listener";
  } else if (fnid == 0x78f058a2) {
    return "sys_config_register_service";
  } else if (fnid == 0xf5d9d571) {
    return "sys_config_remove_service_listener";
  } else if (fnid == 0x068fcbc6) {
    return "sys_config_start";
  } else if (fnid == 0x6d367953) {
    return "sys_config_stop";
  } else if (fnid == 0x5f81900c) {
    return "sys_config_unregister_service";
  } else if (fnid == 0x0df8809f) {
    return "__call_functions_registered_with_atexit";
  } else if (fnid == 0xa835be11) {
    return "__cxa_atexit";
  } else if (fnid == 0x5e06c3fe) {
    return "__getpid";
  } else if (fnid == 0x25beee5a) {
    return "__raw_spu_printf";
  } else if (fnid == 0x714c9618) {
    return "__raw_spu_putfld";
  } else if (fnid == 0xffbd876b) {
    return "__raw_spu_puttxt";
  } else if (fnid == 0xa6463518) {
    return "__rename";
  } else if (fnid == 0xfc60575c) {
    return "__spu_thread_printf";
  } else if (fnid == 0xd3964a09) {
    return "__spu_thread_putfld";
  } else if (fnid == 0xd8b4eb20) {
    return "__spu_thread_puttxt";
  } else if (fnid == 0xa0ab76d5) {
    return "_absi4";
  } else if (fnid == 0x1f925c41) {
    return "_allocate_mapped_pages";
  } else if (fnid == 0xaf89fdbd) {
    return "_Assert";
  } else if (fnid == 0xe469fb20) {
    return "_Atexit";
  } else if (fnid == 0x216fcd2a) {
    return "_Atrealloc";
  } else if (fnid == 0x126656b7) {
    return "_Btowc";
  } else if (fnid == 0x9ff08d57) {
    return "_Clearlocks";
  } else if (fnid == 0xb4fc7078) {
    return "_close_all_FILE";
  } else if (fnid == 0xb1cc43e3) {
    return "_CStrftime";
  } else if (fnid == 0x0d8a2de0) {
    return "_CStrxfrm";
  } else if (fnid == 0xab4c7ca1) {
    return "_CWcsxfrm";
  } else if (fnid == 0xc1a71972) {
    return "_d2rv";
  } else if (fnid == 0x7efd420a) {
    return "_Daysto";
  } else if (fnid == 0x03becf3c) {
    return "_Defloc";
  } else if (fnid == 0x9d140351) {
    return "_Destroytls";
  } else if (fnid == 0xcc5e0c72) {
    return "_divi4";
  } else if (fnid == 0x18f7b77d) {
    return "_Dnorm";
  } else if (fnid == 0x5f922a30) {
    return "_Dscale";
  } else if (fnid == 0xace90be4) {
    return "_Dtentox";
  } else if (fnid == 0x889d5804) {
    return "_Dunscale";
  } else if (fnid == 0x23d3bca7) {
    return "_Eadd";
  } else if (fnid == 0x8e2484f1) {
    return "_Emul";
  } else if (fnid == 0x2eea9f25) {
    return "_Esub";
  } else if (fnid == 0x89b62f56) {
    return "_Etentox";
  } else if (fnid == 0xc63c354f) {
    return "_Exit";
  } else if (fnid == 0xde32a334) {
    return "_Exitspawn";
  } else if (fnid == 0xfb8ea4d2) {
    return "_Fd2rv";
  } else if (fnid == 0x9886810c) {
    return "_FDnorm";
  } else if (fnid == 0xd4912ee3) {
    return "_FDscale";
  } else if (fnid == 0x7994c28d) {
    return "_FDtentox";
  } else if (fnid == 0x296bc72f) {
    return "_FDunscale";
  } else if (fnid == 0x6687fba4) {
    return "_Fgpos";
  } else if (fnid == 0x02f52a3c) {
    return "_filep_close_it";
  } else if (fnid == 0xa65886b8) {
    return "_Findloc";
  } else if (fnid == 0xc57337f8) {
    return "_Fofind";
  } else if (fnid == 0x449317ed) {
    return "_Fopen";
  } else if (fnid == 0x7c370679) {
    return "_Foprep";
  } else if (fnid == 0xb2748a9f) {
    return "_Freeloc";
  } else if (fnid == 0x242c603e) {
    return "_Frprep";
  } else if (fnid == 0xcecbcdc4) {
    return "_Frv2d";
  } else if (fnid == 0x3704840e) {
    return "_fs_finalize";
  } else if (fnid == 0x225702e1) {
    return "_fs_initialize";
  } else if (fnid == 0xe03c7ab1) {
    return "_Fspos";
  } else if (fnid == 0xcf863219) {
    return "_Fwprep";
  } else if (fnid == 0x3e57dfac) {
    return "_Genld";
  } else if (fnid == 0x6539ff6d) {
    return "_Gentime";
  } else if (fnid == 0x418bdfe1) {
    return "_get_fd";
  } else if (fnid == 0xeeeb4f3e) {
    return "_get_state_TT800";
  } else if (fnid == 0x34dd6650) {
    return "_Getcloc";
  } else if (fnid == 0xbfcd1b3b) {
    return "_Getdst";
  } else if (fnid == 0x44115dd0) {
    return "_Geterrno";
  } else if (fnid == 0x980d3ea7) {
    return "_Getfld";
  } else if (fnid == 0xe7def231) {
    return "_Getfloat";
  } else if (fnid == 0x4c3f5f29) {
    return "_Getgloballocale";
  } else if (fnid == 0x336b4191) {
    return "_Getint";
  } else if (fnid == 0xbc374779) {
    return "_Getlname";
  } else if (fnid == 0x508e00c6) {
    return "_Getloc";
  } else if (fnid == 0x9a87bb3a) {
    return "_Getmbcurmax";
  } else if (fnid == 0x30fb2899) {
    return "_Getmem";
  } else if (fnid == 0x0b9d04d0) {
    return "_Getnloc";
  } else if (fnid == 0xf5a32994) {
    return "_Getpcostate";
  } else if (fnid == 0x4a0049c6) {
    return "_Getpctype";
  } else if (fnid == 0x53eb43a1) {
    return "_Getpmbstate";
  } else if (fnid == 0x3ec99a66) {
    return "_Getptimes";
  } else if (fnid == 0x1df4732e) {
    return "_Getptolower";
  } else if (fnid == 0xc1c8737c) {
    return "_Getptoupper";
  } else if (fnid == 0xf5ef229c) {
    return "_Getpwcostate";
  } else if (fnid == 0x59c1bb1f) {
    return "_Getpwcstate";
  } else if (fnid == 0xe1858899) {
    return "_Getpwctrtab";
  } else if (fnid == 0x8809cdfd) {
    return "_Getpwctytab";
  } else if (fnid == 0xb37982ea) {
    return "_Getstr";
  } else if (fnid == 0xa1dbb466) {
    return "_Gettime";
  } else if (fnid == 0x69106fd2) {
    return "_init_by_array_TT800";
  } else if (fnid == 0xf68e2ac9) {
    return "_init_malloc_lock";
  } else if (fnid == 0xb49eea74) {
    return "_init_malloc_lock0";
  } else if (fnid == 0x459072c3) {
    return "_init_TT800";
  } else if (fnid == 0xad8e9ad0) {
    return "_Initlocks";
  } else if (fnid == 0xe5ea9e2b) {
    return "_Isdst";
  } else if (fnid == 0x3ca81c76) {
    return "_Iswctype";
  } else if (fnid == 0x6075a3c6) {
    return "_Ld2rv";
  } else if (fnid == 0x5751acf9) {
    return "_LDscale";
  } else if (fnid == 0xb5d353e8) {
    return "_LDtentox";
  } else if (fnid == 0x6995f5e8) {
    return "_Ldtob";
  } else if (fnid == 0x60627fb3) {
    return "_LDunscale";
  } else if (fnid == 0xf2bbbee9) {
    return "_Litob";
  } else if (fnid == 0x7aee5acd) {
    return "_Lockfilelock";
  } else if (fnid == 0x7028dea9) {
    return "_Locksyslock";
  } else if (fnid == 0x8cb6bfdc) {
    return "_Locsum";
  } else if (fnid == 0xb24cb8d6) {
    return "_Locterm";
  } else if (fnid == 0x54b383bc) {
    return "_Locvar";
  } else if (fnid == 0x17bc0136) {
    return "_Lrv2d";
  } else if (fnid == 0x882689f2) {
    return "_Makeloc";
  } else if (fnid == 0xc0e27b2c) {
    return "_Makestab";
  } else if (fnid == 0xfb0f0018) {
    return "_Makewct";
  } else if (fnid == 0x0b0d272f) {
    return "_malloc_finalize";
  } else if (fnid == 0xa53800c2) {
    return "_malloc_finalize_lv2";
  } else if (fnid == 0xaa266d35) {
    return "_malloc_init";
  } else if (fnid == 0x312be3b3) {
    return "_malloc_init_lv2";
  } else if (fnid == 0x5d43c1a3) {
    return "_Mbtowc";
  } else if (fnid == 0x243b52d8) {
    return "_Mbtowcx";
  } else if (fnid == 0x81a0a858) {
    return "_memset_int";
  } else if (fnid == 0x8725a1a7) {
    return "_memset_vmx";
  } else if (fnid == 0x32e4a30a) {
    return "_Mtxdst";
  } else if (fnid == 0xc9471fac) {
    return "_Mtxinit";
  } else if (fnid == 0xf9dba140) {
    return "_Mtxlock";
  } else if (fnid == 0x6cf78f3e) {
    return "_Mtxunlock";
  } else if (fnid == 0x8f5dd179) {
    return "_Nnl";
  } else if (fnid == 0xaf6bdcb0) {
    return "_Nonfatal_Assert";
  } else if (fnid == 0x2caea755) {
    return "_Once";
  } else if (fnid == 0xcab654bf) {
    return "_Once_ctor";
  } else if (fnid == 0xf9e26b72) {
    return "_Once_dtor";
  } else if (fnid == 0x4ab5fbe2) {
    return "_Printf";
  } else if (fnid == 0x82a4561a) {
    return "_put_fd";
  } else if (fnid == 0x7cec7b39) {
    return "_Putfld";
  } else if (fnid == 0xb6002508) {
    return "_Putstr";
  } else if (fnid == 0x2d17ca7f) {
    return "_Puttxt";
  } else if (fnid == 0x6e988e5f) {
    return "_rand_int31_TT800";
  } else if (fnid == 0x0125b2ca) {
    return "_rand_int32_TT800";
  } else if (fnid == 0xb3d98d59) {
    return "_rand_real1_TT800";
  } else if (fnid == 0x253b7210) {
    return "_rand_real2_TT800";
  } else if (fnid == 0xc4178000) {
    return "_rand_real3_TT800";
  } else if (fnid == 0x7d894764) {
    return "_Readloc";
  } else if (fnid == 0xa483d50d) {
    return "_rv2d";
  } else if (fnid == 0xc41c6e5d) {
    return "_Scanf";
  } else if (fnid == 0xddc71a75) {
    return "_SCE_Assert";
  } else if (fnid == 0xf7ddb471) {
    return "_Setgloballocale";
  } else if (fnid == 0xbbd4582f) {
    return "_Setloc";
  } else if (fnid == 0x77e241bc) {
    return "_Skip";
  } else if (fnid == 0xd1d69cb8) {
    return "_Stod";
  } else if (fnid == 0x51b28904) {
    return "_Stodx";
  } else if (fnid == 0x3ee29d0b) {
    return "_Stof";
  } else if (fnid == 0xfd81f6ca) {
    return "_Stoflt";
  } else if (fnid == 0xb4a54446) {
    return "_Stofx";
  } else if (fnid == 0x5eb95641) {
    return "_Stold";
  } else if (fnid == 0x07c7971d) {
    return "_Stoldx";
  } else if (fnid == 0x36c067c1) {
    return "_Stoll";
  } else if (fnid == 0x22b0e566) {
    return "_Stollx";
  } else if (fnid == 0x0ae275a4) {
    return "_Stolx";
  } else if (fnid == 0xc9607d35) {
    return "_Stopfx";
  } else if (fnid == 0x867275d7) {
    return "_Stoul";
  } else if (fnid == 0xd417eeb5) {
    return "_Stoull";
  } else if (fnid == 0x05d821c4) {
    return "_Stoullx";
  } else if (fnid == 0xa0ddba8e) {
    return "_Stoulx";
  } else if (fnid == 0xdfb52083) {
    return "_Stoxflt";
  } else if (fnid == 0xfae4b063) {
    return "_Strcollx";
  } else if (fnid == 0x3d1460e9) {
    return "_Strerror";
  } else if (fnid == 0x1dcd8609) {
    return "_Strxfrmx";
  } else if (fnid == 0x6ba10474) {
    return "_Tlsalloc";
  } else if (fnid == 0x0891a3fa) {
    return "_Tlsfree";
  } else if (fnid == 0xa82d70da) {
    return "_Tlsget";
  } else if (fnid == 0x2b7ba4ca) {
    return "_Tlsset";
  } else if (fnid == 0xedec777d) {
    return "_Ttotm";
  } else if (fnid == 0x5fa1e497) {
    return "_Unlockfilelock";
  } else if (fnid == 0x34e7c97e) {
    return "_Unlocksyslock";
  } else if (fnid == 0x1ecae195) {
    return "_Vacopy";
  } else if (fnid == 0xd69c513d) {
    return "_Wcscollx";
  } else if (fnid == 0x76ed4243) {
    return "_Wcsftime";
  } else if (fnid == 0x3574d37d) {
    return "_Wcsxfrmx";
  } else if (fnid == 0x24e230d2) {
    return "_Wctob";
  } else if (fnid == 0x0264f468) {
    return "_Wctomb";
  } else if (fnid == 0x38426d25) {
    return "_Wctombx";
  } else if (fnid == 0xb6af290e) {
    return "_WFrprep";
  } else if (fnid == 0xf418ee84) {
    return "_WFwprep";
  } else if (fnid == 0x40e0ff25) {
    return "_WGenld";
  } else if (fnid == 0x8ed71e8b) {
    return "_WGetfld";
  } else if (fnid == 0x77c15441) {
    return "_WGetfloat";
  } else if (fnid == 0xa2945229) {
    return "_WGetint";
  } else if (fnid == 0x344eca7e) {
    return "_WGetstr";
  } else if (fnid == 0x9800573c) {
    return "_WLdtob";
  } else if (fnid == 0x58320830) {
    return "_WLitob";
  } else if (fnid == 0x329a4540) {
    return "_WPrintf";
  } else if (fnid == 0x7b7a687a) {
    return "_WPutfld";
  } else if (fnid == 0xafa39179) {
    return "_WPutstr";
  } else if (fnid == 0x8ef85e47) {
    return "_WPuttxt";
  } else if (fnid == 0xbe11beaa) {
    return "_wremove";
  } else if (fnid == 0xeeffc9a6) {
    return "_wrename";
  } else if (fnid == 0x3b8097ac) {
    return "_WScanf";
  } else if (fnid == 0x57ff7dd7) {
    return "_WStod";
  } else if (fnid == 0xecddba69) {
    return "_WStodx";
  } else if (fnid == 0xc94b27e3) {
    return "_WStof";
  } else if (fnid == 0xe2c5274a) {
    return "_WStoflt";
  } else if (fnid == 0xb794631e) {
    return "_WStofx";
  } else if (fnid == 0x5f9a65c7) {
    return "_WStold";
  } else if (fnid == 0x9027fd99) {
    return "_WStoldx";
  } else if (fnid == 0x7345b4be) {
    return "_WStoll";
  } else if (fnid == 0x8d7ffaf1) {
    return "_WStopfx";
  } else if (fnid == 0xb7ba4aeb) {
    return "_WStoul";
  } else if (fnid == 0xc155a73f) {
    return "_WStoull";
  } else if (fnid == 0x96e6303b) {
    return "_WStoxflt";
  } else if (fnid == 0x8a6830e7) {
    return "abort";
  } else if (fnid == 0x24c9e021) {
    return "abs";
  } else if (fnid == 0x14052ae0) {
    return "absi4";
  } else if (fnid == 0xffbae95e) {
    return "asctime";
  } else if (fnid == 0x1b4c3ff0) {
    return "atexit";
  } else if (fnid == 0xe44bf0bf) {
    return "atof";
  } else if (fnid == 0xd9a4f812) {
    return "atoff";
  } else if (fnid == 0x3d541975) {
    return "atoi";
  } else if (fnid == 0x40a2599a) {
    return "atol";
  } else if (fnid == 0xbc1d69c5) {
    return "atoll";
  } else if (fnid == 0x5e7888f0) {
    return "bsearch";
  } else if (fnid == 0x077cdb23) {
    return "btowc";
  } else if (fnid == 0xa72a7595) {
    return "calloc";
  } else if (fnid == 0x1f913e8d) {
    return "chmod";
  } else if (fnid == 0x8b439438) {
    return "clearerr";
  } else if (fnid == 0x24f6cbdd) {
    return "clock";
  } else if (fnid == 0xb120f6ca) {
    return "close";
  } else if (fnid == 0xa3440924) {
    return "closedir";
  } else if (fnid == 0xbc7b4b8e) {
    return "ctime";
  } else if (fnid == 0x4217b4cf) {
    return "difftime";
  } else if (fnid == 0x1abd0985) {
    return "div";
  } else if (fnid == 0x14348b57) {
    return "divi4";
  } else if (fnid == 0xc291e698) {
    return "exit";
  } else if (fnid == 0x11d270d2) {
    return "exitspawn";
  } else if (fnid == 0xe1bd3587) {
    return "fclose";
  } else if (fnid == 0x1365b52a) {
    return "fcntl";
  } else if (fnid == 0xe3812672) {
    return "fdopen";
  } else if (fnid == 0x4ffba189) {
    return "feof";
  } else if (fnid == 0x33d6ae54) {
    return "ferror";
  } else if (fnid == 0x814d8cb0) {
    return "fflush";
  } else if (fnid == 0xac893127) {
    return "fgetc";
  } else if (fnid == 0x6545b7de) {
    return "fgetpos";
  } else if (fnid == 0xaf44a615) {
    return "fgets";
  } else if (fnid == 0xbc5af0b5) {
    return "fgetwc";
  } else if (fnid == 0x55d4866e) {
    return "fgetws";
  } else if (fnid == 0xd360dcb4) {
    return "fileno";
  } else if (fnid == 0x69c27c12) {
    return "fopen";
  } else if (fnid == 0xfaec8c60) {
    return "fprintf";
  } else if (fnid == 0x79819dbf) {
    return "fputc";
  } else if (fnid == 0x4d348427) {
    return "fputs";
  } else if (fnid == 0xc95b20d3) {
    return "fputwc";
  } else if (fnid == 0xe60ee9e5) {
    return "fputws";
  } else if (fnid == 0xd40723d6) {
    return "fread";
  } else if (fnid == 0x77a602dd) {
    return "free";
  } else if (fnid == 0xb18cc115) {
    return "freopen";
  } else if (fnid == 0xfe88e97e) {
    return "fscanf";
  } else if (fnid == 0x69ff1b9b) {
    return "fseek";
  } else if (fnid == 0xed6ec979) {
    return "fsetpos";
  } else if (fnid == 0xab77019f) {
    return "fstat";
  } else if (fnid == 0x3bd9ce0a) {
    return "fsync";
  } else if (fnid == 0x26f023d5) {
    return "ftell";
  } else if (fnid == 0x76da0c84) {
    return "ftruncate";
  } else if (fnid == 0x2d067448) {
    return "ftruncate64";
  } else if (fnid == 0x40d04e4e) {
    return "fwide";
  } else if (fnid == 0xe9137453) {
    return "fwprintf";
  } else if (fnid == 0xf88f26c4) {
    return "fwrite";
  } else if (fnid == 0x433fe2a9) {
    return "fwscanf";
  } else if (fnid == 0xb7b793ed) {
    return "get_state_TT800";
  } else if (fnid == 0xf0e022c6) {
    return "getc";
  } else if (fnid == 0xa5bc0e19) {
    return "getchar";
  } else if (fnid == 0x1970cd7e) {
    return "getpid";
  } else if (fnid == 0x90010029) {
    return "gets";
  } else if (fnid == 0x1c2ef212) {
    return "getwc";
  } else if (fnid == 0x2fecec13) {
    return "getwchar";
  } else if (fnid == 0xeb26298c) {
    return "gmtime";
  } else if (fnid == 0xb3c495bd) {
    return "imaxabs";
  } else if (fnid == 0x86532174) {
    return "imaxdiv";
  } else if (fnid == 0xd20f6601) {
    return "independent_calloc";
  } else if (fnid == 0xaf002043) {
    return "independent_comalloc";
  } else if (fnid == 0xde1bb092) {
    return "init_by_array_TT800";
  } else if (fnid == 0xeddcee2c) {
    return "init_TT800";
  } else if (fnid == 0xb529d259) {
    return "isalnum";
  } else if (fnid == 0x7c1bcf37) {
    return "isalnum_ascii";
  } else if (fnid == 0xb17b79d0) {
    return "isalpha";
  } else if (fnid == 0xe89071ad) {
    return "isalpha_ascii";
  } else if (fnid == 0xfe630fd9) {
    return "isblank";
  } else if (fnid == 0x806fd281) {
    return "isblank_ascii";
  } else if (fnid == 0x25da8fbb) {
    return "iscntrl";
  } else if (fnid == 0xb7d3427f) {
    return "iscntrl_ascii";
  } else if (fnid == 0x3f4ccdc7) {
    return "isdigit";
  } else if (fnid == 0x41283333) {
    return "isdigit_ascii";
  } else if (fnid == 0xaa1e687d) {
    return "isgraph";
  } else if (fnid == 0x15c2e29d) {
    return "isgraph_ascii";
  } else if (fnid == 0x118712ea) {
    return "islower";
  } else if (fnid == 0xbe251a29) {
    return "islower_ascii";
  } else if (fnid == 0xd2a99b1e) {
    return "isprint";
  } else if (fnid == 0xce7a9e76) {
    return "isprint_ascii";
  } else if (fnid == 0x744d2505) {
    return "ispunct";
  } else if (fnid == 0x1096f8f1) {
    return "ispunct_ascii";
  } else if (fnid == 0x97896359) {
    return "isspace";
  } else if (fnid == 0x609080ec) {
    return "isspace_ascii";
  } else if (fnid == 0xd784459d) {
    return "isupper";
  } else if (fnid == 0xb400f226) {
    return "isupper_ascii";
  } else if (fnid == 0xd2ac48d7) {
    return "iswalnum";
  } else if (fnid == 0x1cf4d80a) {
    return "iswalpha";
  } else if (fnid == 0x7aaab95c) {
    return "iswblank";
  } else if (fnid == 0x24802244) {
    return "iswcntrl";
  } else if (fnid == 0x5516bbbf) {
    return "iswctype";
  } else if (fnid == 0x6287ac6a) {
    return "iswdigit";
  } else if (fnid == 0x74fe4a7b) {
    return "iswgraph";
  } else if (fnid == 0xfb81426d) {
    return "iswlower";
  } else if (fnid == 0x6823c180) {
    return "iswprint";
  } else if (fnid == 0x8b9d8dd2) {
    return "iswpunct";
  } else if (fnid == 0xa57cc615) {
    return "iswspace";
  } else if (fnid == 0x4c7dc863) {
    return "iswupper";
  } else if (fnid == 0xb57bdf7b) {
    return "iswxdigit";
  } else if (fnid == 0x3b22e88a) {
    return "isxdigit";
  } else if (fnid == 0xdef86a83) {
    return "isxdigit_ascii";
  } else if (fnid == 0x809a143f) {
    return "kill";
  } else if (fnid == 0xc69b2427) {
    return "labs";
  } else if (fnid == 0xad62a342) {
    return "ldiv";
  } else if (fnid == 0x8713c859) {
    return "link";
  } else if (fnid == 0xe5f09c80) {
    return "llabs";
  } else if (fnid == 0xb30042ce) {
    return "lldiv";
  } else if (fnid == 0x1098a99d) {
    return "localeconv";
  } else if (fnid == 0x266311a0) {
    return "localtime";
  } else if (fnid == 0x4e4be299) {
    return "longjmp";
  } else if (fnid == 0xaec7c970) {
    return "lseek";
  } else if (fnid == 0xbf5bf5ea) {
    return "lseek64";
  } else if (fnid == 0xa0bc0efb) {
    return "mallinfo";
  } else if (fnid == 0x759e0635) {
    return "malloc";
  } else if (fnid == 0x3902363a) {
    return "malloc_footprint";
  } else if (fnid == 0x4569518c) {
    return "malloc_stats";
  } else if (fnid == 0xeda48c80) {
    return "malloc_trim";
  } else if (fnid == 0x79eadf05) {
    return "malloc_usable_size";
  } else if (fnid == 0xdaeada07) {
    return "mallopt";
  } else if (fnid == 0x70b0e833) {
    return "mblen";
  } else if (fnid == 0xb81cd66a) {
    return "mbrlen";
  } else if (fnid == 0x12a55fb7) {
    return "mbrtowc";
  } else if (fnid == 0xb4225825) {
    return "mbsinit";
  } else if (fnid == 0xfc606237) {
    return "mbsrtowcs";
  } else if (fnid == 0xfcac2e8e) {
    return "mbstowcs";
  } else if (fnid == 0x355fd1fd) {
    return "mbtowc";
  } else if (fnid == 0x6137d196) {
    return "memalign";
  } else if (fnid == 0xcbac7ad7) {
    return "memchr";
  } else if (fnid == 0xc3e14cbe) {
    return "memcmp";
  } else if (fnid == 0x831d70a5) {
    return "memcpy";
  } else if (fnid == 0xde7aff7a) {
    return "memcpy16";
  } else if (fnid == 0x5b162b7f) {
    return "memmove";
  } else if (fnid == 0x5909e3c4) {
    return "memset";
  } else if (fnid == 0x87e8f748) {
    return "memset_vmx";
  } else if (fnid == 0x153b364a) {
    return "mkdir";
  } else if (fnid == 0x19ccbb81) {
    return "mktime";
  } else if (fnid == 0x468b45dc) {
    return "mspace_calloc";
  } else if (fnid == 0xa45a0313) {
    return "mspace_create";
  } else if (fnid == 0x145853cd) {
    return "mspace_destroy";
  } else if (fnid == 0xfe0261aa) {
    return "mspace_free";
  } else if (fnid == 0x3f650700) {
    return "mspace_is_heap_empty";
  } else if (fnid == 0xcb85ac70) {
    return "mspace_malloc";
  } else if (fnid == 0x7fd325c4) {
    return "mspace_malloc_stats";
  } else if (fnid == 0x0871ffb0) {
    return "mspace_malloc_usable_size";
  } else if (fnid == 0xba62681f) {
    return "mspace_memalign";
  } else if (fnid == 0x1895908d) {
    return "mspace_realloc";
  } else if (fnid == 0xd9674905) {
    return "mspace_reallocalign";
  } else if (fnid == 0xf356418c) {
    return "open";
  } else if (fnid == 0x3dbc3bee) {
    return "opendir";
  } else if (fnid == 0x692b497f) {
    return "perror";
  } else if (fnid == 0xc01d9f97) {
    return "printf";
  } else if (fnid == 0x3bce073b) {
    return "putc";
  } else if (fnid == 0x2677568c) {
    return "putchar";
  } else if (fnid == 0xe3cc73f3) {
    return "puts";
  } else if (fnid == 0xcca68e9c) {
    return "putwc";
  } else if (fnid == 0x78429d81) {
    return "putwchar";
  } else if (fnid == 0xbb605c96) {
    return "pvalloc";
  } else if (fnid == 0xa9f68eff) {
    return "qsort";
  } else if (fnid == 0x15bdcc00) {
    return "rand";
  } else if (fnid == 0x4911ff9c) {
    return "rand_int31_TT800";
  } else if (fnid == 0x5dbceee3) {
    return "rand_int32_TT800";
  } else if (fnid == 0xa3da58f6) {
    return "rand_real1_TT800";
  } else if (fnid == 0xeb40c9ec) {
    return "rand_real2_TT800";
  } else if (fnid == 0xc78df618) {
    return "rand_real3_TT800";
  } else if (fnid == 0x508196b4) {
    return "raw_spu_printf";
  } else if (fnid == 0x313f04ab) {
    return "raw_spu_read_char";
  } else if (fnid == 0xe3d91db3) {
    return "raw_spu_read_double";
  } else if (fnid == 0x44d7cae8) {
    return "raw_spu_read_float";
  } else if (fnid == 0x9234f738) {
    return "raw_spu_read_int";
  } else if (fnid == 0x64aaf016) {
    return "raw_spu_read_ldouble";
  } else if (fnid == 0xfd6a1ddb) {
    return "raw_spu_read_llong";
  } else if (fnid == 0x90457fe3) {
    return "raw_spu_read_long";
  } else if (fnid == 0x128b334f) {
    return "raw_spu_read_mem";
  } else if (fnid == 0xbec43f86) {
    return "raw_spu_read_ptr";
  } else if (fnid == 0x2bc9dee6) {
    return "raw_spu_read_short";
  } else if (fnid == 0x28b92ebf) {
    return "raw_spu_read_uchar";
  } else if (fnid == 0x532b03be) {
    return "raw_spu_read_uint";
  } else if (fnid == 0x59640bc6) {
    return "raw_spu_read_ullong";
  } else if (fnid == 0xb9ed25d4) {
    return "raw_spu_read_ulong";
  } else if (fnid == 0x0ff4722c) {
    return "raw_spu_read_ushort";
  } else if (fnid == 0xc1b4bbb9) {
    return "raw_spu_write_char";
  } else if (fnid == 0x0cae547f) {
    return "raw_spu_write_double";
  } else if (fnid == 0x01508f24) {
    return "raw_spu_write_float";
  } else if (fnid == 0xcbdc3a6d) {
    return "raw_spu_write_int";
  } else if (fnid == 0x5cc71eee) {
    return "raw_spu_write_ldouble";
  } else if (fnid == 0x36feb965) {
    return "raw_spu_write_llong";
  } else if (fnid == 0xe9a2cc40) {
    return "raw_spu_write_long";
  } else if (fnid == 0x498a5036) {
    return "raw_spu_write_mem";
  } else if (fnid == 0x676e3e7a) {
    return "raw_spu_write_ptr";
  } else if (fnid == 0x04a1f19d) {
    return "raw_spu_write_short";
  } else if (fnid == 0x882e7760) {
    return "raw_spu_write_uchar";
  } else if (fnid == 0x7817edf0) {
    return "raw_spu_write_uint";
  } else if (fnid == 0x72236cbc) {
    return "raw_spu_write_ullong";
  } else if (fnid == 0x98f0eeab) {
    return "raw_spu_write_ulong";
  } else if (fnid == 0x4bb8e2b2) {
    return "raw_spu_write_ushort";
  } else if (fnid == 0xfa00d211) {
    return "read";
  } else if (fnid == 0x2b81fb7f) {
    return "readdir";
  } else if (fnid == 0xf7a14a22) {
    return "realloc";
  } else if (fnid == 0xb569849d) {
    return "reallocalign";
  } else if (fnid == 0x8a71132c) {
    return "remove";
  } else if (fnid == 0x75d4485c) {
    return "rename";
  } else if (fnid == 0x54f57626) {
    return "rewind";
  } else if (fnid == 0x7e7017b1) {
    return "rmdir";
  } else if (fnid == 0xf7d51596) {
    return "scanf";
  } else if (fnid == 0x93427cb9) {
    return "setbuf";
  } else if (fnid == 0xf9dae72c) {
    return "setjmp";
  } else if (fnid == 0x1855b9b1) {
    return "setlocale";
  } else if (fnid == 0x703ec767) {
    return "setvbuf";
  } else if (fnid == 0x3a840ae3) {
    return "snprintf";
  } else if (fnid == 0x273b9711) {
    return "sprintf";
  } else if (fnid == 0x1dd0d4c5) {
    return "spu_printf_attach_group";
  } else if (fnid == 0x72b84004) {
    return "spu_printf_attach_thread";
  } else if (fnid == 0x7ea8d860) {
    return "spu_printf_detach_group";
  } else if (fnid == 0xcfbfb7a7) {
    return "spu_printf_detach_thread";
  } else if (fnid == 0x00acf0e5) {
    return "spu_printf_finalize";
  } else if (fnid == 0xc3c598e2) {
    return "spu_printf_initialize";
  } else if (fnid == 0x54c2844e) {
    return "spu_raw_snprintf";
  } else if (fnid == 0xc15e657e) {
    return "spu_raw_sprintf";
  } else if (fnid == 0xb1f4779d) {
    return "spu_thread_printf";
  } else if (fnid == 0x783636d1) {
    return "spu_thread_read_char";
  } else if (fnid == 0x02f4d325) {
    return "spu_thread_read_double";
  } else if (fnid == 0x5a74f774) {
    return "spu_thread_read_float";
  } else if (fnid == 0x1e9d2b4f) {
    return "spu_thread_read_int";
  } else if (fnid == 0x0a4e2541) {
    return "spu_thread_read_ldouble";
  } else if (fnid == 0xec9e7cb9) {
    return "spu_thread_read_llong";
  } else if (fnid == 0x15362bc9) {
    return "spu_thread_read_long";
  } else if (fnid == 0x96b6baa6) {
    return "spu_thread_read_mem";
  } else if (fnid == 0x206612c4) {
    return "spu_thread_read_ptr";
  } else if (fnid == 0xfd0cb96d) {
    return "spu_thread_read_short";
  } else if (fnid == 0xbe6e5c58) {
    return "spu_thread_read_uchar";
  } else if (fnid == 0x0a1d4b00) {
    return "spu_thread_read_uint";
  } else if (fnid == 0x7b9c592e) {
    return "spu_thread_read_ullong";
  } else if (fnid == 0x17c031d7) {
    return "spu_thread_read_ulong";
  } else if (fnid == 0xa568db82) {
    return "spu_thread_read_ushort";
  } else if (fnid == 0x115e2f70) {
    return "spu_thread_snprintf";
  } else if (fnid == 0x00fb4a6b) {
    return "spu_thintf";
  } else if (fnid == 0x938bfcf7) {
    return "spu_thread_write_char";
  } else if (fnid == 0x67582370) {
    return "spu_thread_write_double";
  } else if (fnid == 0xf8935fe3) {
    return "spu_thread_write_float";
  } else if (fnid == 0x9cab08d1) {
    return "spu_thread_write_int";
  } else if (fnid == 0xfd461e85) {
    return "spu_thread_write_ldouble";
  } else if (fnid == 0xf2fca4b2) {
    return "spu_thread_write_llong";
  } else if (fnid == 0x216984ed) {
    return "spu_thread_write_long";
  } else if (fnid == 0x4544c2de) {
    return "spu_thread_write_mem";
  } else if (fnid == 0x7b5aac20) {
    return "spu_thread_write_ptr";
  } else if (fnid == 0x3f125e2e) {
    return "spu_thread_write_short";
  } else if (fnid == 0x896e1bfd) {
    return "spu_thread_write_uchar";
  } else if (fnid == 0x9c7028a5) {
    return "spu_thread_write_uint";
  } else if (fnid == 0xc7b62ab8) {
    return "spu_thread_write_ullong";
  } else if (fnid == 0xf4207734) {
    return "spu_thread_write_ulong";
  } else if (fnid == 0xd5c8cb55) {
    return "spu_thread_write_ushort";
  } else if (fnid == 0x0d2a593b) {
    return "srand";
  } else if (fnid == 0xe9b560a5) {
    return "sscanf";
  } else if (fnid == 0x717b2502) {
    return "stat";
  } else if (fnid == 0xb6d92ac3) {
    return "strcasecmp";
  } else if (fnid == 0xddbac025) {
    return "strcasecmp_ascii";
  } else if (fnid == 0xaa9635d7) {
    return "strcat";
  } else if (fnid == 0xdebee2af) {
    return "strchr";
  } else if (fnid == 0x3d85d6f8) {
    return "strcmp";
  } else if (fnid == 0x9eb25e00) {
    return "strcoll";
  } else if (fnid == 0x04a183fc) {
    return "strcpy";
  } else if (fnid == 0xf7908e27) {
    return "strcspn";
  } else if (fnid == 0xfc0428a6) {
    return "strdup";
  } else if (fnid == 0x44796e5c) {
    return "strerror";
  } else if (fnid == 0xcb9c535b) {
    return "strftime";
  } else if (fnid == 0x2f45d39c) {
    return "strlen";
  } else if (fnid == 0xb6257e3d) {
    return "strncasecmp";
  } else if (fnid == 0x99782342) {
    return "strncasecmp_ascii";
  } else if (fnid == 0x589b5314) {
    return "strncat";
  } else if (fnid == 0xe1e83c65) {
    return "strncmp";
  } else if (fnid == 0x8ab0abc6) {
    return "strncpy";
  } else if (fnid == 0xf89dc648) {
    return "strpbrk";
  } else if (fnid == 0x73eae03d) {
    return "strrchr";
  } else if (fnid == 0x112ea8ea) {
    return "strspn";
  } else if (fnid == 0xc5c09834) {
    return "strstr";
  } else if (fnid == 0xd7dc3a8f) {
    return "strtod";
  } else if (fnid == 0x67d6334b) {
    return "strtof";
  } else if (fnid == 0xff689124) {
    return "strtoimax";
  } else if (fnid == 0xe40ba755) {
    return "strtok";
  } else if (fnid == 0xb738027a) {
    return "strtok_r";
  } else if (fnid == 0xd14ece90) {
    return "strtol";
  } else if (fnid == 0x9c9d7b0d) {
    return "strtold";
  } else if (fnid == 0x59e8dd58) {
    return "strtoll";
  } else if (fnid == 0xda5a7eb8) {
    return "strtoul";
  } else if (fnid == 0x36f2b4ed) {
    return "strtoull";
  } else if (fnid == 0x90b27880) {
    return "strtoumax";
  } else if (fnid == 0x09cbee1e) {
    return "strxfrm";
  } else if (fnid == 0x62bf1d6c) {
    return "swprintf";
  } else if (fnid == 0x3a210c93) {
    return "swscanf";
  } else if (fnid == 0x89f6f026) {
    return "time";
  } else if (fnid == 0x6660fc8d) {
    return "TlsGetValue";
  } else if (fnid == 0xa8a6f615) {
    return "TlsSetValue";
  } else if (fnid == 0x8a847b51) {
    return "tmpfile";
  } else if (fnid == 0x3512ad38) {
    return "tmpnam";
  } else if (fnid == 0x93a3e3ac) {
    return "tolower";
  } else if (fnid == 0x86b4c669) {
    return "tolower_ascii";
  } else if (fnid == 0xa650df19) {
    return "toupper";
  } else if (fnid == 0x0b9ecb98) {
    return "toupper_ascii";
  } else if (fnid == 0x21807b8e) {
    return "towctrans";
  } else if (fnid == 0x130d20a5) {
    return "towlower";
  } else if (fnid == 0xf5f7dda8) {
    return "towupper";
  } else if (fnid == 0x1ab01ea8) {
    return "truncate";
  } else if (fnid == 0x9eee5387) {
    return "truncate64";
  } else if (fnid == 0xe6a7de0a) {
    return "ungetc";
  } else if (fnid == 0x813a9666) {
    return "ungetwc";
  } else if (fnid == 0xef110b6b) {
    return "unlink";
  } else if (fnid == 0x8342b757) {
    return "utime";
  } else if (fnid == 0x39bf419c) {
    return "valloc";
  } else if (fnid == 0xfb2081fd) {
    return "vfprintf";
  } else if (fnid == 0x4b36c0e0) {
    return "vfscanf";
  } else if (fnid == 0x3d5fdea7) {
    return "vfwprintf";
  } else if (fnid == 0x0f60eb63) {
    return "vfwscanf";
  } else if (fnid == 0xe48348e9) {
    return "vprintf";
  } else if (fnid == 0xf7583d67) {
    return "vscanf";
  } else if (fnid == 0x99a72146) {
    return "vsnprintf";
  } else if (fnid == 0x7ae82e0f) {
    return "vsprintf";
  } else if (fnid == 0xc97a17d7) {
    return "vsscanf";
  } else if (fnid == 0x4b6a4010) {
    return "vswprintf";
  } else if (fnid == 0x1c0e8ab6) {
    return "vswscanf";
  } else if (fnid == 0x88e009f5) {
    return "vwprintf";
  } else if (fnid == 0xeb8abe73) {
    return "vwscanf";
  } else if (fnid == 0xb2702e15) {
    return "wcrtomb";
  } else if (fnid == 0x7fdcf73e) {
    return "wcscat";
  } else if (fnid == 0x82a3cc30) {
    return "wcschr";
  } else if (fnid == 0xf0776a44) {
    return "wcscmp";
  } else if (fnid == 0x75f98579) {
    return "wcscoll";
  } else if (fnid == 0xf41355f9) {
    return "wcscpy";
  } else if (fnid == 0xf3ef3678) {
    return "wcscspn";
  } else if (fnid == 0x17752bab) {
    return "wcsftime";
  } else if (fnid == 0x65e8d4d0) {
    return "wcslen";
  } else if (fnid == 0x9439e4cd) {
    return "wcsncat";
  } else if (fnid == 0x6d5115b0) {
    return "wcsncmp";
  } else if (fnid == 0x84378ddc) {
    return "wcsncpy";
  } else if (fnid == 0x5b4b6d6d) {
    return "wcspbrk";
  } else if (fnid == 0xb7ab5127) {
    return "wcsrchr";
  } else if (fnid == 0x2b45cb34) {
    return "wcsrtombs";
  } else if (fnid == 0x66b71b17) {
    return "wcsspn";
  } else if (fnid == 0xa797790f) {
    return "wcsstr";
  } else if (fnid == 0xc08cc41d) {
    return "wcstod";
  } else if (fnid == 0xa874036a) {
    return "wcstof";
  } else if (fnid == 0xe4c51d4c) {
    return "wcstoimax";
  } else if (fnid == 0x13808972) {
    return "wcstok";
  } else if (fnid == 0x116cda13) {
    return "wcstol";
  } else if (fnid == 0x6514dbe5) {
    return "wcstold";
  } else if (fnid == 0xa30d4797) {
    return "wcstoll";
  } else if (fnid == 0xb680e240) {
    return "wcstombs";
  } else if (fnid == 0xabc27420) {
    return "wcstoul";
  } else if (fnid == 0xb43c25c7) {
    return "wcstoull";
  } else if (fnid == 0x1ae06860) {
    return "wcstoumax";
  } else if (fnid == 0x4595c42b) {
    return "wcsxfrm";
  } else if (fnid == 0x73096858) {
    return "wctob";
  } else if (fnid == 0x96ea4de6) {
    return "wctomb";
  } else if (fnid == 0x575fb268) {
    return "wctrans";
  } else if (fnid == 0x770bfaee) {
    return "wctype";
  } else if (fnid == 0x4e72f810) {
    return "wmemchr";
  } else if (fnid == 0xac758d20) {
    return "wmemcmp";
  } else if (fnid == 0xa8b07f1b) {
    return "wmemcpy";
  } else if (fnid == 0x99b38ce7) {
    return "wmemmove";
  } else if (fnid == 0xf06eed36) {
    return "wmemset";
  } else if (fnid == 0x9abe8c74) {
    return "wprintf";
  } else if (fnid == 0x526a496a) {
    return "write";
  } else if (fnid == 0x18e48b5d) {
    return "wscanf";
  } else if (fnid == 0x9fded78a) {
    return "_acosf4";
  } else if (fnid == 0x6b660894) {
    return "_acosf4fast";
  } else if (fnid == 0x0e53319f) {
    return "_asinf4";
  } else if (fnid == 0x14208b00) {
    return "_asinf4fast";
  } else if (fnid == 0xc7369fce) {
    return "_Atan";
  } else if (fnid == 0xc90f4bbc) {
    return "_atan2f4";
  } else if (fnid == 0xec7da0c8) {
    return "_atan2f4fast";
  } else if (fnid == 0x76e639ec) {
    return "_atanf4";
  } else if (fnid == 0x70357b12) {
    return "_atanf4fast";
  } else if (fnid == 0x4ab22a63) {
    return "_Caddcc";
  } else if (fnid == 0x266d2473) {
    return "_Caddcr";
  } else if (fnid == 0x3ec9de23) {
    return "_cbrtf4";
  } else if (fnid == 0xf3bd7d08) {
    return "_cbrtf4fast";
  } else if (fnid == 0xa8d180e8) {
    return "_Cbuild";
  } else if (fnid == 0xeac62795) {
    return "_Cdivcc";
  } else if (fnid == 0xfa765d42) {
    return "_Cdivcr";
  } else if (fnid == 0x3d901a10) {
    return "_ceilf4";
  } else if (fnid == 0xcac167a5) {
    return "_Cmulcc";
  } else if (fnid == 0x1498a072) {
    return "_Cmulcr";
  } else if (fnid == 0xa0160c30) {
    return "_copysignf4";
  } else if (fnid == 0x0bb036a6) {
    return "_cosf4";
  } else if (fnid == 0xcb6a147e) {
    return "_cosf4fast";
  } else if (fnid == 0x7d6191d0) {
    return "_Cosh";
  } else if (fnid == 0x315673f6) {
    return "_Csubcc";
  } else if (fnid == 0xee0db701) {
    return "_Csubcr";
  } else if (fnid == 0x3eeedb0e) {
    return "_Dclass";
  } else if (fnid == 0xad17e787) {
    return "_Dint";
  } else if (fnid == 0x9245e01b) {
    return "_divf4";
  } else if (fnid == 0x71f2bc56) {
    return "_divf4fast";
  } else if (fnid == 0xee303936) {
    return "_Dsign";
  } else if (fnid == 0xb94b9d13) {
    return "_Dtest";
  } else if (fnid == 0x0cf9b8bd) {
    return "_Erfc";
  } else if (fnid == 0xdfd41734) {
    return "_Exp";
  } else if (fnid == 0x22c3e308) {
    return "_exp2f4";
  } else if (fnid == 0x4875601d) {
    return "_exp2f4fast";
  } else if (fnid == 0xb8aa984e) {
    return "_expf4";
  } else if (fnid == 0xe3e379b8) {
    return "_expf4fast";
  } else if (fnid == 0x60e9ff3c) {
    return "_expm1f4";
  } else if (fnid == 0x398483aa) {
    return "_expm1f4fast";
  } else if (fnid == 0x9e289062) {
    return "_f_ceilf";
  } else if (fnid == 0xfae9e727) {
    return "_f_copysignf";
  } else if (fnid == 0x734ca589) {
    return "_f_cosf";
  } else if (fnid == 0x8d5858db) {
    return "_f_exp2f";
  } else if (fnid == 0x03593d2c) {
    return "_f_expf";
  } else if (fnid == 0x3cb818fa) {
    return "_f_fdimf";
  } else if (fnid == 0x2df339bc) {
    return "_f_floorf";
  } else if (fnid == 0xe92f3fb8) {
    return "_f_fmaf";
  } else if (fnid == 0xf7844153) {
    return "_f_fmaxf";
  } else if (fnid == 0x8c85369b) {
    return "_f_fminf";
  } else if (fnid == 0x02e68d44) {
    return "_f_fmodf";
  } else if (fnid == 0x414c5ecc) {
    return "_f_hypotf";
  } else if (fnid == 0x48157605) {
    return "_f_llrintf";
  } else if (fnid == 0xbfda6837) {
    return "_f_log10f";
  } else if (fnid == 0xdc151707) {
    return "_f_log2f";
  } else if (fnid == 0xeed82401) {
    return "_f_logf";
  } else if (fnid == 0x358d7f93) {
    return "_f_lrintf";
  } else if (fnid == 0x7919f414) {
    return "_f_nearbyintf";
  } else if (fnid == 0x41d1b236) {
    return "_f_rintf";
  } else if (fnid == 0x90f0242f) {
    return "_f_sinf";
  } else if (fnid == 0xec43b983) {
    return "_f_sqrtf";
  } else if (fnid == 0x40a2e212) {
    return "_fabsf4";
  } else if (fnid == 0xf16568af) {
    return "_FAtan";
  } else if (fnid == 0x5bfd37be) {
    return "_FCaddcc";
  } else if (fnid == 0xd70df92a) {
    return "_FCaddcr";
  } else if (fnid == 0x01ecef7d) {
    return "_FCbuild";
  } else if (fnid == 0x70f71871) {
    return "_FCdivcc";
  } else if (fnid == 0x33f27f25) {
    return "_FCdivcr";
  } else if (fnid == 0x63bbdfa6) {
    return "_FCmulcc";
  } else if (fnid == 0x241f9337) {
    return "_FCmulcr";
  } else if (fnid == 0x2e69bb2a) {
    return "_FCosh";
  } else if (fnid == 0x95dfecb1) {
    return "_FCsubcc";
  } else if (fnid == 0x6ef6b083) {
    return "_FCsubcr";
  } else if (fnid == 0x007854f4) {
    return "_FDclass";
  } else if (fnid == 0x054aae63) {
    return "_fdimf4";
  } else if (fnid == 0x48d462a9) {
    return "_FDint";
  } else if (fnid == 0xa8c16038) {
    return "_FDsign";
  } else if (fnid == 0x9232baea) {
    return "_FDtest";
  } else if (fnid == 0x003395d9) {
    return "_Feraise";
  } else if (fnid == 0xfbe88922) {
    return "_FErfc";
  } else if (fnid == 0x05f1dc9e) {
    return "_FExp";
  } else if (fnid == 0xda31fc5d) {
    return "_FFpcomp";
  } else if (fnid == 0x9616e336) {
    return "_FHypot";
  } else if (fnid == 0xad5d3e57) {
    return "_FLgamma";
  } else if (fnid == 0x71293b71) {
    return "_FLog";
  } else if (fnid == 0x1c11885d) {
    return "_floorf4";
  } else if (fnid == 0xd76a16da) {
    return "_fmaf4";
  } else if (fnid == 0x08139bd2) {
    return "_fmaxf4";
  } else if (fnid == 0x012d0a91) {
    return "_fminf4";
  } else if (fnid == 0xfcedabc3) {
    return "_fmodf4";
  } else if (fnid == 0xe5d2293f) {
    return "_Force_raise";
  } else if (fnid == 0x790c53bd) {
    return "_Fpcomp";
  } else if (fnid == 0x6fcc1e27) {
    return "_FPoly";
  } else if (fnid == 0x642e3d18) {
    return "_frexpf4";
  } else if (fnid == 0xb5e28191) {
    return "_FSin";
  } else if (fnid == 0xccc66f11) {
    return "_FSinh";
  } else if (fnid == 0x418036e3) {
    return "_FTgamma";
  } else if (fnid == 0xd28ef6dd) {
    return "_Hypot";
  } else if (fnid == 0xd0fd3ca8) {
    return "_hypotf4";
  } else if (fnid == 0xe31cc0d3) {
    return "_ilogbf4";
  } else if (fnid == 0x89d1d168) {
    return "_LAtan";
  } else if (fnid == 0xd5d38552) {
    return "_LCaddcc";
  } else if (fnid == 0x0d86295d) {
    return "_LCaddcr";
  } else if (fnid == 0x07f400e3) {
    return "_LCbuild";
  } else if (fnid == 0x1be996cc) {
    return "_LCdivcc";
  } else if (fnid == 0xaaa270dc) {
    return "_LCdivcr";
  } else if (fnid == 0xfffe79bf) {
    return "_LCmulcc";
  } else if (fnid == 0xe9ac8223) {
    return "_LCmulcr";
  } else if (fnid == 0xad3a093d) {
    return "_LCosh";
  } else if (fnid == 0x0f721a9d) {
    return "_LCsubcc";
  } else if (fnid == 0x81daf880) {
    return "_LCsubcr";
  } else if (fnid == 0x6b6ab2a9) {
    return "_LDclass";
  } else if (fnid == 0xc9c536ce) {
    return "_ldexpf4";
  } else if (fnid == 0xb412a8dc) {
    return "_LDint";
  } else if (fnid == 0x33e5929b) {
    return "_LDsign";
  } else if (fnid == 0x3c616743) {
    return "_LDtest";
  } else if (fnid == 0x5ee37927) {
    return "_LErfc";
  } else if (fnid == 0x4111b546) {
    return "_LExp";
  } else if (fnid == 0xc7b45a19) {
    return "_LFpcomp";
  } else if (fnid == 0xafcfdad7) {
    return "_Lgamma";
  } else if (fnid == 0x947ae18e) {
    return "_LHypot";
  } else if (fnid == 0xb348c5c2) {
    return "_LLgamma";
  } else if (fnid == 0x1d35bfe4) {
    return "_LLog";
  } else if (fnid == 0xca463458) {
    return "_Log";
  } else if (fnid == 0x6261c0b5) {
    return "_log10f4";
  } else if (fnid == 0xcbdf9afb) {
    return "_log10f4fast";
  } else if (fnid == 0x842cb14d) {
    return "_log1pf4";
  } else if (fnid == 0x405f9727) {
    return "_log1pf4fast";
  } else if (fnid == 0xfe23dbe9) {
    return "_log2f4";
  } else if (fnid == 0xde7833f2) {
    return "_log2f4fast";
  } else if (fnid == 0x72f1f64b) {
    return "_logbf4";
  } else if (fnid == 0x8f2bcdb5) {
    return "_logf4";
  } else if (fnid == 0xc0bcf25e) {
    return "_logf4fast";
  } else if (fnid == 0xe584836c) {
    return "_LPoly";
  } else if (fnid == 0xa2c81938) {
    return "_LSin";
  } else if (fnid == 0x1bcdeb47) {
    return "_LSinh";
  } else if (fnid == 0x8bd1deb2) {
    return "_LTgamma";
  } else if (fnid == 0x1d5bf5d0) {
    return "_modff4";
  } else if (fnid == 0x29685118) {
    return "_negatef4";
  } else if (fnid == 0x3f701e78) {
    return "_Poly";
  } else if (fnid == 0x12de4e46) {
    return "_powf4";
  } else if (fnid == 0xe5a0be9f) {
    return "_powf4fast";
  } else if (fnid == 0x0522d1af) {
    return "_recipf4";
  } else if (fnid == 0x17cd5d87) {
    return "_recipf4fast";
  } else if (fnid == 0xcfee82d8) {
    return "_remainderf4";
  } else if (fnid == 0x7a893af1) {
    return "_rsqrtf4";
  } else if (fnid == 0xb89863bc) {
    return "_rsqrtf4fast";
  } else if (fnid == 0x742f12b4) {
    return "_Sin";
  } else if (fnid == 0x6ad1c42b) {
    return "_sincosf4";
  } else if (fnid == 0xb5961d4e) {
    return "_sincosf4fast";
  } else if (fnid == 0x016556df) {
    return "_sinf4";
  } else if (fnid == 0x1e9fd6ba) {
    return "_sinf4fast";
  } else if (fnid == 0xd612fa16) {
    return "_Sinh";
  } else if (fnid == 0x76afaf04) {
    return "_sqrtf4";
  } else if (fnid == 0x8fb7bac7) {
    return "_sqrtf4fast";
  } else if (fnid == 0xc9481758) {
    return "_tanf4";
  } else if (fnid == 0x938fb946) {
    return "_tanf4fast";
  } else if (fnid == 0xb4f4513e) {
    return "_Tgamma";
  } else if (fnid == 0xf537d837) {
    return "_truncf4";
  } else if (fnid == 0x1313a420) {
    return "acos";
  } else if (fnid == 0xdece76a6) {
    return "acosf";
  } else if (fnid == 0x1acb2b16) {
    return "acosf4";
  } else if (fnid == 0xe8fcf1f8) {
    return "acosf4fast";
  } else if (fnid == 0x78e4590a) {
    return "acosh";
  } else if (fnid == 0x6c6285c6) {
    return "acoshf";
  } else if (fnid == 0xa5d0b260) {
    return "acoshl";
  } else if (fnid == 0x5516d621) {
    return "acosl";
  } else if (fnid == 0x05efc660) {
    return "asin";
  } else if (fnid == 0x411434bb) {
    return "asinf";
  } else if (fnid == 0x010818fc) {
    return "asinf4";
  } else if (fnid == 0x91cdfdb0) {
    return "asinf4fast";
  } else if (fnid == 0x26ef50ed) {
    return "asinh";
  } else if (fnid == 0xbd8bb75c) {
    return "asinhf";
  } else if (fnid == 0x0829a21d) {
    return "asinhl";
  } else if (fnid == 0x575e9b6e) {
    return "asinl";
  } else if (fnid == 0x7f579e03) {
    return "atan";
  } else if (fnid == 0x31db8c89) {
    return "atan2";
  } else if (fnid == 0xfb932a56) {
    return "atan2f";
  } else if (fnid == 0xd8c4096d) {
    return "atan2f4";
  } else if (fnid == 0xdd8660d2) {
    return "atan2f4fast";
  } else if (fnid == 0x3d4efafb) {
    return "atan2l";
  } else if (fnid == 0x3c057fbd) {
    return "atanf";
  } else if (fnid == 0x347c1ee1) {
    return "atanf4";
  } else if (fnid == 0x178d98dd) {
    return "atanf4fast";
  } else if (fnid == 0x596ab55c) {
    return "atanh";
  } else if (fnid == 0xe1288c47) {
    return "atanhf";
  } else if (fnid == 0xa46a70a1) {
    return "atanhl";
  } else if (fnid == 0xda217d1f) {
    return "atanl";
  } else if (fnid == 0xa92bcc85) {
    return "cabs";
  } else if (fnid == 0x812ed488) {
    return "cabsf";
  } else if (fnid == 0x43d522f4) {
    return "cabsl";
  } else if (fnid == 0x8e258fa0) {
    return "cacos";
  } else if (fnid == 0x434881a0) {
    return "cacosf";
  } else if (fnid == 0x970a3432) {
    return "cacosh";
  } else if (fnid == 0x8e01379e) {
    return "cacoshf";
  } else if (fnid == 0xfdec16e1) {
    return "cacoshl";
  } else if (fnid == 0x2a4dcbad) {
    return "cacosl";
  } else if (fnid == 0x7048396e) {
    return "carg";
  } else if (fnid == 0x501c412f) {
    return "cargf";
  } else if (fnid == 0x904e646b) {
    return "cargl";
  } else if (fnid == 0x9af30eaf) {
    return "casin";
  } else if (fnid == 0x1225dd31) {
    return "casinf";
  } else if (fnid == 0x6cc4bd13) {
    return "casinh";
  } else if (fnid == 0x68a8957f) {
    return "casinhf";
  } else if (fnid == 0x5b474c22) {
    return "casinhl";
  } else if (fnid == 0xdffb4e3c) {
    return "casinl";
  } else if (fnid == 0xa56557b6) {
    return "catan";
  } else if (fnid == 0x99a6c261) {
    return "catanf";
  } else if (fnid == 0x5ee10a95) {
    return "catanh";
  } else if (fnid == 0x0b3f4e90) {
    return "catanhf";
  } else if (fnid == 0x89b507b3) {
    return "catanhl";
  } else if (fnid == 0x61250988) {
    return "catanl";
  } else if (fnid == 0x4020f5ef) {
    return "cbrt";
  } else if (fnid == 0x453f9e91) {
    return "cbrtf";
  } else if (fnid == 0xc406dd09) {
    return "cbrtf4";
  } else if (fnid == 0xbb208b20) {
    return "cbrtf4fast";
  } else if (fnid == 0xc94fcc63) {
    return "cbrtl";
  } else if (fnid == 0x9e8130b6) {
    return "ccos";
  } else if (fnid == 0xe2b596ec) {
    return "ccosf";
  } else if (fnid == 0x834f5917) {
    return "ccosh";
  } else if (fnid == 0xf0ab77c1) {
    return "ccoshf";
  } else if (fnid == 0xe1c71b05) {
    return "ccoshl";
  } else if (fnid == 0x38ba5590) {
    return "ccosl";
  } else if (fnid == 0x21e6d304) {
    return "ceil";
  } else if (fnid == 0xbaf11866) {
    return "ceilf";
  } else if (fnid == 0xeac7ca2c) {
    return "ceilf4";
  } else if (fnid == 0xdd92118e) {
    return "ceill";
  } else if (fnid == 0x488df791) {
    return "cexp";
  } else if (fnid == 0x6f5dd7d2) {
    return "cexpf";
  } else if (fnid == 0x2118fe46) {
    return "cexpl";
  } else if (fnid == 0x833e6b0e) {
    return "cimag";
  } else if (fnid == 0xafd9a625) {
    return "cimagf";
  } else if (fnid == 0x12e04cd7) {
    return "cimagl";
  } else if (fnid == 0x3593a445) {
    return "clog";
  } else if (fnid == 0x1988732d) {
    return "clog10";
  } else if (fnid == 0xd1a3574c) {
    return "clog10f";
  } else if (fnid == 0xb0fa1592) {
    return "clog10l";
  } else if (fnid == 0x9700d9cd) {
    return "clogf";
  } else if (fnid == 0x5b18eded) {
    return "clogl";
  } else if (fnid == 0xf1aaa2f8) {
    return "conj";
  } else if (fnid == 0xd125b89e) {
    return "conjf";
  } else if (fnid == 0x080414bd) {
    return "conjl";
  } else if (fnid == 0x4e010403) {
    return "copysign";
  } else if (fnid == 0xacca2f83) {
    return "copysignf";
  } else if (fnid == 0xeda86c48) {
    return "copysignf4";
  } else if (fnid == 0x645557bd) {
    return "copysignl";
  } else if (fnid == 0x9f78f052) {
    return "cos";
  } else if (fnid == 0x24497c52) {
    return "cosf";
  } else if (fnid == 0xf5cd1e19) {
    return "cosf4";
  } else if (fnid == 0x32f994a1) {
    return "cosf4fast";
  } else if (fnid == 0x8217e783) {
    return "cosh";
  } else if (fnid == 0x36778d1b) {
    return "coshf";
  } else if (fnid == 0xba84eab5) {
    return "coshl";
  } else if (fnid == 0x26deed0b) {
    return "cosl";
  } else if (fnid == 0x373054d1) {
    return "cpow";
  } else if (fnid == 0xff036800) {
    return "cpowf";
  } else if (fnid == 0xd5adc4b2) {
    return "cpowl";
  } else if (fnid == 0x729b7269) {
    return "cproj";
  } else if (fnid == 0xcaaf7ae7) {
    return "cprojf";
  } else if (fnid == 0xbf23f2e7) {
    return "cprojl";
  } else if (fnid == 0x35d3f688) {
    return "creal";
  } else if (fnid == 0xe9f501df) {
    return "crealf";
  } else if (fnid == 0x964ac044) {
    return "creall";
  } else if (fnid == 0x032cc709) {
    return "csin";
  } else if (fnid == 0xba136594) {
    return "csinf";
  } else if (fnid == 0x07274304) {
    return "csinh";
  } else if (fnid == 0x3436f008) {
    return "csinhf";
  } else if (fnid == 0x64abdb4d) {
    return "csinhl";
  } else if (fnid == 0x2c601f3b) {
    return "csinl";
  } else if (fnid == 0x2033eeb7) {
    return "csqrt";
  } else if (fnid == 0xe2de89e6) {
    return "csqrtf";
  } else if (fnid == 0x46b66f76) {
    return "csqrtl";
  } else if (fnid == 0xe93abfca) {
    return "ctan";
  } else if (fnid == 0x7793a86b) {
    return "ctanf";
  } else if (fnid == 0xd2a666c9) {
    return "ctanh";
  } else if (fnid == 0xf0947035) {
    return "ctanhf";
  } else if (fnid == 0x3d549f2a) {
    return "ctanhl";
  } else if (fnid == 0xa20827a8) {
    return "ctanl";
  } else if (fnid == 0x03aea906) {
    return "divf4";
  } else if (fnid == 0x657d0e83) {
    return "divf4fast";
  } else if (fnid == 0x8bd67efc) {
    return "erf";
  } else if (fnid == 0x2627d6b2) {
    return "erfc";
  } else if (fnid == 0xa9e039c4) {
    return "erfcf";
  } else if (fnid == 0xaddce673) {
    return "erfcl";
  } else if (fnid == 0xd40f3f2c) {
    return "erff";
  } else if (fnid == 0xe58fc9b5) {
    return "erfl";
  } else if (fnid == 0x18668ce3) {
    return "exp";
  } else if (fnid == 0x4ae52dd3) {
    return "exp2";
  } else if (fnid == 0xcb6599c0) {
    return "exp2f";
  } else if (fnid == 0x5e48dede) {
    return "exp2f4";
  } else if (fnid == 0x2ec867b4) {
    return "exp2f4fast";
  } else if (fnid == 0x9f0efc6e) {
    return "exp2l";
  } else if (fnid == 0xfcf08193) {
    return "expf";
  } else if (fnid == 0x137f7e77) {
    return "expf4";
  } else if (fnid == 0x74902d4b) {
    return "expf4fast";
  } else if (fnid == 0x79ba9b5c) {
    return "expl";
  } else if (fnid == 0xc8dd9279) {
    return "expm1";
  } else if (fnid == 0xbb165807) {
    return "expm1f";
  } else if (fnid == 0x1bbdcd9f) {
    return "expm1f4";
  } else if (fnid == 0x47433144) {
    return "expm1f4fast";
  } else if (fnid == 0x0e8573dc) {
    return "expm1l";
  } else if (fnid == 0x705d9e24) {
    return "f_acosf";
  } else if (fnid == 0x4b584841) {
    return "f_asinf";
  } else if (fnid == 0xabdccc7a) {
    return "f_atan2f";
  } else if (fnid == 0x1e85ef02) {
    return "f_atanf";
  } else if (fnid == 0xee204ac6) {
    return "f_ceilf";
  } else if (fnid == 0x642f7d6b) {
    return "f_copysignf";
  } else if (fnid == 0x7ab679da) {
    return "f_cosf";
  } else if (fnid == 0x4a5ae27d) {
    return "f_exp2f";
  } else if (fnid == 0xd8d157f5) {
    return "f_expf";
  } else if (fnid == 0x05cb1718) {
    return "f_fdimf";
  } else if (fnid == 0xb4ef29d5) {
    return "f_floorf";
  } else if (fnid == 0xf83a372f) {
    return "f_fmaf";
  } else if (fnid == 0x39ef81c9) {
    return "f_fmaxf";
  } else if (fnid == 0x3f6262b3) {
    return "f_fminf";
  } else if (fnid == 0x10627248) {
    return "f_fmodf";
  } else if (fnid == 0x3adc01d7) {
    return "f_frexpf";
  } else if (fnid == 0x2cbb6f53) {
    return "f_hypotf";
  } else if (fnid == 0x728149e5) {
    return "f_ldexpf";
  } else if (fnid == 0xafa13040) {
    return "f_llrintf";
  } else if (fnid == 0x6f639afb) {
    return "f_llroundf";
  } else if (fnid == 0x6c009c56) {
    return "f_log10f";
  } else if (fnid == 0xbbaa300b) {
    return "f_log1pf";
  } else if (fnid == 0x6764c707) {
    return "f_log2f";
  } else if (fnid == 0xea1e83e3) {
    return "f_logf";
  } else if (fnid == 0xc7fb73d6) {
    return "f_lrintf";
  } else if (fnid == 0xc477c0f6) {
    return "f_lroundf";
  } else if (fnid == 0x961688d1) {
    return "f_nearbyintf";
  } else if (fnid == 0x00fde072) {
    return "f_powf";
  } else if (fnid == 0x4b03d5b2) {
    return "f_rintf";
  } else if (fnid == 0xb54cc9a1) {
    return "f_sinf";
  } else if (fnid == 0x246ea8d0) {
    return "f_sqrtf";
  } else if (fnid == 0xed9d1ac5) {
    return "f_tanf";
  } else if (fnid == 0x58eb9e57) {
    return "fabs";
  } else if (fnid == 0x3da55602) {
    return "fabsf";
  } else if (fnid == 0xf99da2fc) {
    return "fabsf4";
  } else if (fnid == 0xd42904b7) {
    return "fabsl";
  } else if (fnid == 0xd8270894) {
    return "fdim";
  } else if (fnid == 0x46cf72d9) {
    return "fdimf";
  } else if (fnid == 0x9f65bd34) {
    return "fdimf4";
  } else if (fnid == 0x8b168769) {
    return "fdiml";
  } else if (fnid == 0x4add664c) {
    return "feclearexcept";
  } else if (fnid == 0x238af59b) {
    return "fegetenv";
  } else if (fnid == 0xbbf7354e) {
    return "fegetexceptflag";
  } else if (fnid == 0x892f2590) {
    return "fegetround";
  } else if (fnid == 0xd54039cb) {
    return "fegettrapenable";
  } else if (fnid == 0x417851ce) {
    return "feholdexcept";
  } else if (fnid == 0xe5ea65e8) {
    return "feraiseexcept";
  } else if (fnid == 0x0c14cfcc) {
    return "fesetenv";
  } else if (fnid == 0x3261de11) {
    return "fesetexceptflag";
  } else if (fnid == 0xd97ce5d4) {
    return "fesetround";
  } else if (fnid == 0x72a3ed28) {
    return "fesettrapenable";
  } else if (fnid == 0xc977e1ea) {
    return "fetestexcept";
  } else if (fnid == 0xfa97afbf) {
    return "feupdateenv";
  } else if (fnid == 0x519ebb77) {
    return "floor";
  } else if (fnid == 0x23b985f7) {
    return "floorf";
  } else if (fnid == 0x452ac4bb) {
    return "floorf4";
  } else if (fnid == 0x6df35518) {
    return "floorl";
  } else if (fnid == 0x4826db61) {
    return "fma";
  } else if (fnid == 0x476b5591) {
    return "fmaf";
  } else if (fnid == 0xdc14974c) {
    return "fmaf4";
  } else if (fnid == 0xc7f1d407) {
    return "fmal";
  } else if (fnid == 0x2af4b73b) {
    return "fmax";
  } else if (fnid == 0x895cdb49) {
    return "fmaxf";
  } else if (fnid == 0x752fa85e) {
    return "fmaxf4";
  } else if (fnid == 0x2c45fe6a) {
    return "fmaxl";
  } else if (fnid == 0xa4578433) {
    return "fmin";
  } else if (fnid == 0x7c2eaeb5) {
    return "fminf";
  } else if (fnid == 0xc41f01db) {
    return "fminf4";
  } else if (fnid == 0x00367be0) {
    return "fminl";
  } else if (fnid == 0xe769e5cf) {
    return "fmod";
  } else if (fnid == 0x9a81e583) {
    return "fmodf";
  } else if (fnid == 0xca239640) {
    return "fmodf4";
  } else if (fnid == 0xb598a495) {
    return "fmodl";
  } else if (fnid == 0x7f381837) {
    return "frexp";
  } else if (fnid == 0x6636c4a5) {
    return "frexpf";
  } else if (fnid == 0x3e7eb58f) {
    return "frexpf4";
  } else if (fnid == 0xc357b33a) {
    return "frexpl";
  } else if (fnid == 0x6ddd31b2) {
    return "hypot";
  } else if (fnid == 0xebb4e08a) {
    return "hypotf";
  } else if (fnid == 0x0c9b8305) {
    return "hypotf4";
  } else if (fnid == 0x7831a2e0) {
    return "hypotl";
  } else if (fnid == 0xa823836b) {
    return "ilogb";
  } else if (fnid == 0x65935877) {
    return "ilogbf";
  } else if (fnid == 0x28faaa5a) {
    return "ilogbf4";
  } else if (fnid == 0xc8910002) {
    return "ilogbl";
  } else if (fnid == 0xf4ad6ea8) {
    return "ldexp";
  } else if (fnid == 0x430309a1) {
    return "ldexpf";
  } else if (fnid == 0x3b802524) {
    return "ldexpf4";
  } else if (fnid == 0xd231e30a) {
    return "ldexpl";
  } else if (fnid == 0x69725dce) {
    return "lgamma";
  } else if (fnid == 0x9f03dd3e) {
    return "lgammaf";
  } else if (fnid == 0x749440f9) {
    return "lgammal";
  } else if (fnid == 0xe6c1ff41) {
    return "llrint";
  } else if (fnid == 0x2a89ce33) {
    return "llrintf";
  } else if (fnid == 0x0f02f882) {
    return "llrintl";
  } else if (fnid == 0x01b84b27) {
    return "llround";
  } else if (fnid == 0xa4ca5cf2) {
    return "llroundf";
  } else if (fnid == 0x889cccb0) {
    return "llroundl";
  } else if (fnid == 0x714adce1) {
    return "log";
  } else if (fnid == 0xd8f79f4c) {
    return "log10";
  } else if (fnid == 0x16bf208a) {
    return "log10f";
  } else if (fnid == 0x3459748b) {
    return "log10f4";
  } else if (fnid == 0x05e27a13) {
    return "log10f4fast";
  } else if (fnid == 0x8f96319e) {
    return "log10l";
  } else if (fnid == 0x56c573a8) {
    return "log1p";
  } else if (fnid == 0x21a37b3e) {
    return "log1pf";
  } else if (fnid == 0xa7658186) {
    return "log1pf4";
  } else if (fnid == 0xfb6e6213) {
    return "log1pf4fast";
  } else if (fnid == 0x37345541) {
    return "log1pl";
  } else if (fnid == 0x17316bee) {
    return "log2";
  } else if (fnid == 0xab377381) {
    return "log2f";
  } else if (fnid == 0x07daed62) {
    return "log2f4";
  } else if (fnid == 0x96d1b95e) {
    return "log2f4fast";
  } else if (fnid == 0xfa28434b) {
    return "log2l";
  } else if (fnid == 0x2bb0f2c9) {
    return "logb";
  } else if (fnid == 0xb24bd2f8) {
    return "logbf";
  } else if (fnid == 0x69040b9b) {
    return "logbf4";
  } else if (fnid == 0x4930ac11) {
    return "logbl";
  } else if (fnid == 0xd477852d) {
    return "logf";
  } else if (fnid == 0x30bc7a53) {
    return "logf4";
  } else if (fnid == 0xe913a166) {
    return "logf4fast";
  } else if (fnid == 0x9e3ada21) {
    return "logl";
  } else if (fnid == 0x3ad203fa) {
    return "lrint";
  } else if (fnid == 0x9558ed08) {
    return "lrintf";
  } else if (fnid == 0x35b6e70a) {
    return "lrintl";
  } else if (fnid == 0x772f1e4d) {
    return "lround";
  } else if (fnid == 0xfbb4047a) {
    return "lroundf";
  } else if (fnid == 0x3792b12d) {
    return "lroundl";
  } else if (fnid == 0xa713f8cf) {
    return "modf";
  } else if (fnid == 0xb79012ba) {
    return "modff";
  } else if (fnid == 0xc4cccd1f) {
    return "modff4";
  } else if (fnid == 0x9110708a) {
    return "modfl";
  } else if (fnid == 0x45034943) {
    return "nan";
  } else if (fnid == 0xce91ff18) {
    return "nanf";
  } else if (fnid == 0x2dcab6a4) {
    return "nanl";
  } else if (fnid == 0x758f33dc) {
    return "nearbyint";
  } else if (fnid == 0xc0609820) {
    return "nearbyintf";
  } else if (fnid == 0x75e3e2e9) {
    return "nearbyintl";
  } else if (fnid == 0x664e04b9) {
    return "negatef4";
  } else if (fnid == 0x8ecae294) {
    return "nextafter";
  } else if (fnid == 0xb7696143) {
    return "nextafterf";
  } else if (fnid == 0x68f72416) {
    return "nextafterl";
  } else if (fnid == 0x4cb5fa99) {
    return "nexttoward";
  } else if (fnid == 0x4fa4f5ec) {
    return "nexttowardf";
  } else if (fnid == 0x321c55de) {
    return "nexttowardl";
  } else if (fnid == 0x38e69f09) {
    return "pow";
  } else if (fnid == 0x4ddb926b) {
    return "powf";
  } else if (fnid == 0x4a6ca9a6) {
    return "powf4";
  } else if (fnid == 0xf95b7769) {
    return "powf4fast";
  } else if (fnid == 0x34c0371e) {
    return "powl";
  } else if (fnid == 0xbd7410d9) {
    return "recipf4";
  } else if (fnid == 0x88fb4a66) {
    return "recipf4fast";
  } else if (fnid == 0x44cd6308) {
    return "remainder";
  } else if (fnid == 0xdddabb32) {
    return "remainderf";
  } else if (fnid == 0x4d878773) {
    return "remainderf4";
  } else if (fnid == 0x18b26998) {
    return "remainderl";
  } else if (fnid == 0x4189a367) {
    return "remquo";
  } else if (fnid == 0xbb761c89) {
    return "remquof";
  } else if (fnid == 0xb9d2ad22) {
    return "remquol";
  } else if (fnid == 0x0f428f0f) {
    return "rint";
  } else if (fnid == 0x54d2fb8c) {
    return "rintf";
  } else if (fnid == 0x18ec6099) {
    return "rintl";
  } else if (fnid == 0xf3ec0258) {
    return "round";
  } else if (fnid == 0xc984bf53) {
    return "roundf";
  } else if (fnid == 0x99c228fc) {
    return "roundl";
  } else if (fnid == 0x329ec019) {
    return "rsqrtf4";
  } else if (fnid == 0x1a1adede) {
    return "rsqrtf4fast";
  } else if (fnid == 0x4152669c) {
    return "scalbln";
  } else if (fnid == 0x31be25c3) {
    return "scalblnf";
  } else if (fnid == 0xd48eaae1) {
    return "scalblnl";
  } else if (fnid == 0xc78ac9d0) {
    return "scalbn";
  } else if (fnid == 0x3e919cba) {
    return "scalbnf";
  } else if (fnid == 0x3dfa060f) {
    return "scalbnl";
  } else if (fnid == 0x4eb5eb51) {
    return "sin";
  } else if (fnid == 0xf19c5e94) {
    return "sincosf4";
  } else if (fnid == 0x6e9eb0dc) {
    return "sincosf4fast";
  } else if (fnid == 0x0cbdae68) {
    return "sinf";
  } else if (fnid == 0x0a242ed5) {
    return "sinf4";
  } else if (fnid == 0x547fb4a7) {
    return "sinf4fast";
  } else if (fnid == 0x683cacb3) {
    return "sinh";
  } else if (fnid == 0xd7653782) {
    return "sinhf";
  } else if (fnid == 0x376fb27f) {
    return "sinhl";
  } else if (fnid == 0xd97852b7) {
    return "sinl";
  } else if (fnid == 0x659e011e) {
    return "sqrt";
  } else if (fnid == 0x8451edf0) {
    return "sqrtf";
  } else if (fnid == 0xed05c265) {
    return "sqrtf4";
  } else if (fnid == 0x7d02a5ca) {
    return "sqrtf4fast";
  } else if (fnid == 0x2b282ebb) {
    return "sqrtl";
  } else if (fnid == 0xd50277ad) {
    return "tan";
  } else if (fnid == 0x9379e36e) {
    return "tanf";
  } else if (fnid == 0x487bbd1c) {
    return "tanf4";
  } else if (fnid == 0x7f91cd41) {
    return "tanf4fast";
  } else if (fnid == 0xe2f1d4b2) {
    return "tanh";
  } else if (fnid == 0xd4f37b9d) {
    return "tanhf";
  } else if (fnid == 0x44cf744b) {
    return "tanhl";
  } else if (fnid == 0xd3a346a8) {
    return "tanl";
  } else if (fnid == 0x11c51388) {
    return "tgamma";
  } else if (fnid == 0x9f46f5a4) {
    return "tgammaf";
  } else if (fnid == 0x182cd542) {
    return "tgammal";
  } else if (fnid == 0x475d855b) {
    return "trunc";
  } else if (fnid == 0x2a138d2b) {
    return "truncf";
  } else if (fnid == 0x1e623f95) {
    return "truncf4";
  } else if (fnid == 0x55c8a549) {
    return "truncl";
  } else if (fnid == 0xb7dcbfdd) {
    return "__Setgloballocale";
  } else if (fnid == 0x9dc040e4) {
    return "_Deletegloballocale";
  } else if (fnid == 0x4a40969d) {
    return "_Fac_tidy";
  } else if (fnid == 0x496c6f50) {
    return "_Getctyptab";
  } else if (fnid == 0x045e124a) {
    return "_ZdaPv";
  } else if (fnid == 0x868531a3) {
    return "_ZdaPvj";
  } else if (fnid == 0x4b1ad744) {
    return "_ZdaPvjRKSt9nothrow_t";
  } else if (fnid == 0xbd35830b) {
    return "_ZdaPvjS_";
  } else if (fnid == 0x5298ef8e) {
    return "_ZdaPvRKSt9nothrow_t";
  } else if (fnid == 0x5438d7d8) {
    return "_ZdaPvS_";
  } else if (fnid == 0xd84b3689) {
    return "_ZdlPv";
  } else if (fnid == 0x31a81476) {
    return "_ZdlPvj";
  } else if (fnid == 0x67edde2f) {
    return "_ZdlPvjRKSt9nothrow_t";
  } else if (fnid == 0xe7d8449e) {
    return "_ZdlPvjS_";
  } else if (fnid == 0xad382a99) {
    return "_ZdlPvRKSt9nothrow_t";
  } else if (fnid == 0x94c49383) {
    return "_ZdlPvS_";
  } else if (fnid == 0xf58e83a5) {
    return "_Znaj";
  } else if (fnid == 0x96bc2578) {
    return "_Znajj";
  } else if (fnid == 0x2c241d13) {
    return "_ZnajjRKSt9nothrow_t";
  } else if (fnid == 0x2356ef16) {
    return "_ZnajRKSt9nothrow_t";
  } else if (fnid == 0x83bca135) {
    return "_ZNKSt11logic_error4whatEv";
  } else if (fnid == 0x883e1f16) {
    return "_ZNKSt11logic_error8_DoraiseEv";
  } else if (fnid == 0x683ca70a) {
    return "_ZNKSt12_String_base5_XlenEv";
  } else if (fnid == 0xc7931798) {
    return "_ZNKSt12_String_base5_XranEv";
  } else if (fnid == 0x0ba5483c) {
    return "_ZNKSt12codecvt_base11do_encodingEv";
  } else if (fnid == 0x3e18602a) {
    return "_ZNKSt12codecvt_base13do_max_lengthEv";
  } else if (fnid == 0x16df5ecb) {
    return "_ZNKSt12codecvt_base16do_always_noconvEv";
  } else if (fnid == 0xe75f6e21) {
    return "_ZNKSt12length_error8_DoraiseEv";
  } else if (fnid == 0xf1c86c92) {
    return "_ZNKSt12out_of_range8_DoraiseEv";
  } else if (fnid == 0x5333bdc9) {
    return "_ZNKSt13runtime_error4whatEv";
  } else if (fnid == 0x77c1d3a9) {
    return "_ZNKSt13runtime_error8_DoraiseEv";
  } else if (fnid == 0xd05ea37c) {
    return "_ZNKSt19istreambuf_iteratorIwSt11char_traitsIwEEdeEv";
  } else if (fnid == 0xf83e8d95) {
    return "_ZNKSt5ctypeIcE10do_tolowerEc";
  } else if (fnid == 0xa8f64fdb) {
    return "_ZNKSt5ctypeIcE10do_tolowerEPcPKc";
  } else if (fnid == 0x6dbbb9de) {
    return "_ZNKSt5ctypeIcE10do_toupperEc";
  } else if (fnid == 0xd9a12c5e) {
    return "_ZNKSt5ctypeIcE10do_toupperEPcPKc";
  } else if (fnid == 0x61f55c30) {
    return "_ZNKSt5ctypeIcE8do_widenEc";
  } else if (fnid == 0x5adf9060) {
    return "_ZNKSt5ctypeIcE8do_widenEPKcS2_Pc";
  } else if (fnid == 0x91959ed6) {
    return "_ZNKSt5ctypeIcE9do_narrowEcc";
  } else if (fnid == 0xa957adcc) {
    return "_ZNKSt5ctypeIcE9do_narrowEPKcS2_cPc";
  } else if (fnid == 0x128cd621) {
    return "_ZNKSt5ctypeIwE10do_scan_isEsPKwS2_";
  } else if (fnid == 0x9ec88ae6) {
    return "_ZNKSt5ctypeIwE10do_tolowerEPwPKw";
  } else if (fnid == 0x9ef60bf3) {
    return "_ZNKSt5ctypeIwE10do_tolowerEw";
  } else if (fnid == 0xbf9c3609) {
    return "_ZNKSt5ctypeIwE10do_toupperEPwPKw";
  } else if (fnid == 0x7008e209) {
    return "_ZNKSt5ctypeIwE10do_toupperEw";
  } else if (fnid == 0xef6f90d8) {
    return "_ZNKSt5ctypeIwE11do_scan_notEsPKwS2_";
  } else if (fnid == 0x26e8e1cf) {
    return "_ZNKSt5ctypeIwE5do_isEPKwS2_Ps";
  } else if (fnid == 0x229a0963) {
    return "_ZNKSt5ctypeIwE5do_isEsw";
  } else if (fnid == 0x884b021b) {
    return "_ZNKSt5ctypeIwE8_DowidenEc";
  } else if (fnid == 0xa37c3e51) {
    return "_ZNKSt5ctypeIwE8do_widenEc";
  } else if (fnid == 0xa35033e8) {
    return "_ZNKSt5ctypeIwE8do_widenEPKcS2_Pw";
  } else if (fnid == 0x34b63588) {
    return "_ZNKSt5ctypeIwE9_DonarrowEwc";
  } else if (fnid == 0xdf1e09e1) {
    return "_ZNKSt5ctypeIwE9do_narrowEPKwS2_cPc";
  } else if (fnid == 0x14e3faa5) {
    return "_ZNKSt5ctypeIwE9do_narrowEwc";
  } else if (fnid == 0x0091a3fd) {
    return "_ZNKSt6locale9_GetfacetEj";
  } else if (fnid == 0xa74e5a27) {
    return "_ZNKSt6localeeqERKS_";
  } else if (fnid == 0x2b05b95a) {
    return "_ZNKSt7_MpunctIcE11do_groupingEv";
  } else if (fnid == 0x696b47f2) {
    return "_ZNKSt7_MpunctIcE13do_neg_formatEv";
  } else if (fnid == 0x753c71db) {
    return "_ZNKSt7_MpunctIcE13do_pos_formatEv";
  } else if (fnid == 0xe528a368) {
    return "_ZNKSt7_MpunctIcE14do_curr_symbolEv";
  } else if (fnid == 0x2adccb1a) {
    return "_ZNKSt7_MpunctIcE14do_frac_digitsEv";
  } else if (fnid == 0x7142ad20) {
    return "_ZNKSt7_MpunctIcE16do_decimal_pointEv";
  } else if (fnid == 0xcc79f55d) {
    return "_ZNKSt7_MpunctIcE16do_negative_signEv";
  } else if (fnid == 0x9b5358f9) {
    return "_ZNKSt7_MpunctIcE16do_positive_signEv";
  } else if (fnid == 0x6c19db26) {
    return "_ZNKSt7_MpunctIcE16do_thousands_sepEv";
  } else if (fnid == 0x75a0617c) {
    return "_ZNKSt7_MpunctIwE11do_groupingEv";
  } else if (fnid == 0x1b6a7482) {
    return "_ZNKSt7_MpunctIwE13do_neg_formatEv";
  } else if (fnid == 0x268c3ea5) {
    return "_ZNKSt7_MpunctIwE13do_pos_formatEv";
  } else if (fnid == 0x5102ac61) {
    return "_ZNKSt7_MpunctIwE14do_curr_symbolEv";
  } else if (fnid == 0x3933645f) {
    return "_ZNKSt7_MpunctIwE14do_frac_digitsEv";
  } else if (fnid == 0x040c18ff) {
    return "_ZNKSt7_MpunctIwE16do_decimal_pointEv";
  } else if (fnid == 0x17dd0a4e) {
    return "_ZNKSt7_MpunctIwE16do_negative_signEv";
  } else if (fnid == 0x06bc5b51) {
    return "_ZNKSt7_MpunctIwE16do_positive_signEv";
  } else if (fnid == 0x9891bf45) {
    return "_ZNKSt7_MpunctIwE16do_thousands_sepEv";
  } else if (fnid == 0x550255f7) {
    return "_ZNKSt7codecvtIccSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_";
  } else if (fnid == 0xfc563813) {
    return "_ZNKSt7codecvtIccSt9_MbstatetE5do_inERS0_PKcS4_RS4_PcS6_RS6_";
  } else if (fnid == 0x9f528cd3) {
    return "_ZNKSt7codecvtIccSt9_MbstatetE6do_outERS0_PKcS4_RS4_PcS6_RS6_";
  } else if (fnid == 0x29c11f46) {
    return "_ZNKSt7codecvtIccSt9_MbstatetE9do_lengthERKS0_PKcS5_j";
  } else if (fnid == 0x2354ec0a) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_";
  } else if (fnid == 0x09e73a2a) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE11do_encodingEv";
  } else if (fnid == 0xd76b2e07) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE13do_max_lengthEv";
  } else if (fnid == 0x2cf8ea50) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE16do_always_noconvEv";
  } else if (fnid == 0xf01deff8) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE5do_inERS0_PKcS4_RS4_PwS6_RS6_";
  } else if (fnid == 0xa700bc7d) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE6do_outERS0_PKwS4_RS4_PcS6_RS6_";
  } else if (fnid == 0x67948307) {
    return "_ZNKSt7codecvtIwcSt9_MbstatetE9do_lengthERKS0_PKcS5_j";
  } else if (fnid == 0x5656ccff) {
    return "_ZNKSt7collateIcE10do_compareEPKcS2_S2_S2_";
  } else if (fnid == 0xb3f05af3) {
    return "_ZNKSt7collateIcE12do_transformEPKcS2_";
  } else if (fnid == 0x05903101) {
    return "_ZNKSt7collateIcE7do_hashEPKcS2_";
  } else if (fnid == 0xbc5ad91c) {
    return "_ZNKSt7collateIwE10do_compareEPKwS2_S2_S2_";
  } else if (fnid == 0x33e04d8e) {
    return "_ZNKSt7collateIwE12do_transformEPKwS2_";
  } else if (fnid == 0x0bc08c57) {
    return "_ZNKSt7collateIwE7do_hashEPKwS2_";
  } else if (fnid == 0x2ac890f4) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERb";
  } else if (fnid == 0x2c6ce396) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERd";
  } else if (fnid == 0x4827e6be) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERe";
  } else if (fnid == 0x5a3ad4bd) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERf";
  } else if (fnid == 0xd5c5ee3d) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERj";
  } else if (fnid == 0x4a799510) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERl";
  } else if (fnid == 0xa9e5bb16) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERm";
  } else if (fnid == 0x643e67f4) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERPv";
  } else if (fnid == 0x6437a975) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERt";
  } else if (fnid == 0x67c09257) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERx";
  } else if (fnid == 0xac6c23c0) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERy";
  } else if (fnid == 0x207b56fa) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE8_GetffldEPcRS3_S6_RKSt6locale";
  } else if (fnid == 0x23ef7642) {
    return "_ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE8_GetifldEPcRS3_S6_NSt5_IosbIiE9_FmtflagsERKSt6locale";
  } else if (fnid == 0xfff6ef55) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERb";
  } else if (fnid == 0x59c77266) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERd";
  } else if (fnid == 0x56fac416) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERe";
  } else if (fnid == 0xf2b9ab86) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERf";
  } else if (fnid == 0x9268d6e7) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERj";
  } else if (fnid == 0x3f9cb259) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERl";
  } else if (fnid == 0xad6dbac2) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERm";
  } else if (fnid == 0x2e2b80c8) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERPv";
  } else if (fnid == 0x1474ac53) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERt";
  } else if (fnid == 0x01aa0cef) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERx";
  } else if (fnid == 0xfefd7d3a) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateERy";
  } else if (fnid == 0x2670b433) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE8_GetffldEPcRS3_S6_RKSt6locale";
  } else if (fnid == 0xce6705c3) {
    return "_ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE8_GetifldEPcRS3_S6_NSt5_IosbIiE9_FmtflagsERKSt6locale";
  } else if (fnid == 0x21659e45) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE5_FputES3_RSt8ios_basecPKcjjjj";
  } else if (fnid == 0x2af79bd6) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE5_IputES3_RSt8ios_basecPcj";
  } else if (fnid == 0xab211d97) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecb";
  } else if (fnid == 0x3fc2324d) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecd";
  } else if (fnid == 0x258359df) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basece";
  } else if (fnid == 0x00cf44f7) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecl";
  } else if (fnid == 0x3937f2f8) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecm";
  } else if (fnid == 0x0339259c) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecPKv";
  } else if (fnid == 0xb1550b3c) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecx";
  } else if (fnid == 0x3bda45a7) {
    return "_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecy";
  } else if (fnid == 0x61a23009) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE5_FputES3_RSt8ios_basewPKcjjjj";
  } else if (fnid == 0x629b8531) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE5_IputES3_RSt8ios_basewPcj";
  } else if (fnid == 0xb8ec13a5) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewb";
  } else if (fnid == 0xf30d3407) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewd";
  } else if (fnid == 0xd2f9d93d) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewe";
  } else if (fnid == 0x823759d3) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewl";
  } else if (fnid == 0xd4838fbd) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewm";
  } else if (fnid == 0x020b22f3) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewPKv";
  } else if (fnid == 0x8a85d688) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewx";
  } else if (fnid == 0x7da7fdb1) {
    return "_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewy";
  } else if (fnid == 0x85b3c6da) {
    return "_ZNKSt8_Locinfo7_GetcvtEv";
  } else if (fnid == 0xf1543f02) {
    return "_ZNKSt8_Locinfo8_GetcollEv";
  } else if (fnid == 0x8d4e266b) {
    return "_ZNKSt8_Locinfo9_GetctypeEv";
  } else if (fnid == 0x6c8dc459) {
    return "_ZNKSt8bad_cast4whatEv";
  } else if (fnid == 0x48d101ef) {
    return "_ZNKSt8ios_base7failure8_DoraiseEv";
  } else if (fnid == 0x95082493) {
    return "_ZNKSt8messagesIcE6do_getEiiiRKSs";
  } else if (fnid == 0x113a515f) {
    return "_ZNKSt8messagesIcE7do_openERKSsRKSt6locale";
  } else if (fnid == 0x63a2b2cc) {
    return "_ZNKSt8messagesIcE8do_closeEi";
  } else if (fnid == 0x6463d9ea) {
    return "_ZNKSt8messagesIwE6do_getEiiiRKSbIwSt11char_traitsIwESaIwEE";
  } else if (fnid == 0x8c2e6d06) {
    return "_ZNKSt8messagesIwE7do_openERKSsRKSt6locale";
  } else if (fnid == 0xcbe74ad3) {
    return "_ZNKSt8messagesIwE8do_closeEi";
  } else if (fnid == 0x30195cf5) {
    return "_ZNKSt8numpunctIcE11do_groupingEv";
  } else if (fnid == 0x1a7f963c) {
    return "_ZNKSt8numpunctIcE11do_truenameEv";
  } else if (fnid == 0xb1d696f7) {
    return "_ZNKSt8numpunctIcE12do_falsenameEv";
  } else if (fnid == 0x18628537) {
    return "_ZNKSt8numpunctIcE16do_decimal_pointEv";
  } else if (fnid == 0x29c90b94) {
    return "_ZNKSt8numpunctIcE16do_thousands_sepEv";
  } else if (fnid == 0x4e5cd916) {
    return "_ZNKSt8numpunctIwE11do_groupingEv";
  } else if (fnid == 0xe82a422d) {
    return "_ZNKSt8numpunctIwE11do_truenameEv";
  } else if (fnid == 0x49d9ddaf) {
    return "_ZNKSt8numpunctIwE12do_falsenameEv";
  } else if (fnid == 0x9c40d1f9) {
    return "_ZNKSt8numpunctIwE16do_decimal_pointEv";
  } else if (fnid == 0x08e1865c) {
    return "_ZNKSt8numpunctIwE16do_thousands_sepEv";
  } else if (fnid == 0x0d644dca) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE11do_get_dateES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0xbd140e12) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE11do_get_timeES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x38783beb) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE11do_get_yearES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0xef62751c) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE13do_date_orderEv";
  } else if (fnid == 0x67fbabf0) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14do_get_weekdayES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x002c338b) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE16do_get_monthnameES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x1bccd2ca) {
    return "_ZNKSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE7_GetintERS3_S5_iiRi";
  } else if (fnid == 0x708cf940) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE11do_get_dateES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x23a87483) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE11do_get_timeES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0xebd4b51d) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE11do_get_yearES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x61248c80) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE13do_date_orderEv";
  } else if (fnid == 0x9dcb4bcb) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14do_get_weekdayES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0xc7d0ee0c) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE16do_get_monthnameES3_S3_RSt8ios_baseRNSt5_IosbIiE8_IostateEPSt2tm";
  } else if (fnid == 0x01409785) {
    return "_ZNKSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE7_GetintERS3_S5_iiRi";
  } else if (fnid == 0xd1ee6195) {
    return "_ZNKSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_RSt8ios_basecPKSt2tmcc";
  } else if (fnid == 0xe9d7a4ae) {
    return "_ZNKSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_RSt8ios_basewPKSt2tmcc";
  } else if (fnid == 0x96634e42) {
    return "_ZNKSt9bad_alloc4whatEv";
  } else if (fnid == 0xe54f1fe0) {
    return "_ZNKSt9bad_alloc8_DoraiseEv";
  } else if (fnid == 0x50b34c09) {
    return "_ZNKSt9exception4whatEv";
  } else if (fnid == 0x2d8be7e8) {
    return "_ZNKSt9exception6_RaiseEv";
  } else if (fnid == 0x5e1f2d37) {
    return "_ZNKSt9exception8_DoraiseEv";
  } else if (fnid == 0xd6ee1090) {
    return "_ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_bRSt8ios_baseRNSt5_IosbIiE8_IostateERe";
  } else if (fnid == 0x12de5772) {
    return "_ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES3_S3_bRSt8ios_baseRNSt5_IosbIiE8_IostateERSs";
  } else if (fnid == 0x9dbbe07d) {
    return "_ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE8_GetmfldERS3_S5_bRSt8ios_base";
  } else if (fnid == 0x49da8c5f) {
    return "_ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_bRSt8ios_baseRNSt5_IosbIiE8_IostateERe";
  } else if (fnid == 0xc6f18e84) {
    return "_ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE6do_getES3_S3_bRSt8ios_baseRNSt5_IosbIiE8_IostateERSbIwS2_SaIwEE";
  } else if (fnid == 0x4148e091) {
    return "_ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE8_GetmfldERS3_S5_bRSt8ios_base";
  } else if (fnid == 0xb326f699) {
    return "_ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_bRSt8ios_basece";
  } else if (fnid == 0xb4352488) {
    return "_ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES3_bRSt8ios_basecRKSs";
  } else if (fnid == 0x273be056) {
    return "_ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE8_PutmfldES3_bRSt8ios_basecbSs";
  } else if (fnid == 0x635166c3) {
    return "_ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_bRSt8ios_basewe";
  } else if (fnid == 0xa464c70a) {
    return "_ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE6do_putES3_bRSt8ios_basewRKSbIwS2_SaIwEE";
  } else if (fnid == 0x7ebad3f0) {
    return "_ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE8_PutmfldES3_bRSt8ios_basewbSbIwS2_SaIwEE";
  } else if (fnid == 0x4e34cf83) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE5_GrowEjb";
  } else if (fnid == 0xc4c7993b) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE5_TidyEbj";
  } else if (fnid == 0x9d6a8167) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE5eraseEjj";
  } else if (fnid == 0x10dc3f6c) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE6appendEjw";
  } else if (fnid == 0x871506ea) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE6assignERKS2_jj";
  } else if (fnid == 0x79a415f8) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE6insertEjjw";
  } else if (fnid == 0x64ce0374) {
    return "_ZNSbIwSt11char_traitsIwESaIwEE7replaceEjjPKwj";
  } else if (fnid == 0xcd33ed4f) {
    return "_ZNSbIwSt11char_traitsIwESaIwEEC1Ev";
  } else if (fnid == 0x336e904e) {
    return "_ZNSdD0Ev";
  } else if (fnid == 0x5560c79e) {
    return "_ZNSdD1Ev";
  } else if (fnid == 0xb0e7c2f3) {
    return "_ZNSiD0Ev";
  } else if (fnid == 0x9cfc0eaf) {
    return "_ZNSiD1Ev";
  } else if (fnid == 0x736c5f22) {
    return "_ZNSoD0Ev";
  } else if (fnid == 0x6f1945fc) {
    return "_ZNSoD1Ev";
  } else if (fnid == 0x668b31c6) {
    return "_ZNSs5_GrowEjb";
  } else if (fnid == 0x31b3e5cc) {
    return "_ZNSs5_TidyEbj";
  } else if (fnid == 0xdd8b1d47) {
    return "_ZNSs5eraseEjj";
  } else if (fnid == 0xa9116516) {
    return "_ZNSs6appendEjc";
  } else if (fnid == 0x6929318d) {
    return "_ZNSs6assignERKSsjj";
  } else if (fnid == 0x6b913d53) {
    return "_ZNSs6insertEjjc";
  } else if (fnid == 0x22777290) {
    return "_ZNSs7replaceEjjPKcj";
  } else if (fnid == 0x75975eb4) {
    return "_ZNSsC1EPKc";
  } else if (fnid == 0x9e741d47) {
    return "_ZNSsC1ERKSs";
  } else if (fnid == 0x5127dcd1) {
    return "_ZNSsC1Ev";
  } else if (fnid == 0x86c66cfc) {
    return "_ZNSsD1Ev";
  } else if (fnid == 0xaea59ceb) {
    return "_ZNSt10ctype_baseD0Ev";
  } else if (fnid == 0x18a38254) {
    return "_ZNSt10ctype_baseD1Ev";
  } else if (fnid == 0xf1cff87d) {
    return "_ZNSt10ctype_baseD2Ev";
  } else if (fnid == 0x522b0457) {
    return "_ZNSt10istrstreamD0Ev";
  } else if (fnid == 0xf127e816) {
    return "_ZNSt10istrstreamD1Ev";
  } else if (fnid == 0x9aa7a8b3) {
    return "_ZNSt10istrstreamD2Ev";
  } else if (fnid == 0x7a180518) {
    return "_ZNSt10money_baseD0Ev";
  } else if (fnid == 0xab5832fd) {
    return "_ZNSt10money_baseD1Ev";
  } else if (fnid == 0x9afa5d71) {
    return "_ZNSt10money_baseD2Ev";
  } else if (fnid == 0x7fe08910) {
    return "_ZNSt10moneypunctIcLb0EE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x7c391411) {
    return "_ZNSt10moneypunctIcLb0EED0Ev";
  } else if (fnid == 0x1374b8c8) {
    return "_ZNSt10moneypunctIcLb0EED1Ev";
  } else if (fnid == 0xb0c185b7) {
    return "_ZNSt10moneypunctIcLb1EE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x45010630) {
    return "_ZNSt10moneypunctIcLb1EED0Ev";
  } else if (fnid == 0xb509ab64) {
    return "_ZNSt10moneypunctIcLb1EED1Ev";
  } else if (fnid == 0x7d23aa12) {
    return "_ZNSt10moneypunctIwLb0EE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x20f7e066) {
    return "_ZNSt10moneypunctIwLb0EED0Ev";
  } else if (fnid == 0x34edd72b) {
    return "_ZNSt10moneypunctIwLb0EED1Ev";
  } else if (fnid == 0xd5244a29) {
    return "_ZNSt10moneypunctIwLb1EE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xcf9b4d80) {
    return "_ZNSt10moneypunctIwLb1EED0Ev";
  } else if (fnid == 0xa5306edb) {
    return "_ZNSt10moneypunctIwLb1EED1Ev";
  } else if (fnid == 0x8729f617) {
    return "_ZNSt10ostrstreamC1EPciNSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0x4bc193c7) {
    return "_ZNSt10ostrstreamC2EPciNSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0x764ceaa4) {
    return "_ZNSt10ostrstreamD0Ev";
  } else if (fnid == 0xd73321ed) {
    return "_ZNSt10ostrstreamD1Ev";
  } else if (fnid == 0x0bcc1910) {
    return "_ZNSt10ostrstreamD2Ev";
  } else if (fnid == 0x114e9178) {
    return "_ZNSt11logic_errorD0Ev";
  } else if (fnid == 0xbb4599c5) {
    return "_ZNSt11logic_errorD1Ev";
  } else if (fnid == 0x39775ce9) {
    return "_ZNSt11logic_errorD2Ev";
  } else if (fnid == 0xad6d839f) {
    return "_ZNSt12codecvt_baseD0Ev";
  } else if (fnid == 0x01f81190) {
    return "_ZNSt12codecvt_baseD1Ev";
  } else if (fnid == 0xfeb4107c) {
    return "_ZNSt12codecvt_baseD2Ev";
  } else if (fnid == 0x0d4290d2) {
    return "_ZNSt12length_errorD0Ev";
  } else if (fnid == 0x4aec14d5) {
    return "_ZNSt12length_errorD1Ev";
  } else if (fnid == 0x42c40b2f) {
    return "_ZNSt12out_of_rangeD0Ev";
  } else if (fnid == 0x604fec95) {
    return "_ZNSt12out_of_rangeD1Ev";
  } else if (fnid == 0xd830252c) {
    return "_ZNSt12strstreambuf5_InitEiPcS0_i";
  } else if (fnid == 0x2f29da90) {
    return "_ZNSt12strstreambuf5_TidyEv";
  } else if (fnid == 0xb87c4b43) {
    return "_ZNSt12strstreambuf6freezeEb";
  } else if (fnid == 0x4ef0eb8e) {
    return "_ZNSt12strstreambuf7seekoffElNSt5_IosbIiE8_SeekdirENS1_9_OpenmodeE";
  } else if (fnid == 0x1f3a9ada) {
    return "_ZNSt12strstreambuf7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0xc862f7c8) {
    return "_ZNSt12strstreambuf8overflowEi";
  } else if (fnid == 0x6d483b7a) {
    return "_ZNSt12strstreambuf9pbackfailEi";
  } else if (fnid == 0xd78efcc3) {
    return "_ZNSt12strstreambuf9underflowEv";
  } else if (fnid == 0x1c8083c5) {
    return "_ZNSt12strstreambufD0Ev";
  } else if (fnid == 0xf001a741) {
    return "_ZNSt12strstreambufD1Ev";
  } else if (fnid == 0xba85ce08) {
    return "_ZNSt12strstreambufD2Ev";
  } else if (fnid == 0x2eb5c13a) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE4syncEv";
  } else if (fnid == 0xdb5eae26) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE5_InitEPSt6_FiletNS2_7_InitflE";
  } else if (fnid == 0x4520d6a2) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE5_LockEv";
  } else if (fnid == 0x4761783a) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE5imbueERKSt6locale";
  } else if (fnid == 0x608abbb5) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE5uflowEv";
  } else if (fnid == 0x409409af) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE6setbufEPci";
  } else if (fnid == 0x3eeb7167) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE7_UnlockEv";
  } else if (fnid == 0xf73f6afc) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE";
  } else if (fnid == 0x460e5cb7) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0xad3777a2) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE8overflowEi";
  } else if (fnid == 0x3f6a6e68) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE9_EndwriteEv";
  } else if (fnid == 0xa2fd0ec5) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE9pbackfailEi";
  } else if (fnid == 0xdc981b5f) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEE9underflowEv";
  } else if (fnid == 0x5ca98e4a) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEED0Ev";
  } else if (fnid == 0x8c6b8d39) {
    return "_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev";
  } else if (fnid == 0xee853baf) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE4syncEv";
  } else if (fnid == 0xc6e09225) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE5_InitEPSt6_FiletNS2_7_InitflE";
  } else if (fnid == 0x8044f596) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE5_LockEv";
  } else if (fnid == 0xb80ca215) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE5imbueERKSt6locale";
  } else if (fnid == 0xf67a7e17) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE5uflowEv";
  } else if (fnid == 0x4b5a8abc) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE6setbufEPwi";
  } else if (fnid == 0xa1c6fc55) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE7_UnlockEv";
  } else if (fnid == 0xf9ff46a1) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE";
  } else if (fnid == 0xb6a4d760) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0x8341b529) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE8overflowEi";
  } else if (fnid == 0xa94be0fa) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE9_EndwriteEv";
  } else if (fnid == 0x0e147a9d) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE9pbackfailEi";
  } else if (fnid == 0x2954d64d) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEE9underflowEv";
  } else if (fnid == 0xe206c08f) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x6e61426d) {
    return "_ZNSt13basic_filebufIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0x0e9a5554) {
    return "_ZNSt13basic_istreamIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x9f959451) {
    return "_ZNSt13basic_istreamIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0xf7ba51fd) {
    return "_ZNSt13basic_ostreamIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x5c15972f) {
    return "_ZNSt13basic_ostreamIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0x9111ec36) {
    return "_ZNSt13messages_baseD0Ev";
  } else if (fnid == 0x9facb533) {
    return "_ZNSt13messages_baseD1Ev";
  } else if (fnid == 0x0f930fdd) {
    return "_ZNSt13messages_baseD2Ev";
  } else if (fnid == 0x52330fbd) {
    return "_ZNSt13runtime_errorD0Ev";
  } else if (fnid == 0x10231873) {
    return "_ZNSt13runtime_errorD1Ev";
  } else if (fnid == 0x0ff264b9) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE4syncEv";
  } else if (fnid == 0x00c3975e) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE5_LockEv";
  } else if (fnid == 0xc79278ec) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE5imbueERKSt6locale";
  } else if (fnid == 0x97911f5f) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE5uflowEv";
  } else if (fnid == 0x709ab035) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE6setbufEPci";
  } else if (fnid == 0x4daf3fcf) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE6xsgetnEPci";
  } else if (fnid == 0xadc2263b) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE6xsputnEPKci";
  } else if (fnid == 0x85ba062f) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE7_UnlockEv";
  } else if (fnid == 0x143048bf) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE";
  } else if (fnid == 0x6c386f54) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0xb9a2282d) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE8overflowEi";
  } else if (fnid == 0xeb76301c) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE9pbackfailEi";
  } else if (fnid == 0xcdafdf19) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE9showmanycEv";
  } else if (fnid == 0x2d489b47) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEE9underflowEv";
  } else if (fnid == 0xa79c4516) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEED0Ev";
  } else if (fnid == 0x055c1462) {
    return "_ZNSt15basic_streambufIcSt11char_traitsIcEED1Ev";
  } else if (fnid == 0x1527fe95) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE4syncEv";
  } else if (fnid == 0x085bff4f) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE5_LockEv";
  } else if (fnid == 0xe5e1dcbc) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE5imbueERKSt6locale";
  } else if (fnid == 0x94fa1f5b) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE5uflowEv";
  } else if (fnid == 0x7b5fce95) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE6setbufEPwi";
  } else if (fnid == 0xb1ac1fa3) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE6xsgetnEPwi";
  } else if (fnid == 0x76e846b2) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE6xsputnEPKwi";
  } else if (fnid == 0x57ef52f0) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE7_UnlockEv";
  } else if (fnid == 0x5a898327) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE";
  } else if (fnid == 0x6fe060a0) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0xd9d8af82) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE8overflowEi";
  } else if (fnid == 0xdab0a910) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE9pbackfailEi";
  } else if (fnid == 0x55481e6f) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE9showmanycEv";
  } else if (fnid == 0x1f2e9f4e) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEE9underflowEv";
  } else if (fnid == 0x2b88f26e) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x4fde96de) {
    return "_ZNSt15basic_streambufIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0x03217f6f) {
    return "_ZNSt19istreambuf_iteratorIcSt11char_traitsIcEE5_PeekEv";
  } else if (fnid == 0x5b71b85d) {
    return "_ZNSt19istreambuf_iteratorIwSt11char_traitsIwEE4_IncEv";
  } else if (fnid == 0x93c638e9) {
    return "_ZNSt19istreambuf_iteratorIwSt11char_traitsIwEE5_PeekEv";
  } else if (fnid == 0xbd58ea5a) {
    return "_ZNSt19ostreambuf_iteratorIwSt11char_traitsIwEEaSEw";
  } else if (fnid == 0xf05df017) {
    return "_ZNSt5ctypeIcE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x581fc95b) {
    return "_ZNSt5ctypeIcED0Ev";
  } else if (fnid == 0x6e4a84c1) {
    return "_ZNSt5ctypeIcED1Ev";
  } else if (fnid == 0x58fad1c1) {
    return "_ZNSt5ctypeIwE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xe8691be5) {
    return "_ZNSt5ctypeIwED0Ev";
  } else if (fnid == 0xdc4d7540) {
    return "_ZNSt5ctypeIwED1Ev";
  } else if (fnid == 0x577c2695) {
    return "_ZNSt6_Mutex5_LockEv";
  } else if (fnid == 0xd356aefd) {
    return "_ZNSt6_Mutex7_UnlockEv";
  } else if (fnid == 0x75824de0) {
    return "_ZNSt6_MutexC1Ev";
  } else if (fnid == 0xce653b6c) {
    return "_ZNSt6_MutexC2Ev";
  } else if (fnid == 0x1c3f1c4f) {
    return "_ZNSt6_MutexD1Ev";
  } else if (fnid == 0xda1b159a) {
    return "_ZNSt6_MutexD2Ev";
  } else if (fnid == 0x8fa764f3) {
    return "_ZNSt6_WinitC1Ev";
  } else if (fnid == 0x767a4e70) {
    return "_ZNSt6_WinitC2Ev";
  } else if (fnid == 0xc612a38e) {
    return "_ZNSt6_WinitD1Ev";
  } else if (fnid == 0xcb7d00a4) {
    return "_ZNSt6_WinitD2Ev";
  } else if (fnid == 0x20a02b6d) {
    return "_ZNSt6locale2idcvjEv";
  } else if (fnid == 0x61119152) {
    return "_ZNSt6locale5_InitEv";
  } else if (fnid == 0x7e7ac30e) {
    return "_ZNSt6locale5emptyEv";
  } else if (fnid == 0x6cb1a335) {
    return "_ZNSt6locale5facet7_DecrefEv";
  } else if (fnid == 0xda1088ce) {
    return "_ZNSt6locale5facet7_IncrefEv";
  } else if (fnid == 0xe2b2ac5a) {
    return "_ZNSt6locale5facet9_RegisterEv";
  } else if (fnid == 0x1ee13e83) {
    return "_ZNSt6locale5facetD0Ev";
  } else if (fnid == 0x6863452e) {
    return "_ZNSt6locale5facetD1Ev";
  } else if (fnid == 0x83cba890) {
    return "_ZNSt6locale5facetD2Ev";
  } else if (fnid == 0xdaf3996f) {
    return "_ZNSt6locale6globalERKS_";
  } else if (fnid == 0x7b1db41e) {
    return "_ZNSt6locale7_AddfacEPNS_5facetEjj";
  } else if (fnid == 0xaa520d9f) {
    return "_ZNSt6locale7_Locimp7_AddfacEPNS_5facetEj";
  } else if (fnid == 0xf584de56) {
    return "_ZNSt6locale7_Locimp8_MakelocERKSt8_LocinfoiPS0_PKS_";
  } else if (fnid == 0x5a6e4e50) {
    return "_ZNSt6locale7_Locimp9_MakewlocERKSt8_LocinfoiPS0_PKS_";
  } else if (fnid == 0x9c486668) {
    return "_ZNSt6locale7_Locimp9_MakexlocERKSt8_LocinfoiPS0_PKS_";
  } else if (fnid == 0x904dbd32) {
    return "_ZNSt6locale7_LocimpC1Eb";
  } else if (fnid == 0x2070a73d) {
    return "_ZNSt6locale7_LocimpC1ERKS0_";
  } else if (fnid == 0xcac83a05) {
    return "_ZNSt6locale7_LocimpC2Eb";
  } else if (fnid == 0xb74f7b8f) {
    return "_ZNSt6locale7_LocimpC2ERKS0_";
  } else if (fnid == 0x002e18d8) {
    return "_ZNSt6locale7_LocimpD0Ev";
  } else if (fnid == 0x07a3bd16) {
    return "_ZNSt6locale7_LocimpD1Ev";
  } else if (fnid == 0x95b43c9d) {
    return "_ZNSt6locale7_LocimpD2Ev";
  } else if (fnid == 0xc6ea0fd0) {
    return "_ZNSt6locale7classicEv";
  } else if (fnid == 0x01d9b3f5) {
    return "_ZNSt6localeC1EPKci";
  } else if (fnid == 0x03cca12f) {
    return "_ZNSt6localeC1ERKS_PKci";
  } else if (fnid == 0x2ff8d101) {
    return "_ZNSt6localeC1ERKS_S1_i";
  } else if (fnid == 0x660882e8) {
    return "_ZNSt6localeC1Ev";
  } else if (fnid == 0x3d32a7f4) {
    return "_ZNSt6localeC2EPKci";
  } else if (fnid == 0x563fd2be) {
    return "_ZNSt6localeC2ERKS_PKci";
  } else if (fnid == 0x01c4ef01) {
    return "_ZNSt6localeC2ERKS_S1_i";
  } else if (fnid == 0x5a5a9107) {
    return "_ZNSt6localeC2Ev";
  } else if (fnid == 0x1692ae0c) {
    return "_ZNSt6localeD1Ev";
  } else if (fnid == 0x05a9cef6) {
    return "_ZNSt7_MpunctIcE5_InitERKSt8_Locinfo";
  } else if (fnid == 0x1c8405dc) {
    return "_ZNSt7_MpunctIcEC2Ejb";
  } else if (fnid == 0x30e297ea) {
    return "_ZNSt7_MpunctIcEC2ERKSt8_Locinfojb";
  } else if (fnid == 0x47aab531) {
    return "_ZNSt7_MpunctIcED0Ev";
  } else if (fnid == 0xf7845d1c) {
    return "_ZNSt7_MpunctIcED1Ev";
  } else if (fnid == 0xe177fd02) {
    return "_ZNSt7_MpunctIcED2Ev";
  } else if (fnid == 0x81027e75) {
    return "_ZNSt7_MpunctIwE5_InitERKSt8_Locinfo";
  } else if (fnid == 0x9a449047) {
    return "_ZNSt7_MpunctIwEC2Ejb";
  } else if (fnid == 0x62f52bb0) {
    return "_ZNSt7_MpunctIwEC2ERKSt8_Locinfojb";
  } else if (fnid == 0x4cdab0ba) {
    return "_ZNSt7_MpunctIwED0Ev";
  } else if (fnid == 0xc06a4cd8) {
    return "_ZNSt7_MpunctIwED1Ev";
  } else if (fnid == 0xe8c15f8a) {
    return "_ZNSt7_MpunctIwED2Ev";
  } else if (fnid == 0x6051c802) {
    return "_ZNSt7codecvtIccSt9_MbstatetED0Ev";
  } else if (fnid == 0xf51dc289) {
    return "_ZNSt7codecvtIccSt9_MbstatetED1Ev";
  } else if (fnid == 0xae7d042f) {
    return "_ZNSt7codecvtIwcSt9_MbstatetE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x76db6974) {
    return "_ZNSt7codecvtIwcSt9_MbstatetED0Ev";
  } else if (fnid == 0x0e9698af) {
    return "_ZNSt7codecvtIwcSt9_MbstatetED1Ev";
  } else if (fnid == 0x4ec89bf8) {
    return "_ZNSt7collateIcE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x7cdbda48) {
    return "_ZNSt7collateIcED0Ev";
  } else if (fnid == 0x36e7826a) {
    return "_ZNSt7collateIcED1Ev";
  } else if (fnid == 0xabd92bcc) {
    return "_ZNSt7collateIwE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x7882e64e) {
    return "_ZNSt7collateIwED0Ev";
  } else if (fnid == 0xf5825c7d) {
    return "_ZNSt7collateIwED1Ev";
  } else if (fnid == 0x854bc7c7) {
    return "_ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0xa562099c) {
    return "_ZNSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0xccf14bd5) {
    return "_ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xb6a7ba7a) {
    return "_ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0x3da21a90) {
    return "_ZNSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0x46034d2e) {
    return "_ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0x76de9b0f) {
    return "_ZNSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0xfc825dda) {
    return "_ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x667d741b) {
    return "_ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0x197fc348) {
    return "_ZNSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0x8a665143) {
    return "_ZNSt8_Locinfo8_AddcatsEiPKc";
  } else if (fnid == 0x2e84ebb3) {
    return "_ZNSt8_LocinfoC1EiPKc";
  } else if (fnid == 0x605131d5) {
    return "_ZNSt8_LocinfoC1EPKc";
  } else if (fnid == 0x9fd2eea9) {
    return "_ZNSt8_LocinfoC2EiPKc";
  } else if (fnid == 0xd4ba5b31) {
    return "_ZNSt8_LocinfoC2EPKc";
  } else if (fnid == 0x5119680b) {
    return "_ZNSt8_LocinfoD1Ev";
  } else if (fnid == 0x47e5c318) {
    return "_ZNSt8_LocinfoD2Ev";
  } else if (fnid == 0xf53021e0) {
    return "_ZNSt8bad_castC1Ev";
  } else if (fnid == 0xb33ef042) {
    return "_ZNSt8bad_castD0Ev";
  } else if (fnid == 0xe3edd790) {
    return "_ZNSt8bad_castD1Ev";
  } else if (fnid == 0x1989f59c) {
    return "_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi";
  } else if (fnid == 0x4bda379a) {
    return "_ZNSt8ios_base4InitC1Ev";
  } else if (fnid == 0xce8c6abc) {
    return "_ZNSt8ios_base4InitC2Ev";
  } else if (fnid == 0x186bcc94) {
    return "_ZNSt8ios_base4InitD1Ev";
  } else if (fnid == 0x294779fb) {
    return "_ZNSt8ios_base4InitD2Ev";
  } else if (fnid == 0x3697bbd3) {
    return "_ZNSt8ios_base5_InitEv";
  } else if (fnid == 0x5949408e) {
    return "_ZNSt8ios_base5_TidyEv";
  } else if (fnid == 0x4952490e) {
    return "_ZNSt8ios_base5clearENSt5_IosbIiE8_IostateEb";
  } else if (fnid == 0x2a16469d) {
    return "_ZNSt8ios_base5imbueERKSt6locale";
  } else if (fnid == 0xc5977986) {
    return "_ZNSt8ios_base7_AddstdEv";
  } else if (fnid == 0xdc0c889c) {
    return "_ZNSt8ios_base7copyfmtERKS_";
  } else if (fnid == 0x1a4f2fa6) {
    return "_ZNSt8ios_base7failureD0Ev";
  } else if (fnid == 0x4bee7ba9) {
    return "_ZNSt8ios_base7failureD1Ev";
  } else if (fnid == 0xc013acd8) {
    return "_ZNSt8ios_base8_CallfnsENS_5eventE";
  } else if (fnid == 0xaae64804) {
    return "_ZNSt8ios_base8_FindarrEi";
  } else if (fnid == 0x6daed882) {
    return "_ZNSt8ios_baseD0Ev";
  } else if (fnid == 0xdefe3230) {
    return "_ZNSt8ios_baseD1Ev";
  } else if (fnid == 0xd8b23008) {
    return "_ZNSt8ios_baseD2Ev";
  } else if (fnid == 0xa433147a) {
    return "_ZNSt8messagesIcE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xa22d5dda) {
    return "_ZNSt8messagesIcED0Ev";
  } else if (fnid == 0xd8aeb94a) {
    return "_ZNSt8messagesIcED1Ev";
  } else if (fnid == 0x66fcc6f4) {
    return "_ZNSt8messagesIwE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xe6547e35) {
    return "_ZNSt8messagesIwED0Ev";
  } else if (fnid == 0xc22cebd8) {
    return "_ZNSt8messagesIwED1Ev";
  } else if (fnid == 0xbd316983) {
    return "_ZNSt8numpunctIcE5_InitERKSt8_Locinfo";
  } else if (fnid == 0x30ce43d4) {
    return "_ZNSt8numpunctIcED0Ev";
  } else if (fnid == 0x984ce3d7) {
    return "_ZNSt8numpunctIcED1Ev";
  } else if (fnid == 0xc53ab1c0) {
    return "_ZNSt8numpunctIwE5_InitERKSt8_Locinfo";
  } else if (fnid == 0x0490855d) {
    return "_ZNSt8numpunctIwE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x49f7d434) {
    return "_ZNSt8numpunctIwED0Ev";
  } else if (fnid == 0x66f39adb) {
    return "_ZNSt8numpunctIwED1Ev";
  } else if (fnid == 0x9a194306) {
    return "_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE5_InitERKSt8_Locinfo";
  } else if (fnid == 0xa90c4ff2) {
    return "_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x1b9b3b5c) {
    return "_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0x033c18f4) {
    return "_ZNSt8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0x02e40598) {
    return "_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE5_InitERKSt8_Locinfo";
  } else if (fnid == 0x718977c5) {
    return "_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x493212da) {
    return "_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0x62d6bf82) {
    return "_ZNSt8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0x332f8409) {
    return "_ZNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xe667985a) {
    return "_ZNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0xd7bc220d) {
    return "_ZNSt8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0x3286b855) {
    return "_ZNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x900d1fa4) {
    return "_ZNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0xb4a8791f) {
    return "_ZNSt8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0x816aebc3) {
    return "_ZNSt9bad_allocD0Ev";
  } else if (fnid == 0x56d3d4f0) {
    return "_ZNSt9bad_allocD1Ev";
  } else if (fnid == 0x3ad12959) {
    return "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_Eb";
  } else if (fnid == 0xf00401d2) {
    return "_ZNSt9basic_iosIcSt11char_traitsIcEED0Ev";
  } else if (fnid == 0x867956a4) {
    return "_ZNSt9basic_iosIcSt11char_traitsIcEED1Ev";
  } else if (fnid == 0x8bfd4395) {
    return "_ZNSt9basic_iosIwSt11char_traitsIwEE4initEPSt15basic_streambufIwS1_Eb";
  } else if (fnid == 0xc3d24eb3) {
    return "_ZNSt9basic_iosIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0xba0b6300) {
    return "_ZNSt9basic_iosIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0xb8836b50) {
    return "_ZNSt9exception18_Set_raise_handlerEPFvRKS_E";
  } else if (fnid == 0x87b1f5eb) {
    return "_ZNSt9exceptionD0Ev";
  } else if (fnid == 0x316b7a34) {
    return "_ZNSt9exceptionD1Ev";
  } else if (fnid == 0x1a00f889) {
    return "_ZNSt9exceptionD2Ev";
  } else if (fnid == 0x1b266c3d) {
    return "_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x6adc320a) {
    return "_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0x360f8a4f) {
    return "_ZNSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0xabdc2b49) {
    return "_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xe196beab) {
    return "_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0x0e744ef5) {
    return "_ZNSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0x7ff35597) {
    return "_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0xd7d92e51) {
    return "_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED0Ev";
  } else if (fnid == 0xdc65ab00) {
    return "_ZNSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEED1Ev";
  } else if (fnid == 0x6500d2d5) {
    return "_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE7_GetcatEPPKNSt6locale5facetE";
  } else if (fnid == 0x8006c4ec) {
    return "_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED0Ev";
  } else if (fnid == 0xd93d52b1) {
    return "_ZNSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEED1Ev";
  } else if (fnid == 0xfb36c588) {
    return "_ZNSt9strstreamC1EPciNSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0x55b3ebf2) {
    return "_ZNSt9strstreamC2EPciNSt5_IosbIiE9_OpenmodeE";
  } else if (fnid == 0xbda26024) {
    return "_ZNSt9strstreamD0Ev";
  } else if (fnid == 0x643235cf) {
    return "_ZNSt9strstreamD1Ev";
  } else if (fnid == 0xa3f5c3b2) {
    return "_ZNSt9strstreamD2Ev";
  } else if (fnid == 0xda5469b3) {
    return "_ZNSt9time_baseD0Ev";
  } else if (fnid == 0x4cb35e7d) {
    return "_ZNSt9time_baseD1Ev";
  } else if (fnid == 0xc41d676d) {
    return "_ZNSt9time_baseD2Ev";
  } else if (fnid == 0x83b2cc6f) {
    return "_Znwj";
  } else if (fnid == 0xed3da02b) {
    return "_Znwjj";
  } else if (fnid == 0xb53fa02e) {
    return "_ZnwjjRKSt9nothrow_t";
  } else if (fnid == 0xbb712718) {
    return "_ZnwjRKSt9nothrow_t";
  } else if (fnid == 0x8cda1f3b) {
    return "_ZSt10_GetloctxtIcSt19istreambuf_iteratorIcSt11char_traitsIcEEEiRT0_S5_jPKT_";
  } else if (fnid == 0x5e55ab8c) {
    return "_ZSt10_GetloctxtIwSt19istreambuf_iteratorIwSt11char_traitsIwEEEiRT0_S5_jPKT_";
  } else if (fnid == 0xd1b043b7) {
    return "_ZSt10_MaklocchrIwET_cPS0_RKSt7_Cvtvec";
  } else if (fnid == 0x05ec37c8) {
    return "_ZSt10_MaklocstrIwEPT_PKcS1_RKSt7_Cvtvec";
  } else if (fnid == 0x8c3afd4c) {
    return "_ZSt10unexpectedv";
  } else if (fnid == 0xd38f4018) {
    return "_ZSt11_MaklocbyteIwEcT_RKSt7_Cvtvec";
  } else if (fnid == 0x53693d40) {
    return "_ZSt11setiosflagsNSt5_IosbIiE9_FmtflagsE";
  } else if (fnid == 0x84023c03) {
    return "_ZSt12setprecisioni";
  } else if (fnid == 0x1b6ad260) {
    return "_ZSt13resetiosflagsNSt5_IosbIiE9_FmtflagsE";
  } else if (fnid == 0xcb82e0dc) {
    return "_ZSt13set_terminatePFvvE";
  } else if (fnid == 0x4aff73cc) {
    return "_ZSt14_Debug_messagePKcS0_";
  } else if (fnid == 0x91b0e37e) {
    return "_ZSt14set_unexpectedPFvvE";
  } else if (fnid == 0x6a6b90c9) {
    return "_ZSt15set_new_handlerPFvvE";
  } else if (fnid == 0xbaa15803) {
    return "_ZSt4setwi";
  } else if (fnid == 0x9cb73ee0) {
    return "_ZSt6_ThrowRKSt9exception";
  } else if (fnid == 0x78a142d0) {
    return "_ZSt7_FiopenPKcNSt5_IosbIiE9_OpenmodeEi";
  } else if (fnid == 0x5015b8d3) {
    return "_ZSt7_FiopenPKwNSt5_IosbIiE9_OpenmodeEi";
  } else if (fnid == 0x6b493669) {
    return "_ZSt7setbasei";
  } else if (fnid == 0x64ed868e) {
    return "_ZSt9terminatev";
  } else if (fnid == 0x417f47af) {
    return "_ZSt9use_facetISt10moneypunctIcLb0EEERKT_RKSt6locale";
  } else if (fnid == 0x2d50650f) {
    return "_ZSt9use_facetISt10moneypunctIcLb1EEERKT_RKSt6locale";
  } else if (fnid == 0xa8ece2e0) {
    return "_ZSt9use_facetISt10moneypunctIwLb0EEERKT_RKSt6locale";
  } else if (fnid == 0xdf7edb4d) {
    return "_ZSt9use_facetISt10moneypunctIwLb1EEERKT_RKSt6locale";
  } else if (fnid == 0x1cf6785d) {
    return "_ZSt9use_facetISt5ctypeIwEERKT_RKSt6locale";
  } else if (fnid == 0x411b923e) {
    return "_ZSt9use_facetISt8numpunctIcEERKT_RKSt6locale";
  } else if (fnid == 0x1d43fb44) {
    return "_ZSt9use_facetISt8numpunctIwEERKT_RKSt6locale";
  } else if (fnid == 0x3bac19dc) {
    return "_ZThn8_NSdD0Ev";
  } else if (fnid == 0xa4f6a919) {
    return "_ZThn8_NSdD1Ev";
  } else if (fnid == 0xef959a6d) {
    return "_ZThn8_NSt9strstreamD0Ev";
  } else if (fnid == 0x74a39b4f) {
    return "_ZThn8_NSt9strstreamD1Ev";
  } else if (fnid == 0xfe468b7a) {
    return "_ZTv0_n12_NSdD0Ev";
  } else if (fnid == 0x928fbe36) {
    return "_ZTv0_n12_NSdD1Ev";
  } else if (fnid == 0x65f19631) {
    return "_ZTv0_n12_NSiD0Ev";
  } else if (fnid == 0x281f9107) {
    return "_ZTv0_n12_NSiD1Ev";
  } else if (fnid == 0xffaf3218) {
    return "_ZTv0_n12_NSoD0Ev";
  } else if (fnid == 0x79ad3575) {
    return "_ZTv0_n12_NSoD1Ev";
  } else if (fnid == 0xece969c0) {
    return "_ZTv0_n12_NSt10istrstreamD0Ev";
  } else if (fnid == 0x6e0bf85d) {
    return "_ZTv0_n12_NSt10istrstreamD1Ev";
  } else if (fnid == 0x88052736) {
    return "_ZTv0_n12_NSt10ostrstreamD0Ev";
  } else if (fnid == 0xa1de25c2) {
    return "_ZTv0_n12_NSt10ostrstreamD1Ev";
  } else if (fnid == 0x5ed4fb7a) {
    return "_ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x3783acfa) {
    return "_ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0x903afa37) {
    return "_ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED0Ev";
  } else if (fnid == 0x07b6c924) {
    return "_ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED1Ev";
  } else if (fnid == 0x19c901ce) {
    return "_ZTv0_n12_NSt9strstreamD0Ev";
  } else if (fnid == 0x2daa5a42) {
    return "_ZTv0_n12_NSt9strstreamD1Ev";
  } else if (fnid == 0xf254768c) {
    return "sys_dbg_disable_floating_point_enabled_exception";
  } else if (fnid == 0x3147c6ca) {
    return "sys_dbg_enable_floating_point_enabled_exception";
  } else if (fnid == 0xc0eb9266) {
    return "sys_dbg_finalize_ppu_exception_handler";
  } else if (fnid == 0xbb0ae221) {
    return "sys_dbg_get_address_from_dabr";
  } else if (fnid == 0x63bd413e) {
    return "sys_dbg_get_cond_information";
  } else if (fnid == 0xb9da87d3) {
    return "sys_dbg_get_coredump_params";
  } else if (fnid == 0xdf856979) {
    return "sys_dbg_get_event_flag_information";
  } else if (fnid == 0x381ae33e) {
    return "sys_dbg_get_event_queue_information";
  } else if (fnid == 0x7bdadb01) {
    return "sys_dbg_get_lwcond_information";
  } else if (fnid == 0xcb377e36) {
    return "sys_dbg_get_lwmutex_information";
  } else if (fnid == 0x50453aa8) {
    return "sys_dbg_get_mutex_information";
  } else if (fnid == 0x113b0bea) {
    return "sys_dbg_get_ppu_thread_ids";
  } else if (fnid == 0x4b55f456) {
    return "sys_dbg_get_ppu_thread_name";
  } else if (fnid == 0x6b413178) {
    return "sys_dbg_get_ppu_thread_status";
  } else if (fnid == 0x9794bb53) {
    return "sys_dbg_get_rwlock_information";
  } else if (fnid == 0xa2d6cbd2) {
    return "sys_dbg_get_semaphore_information";
  } else if (fnid == 0x08ef08a9) {
    return "sys_dbg_get_spu_thread_group_ids";
  } else if (fnid == 0xbd69e584) {
    return "sys_dbg_get_spu_thread_group_name";
  } else if (fnid == 0x9ddb9dc3) {
    return "sys_dbg_get_spu_thread_group_status";
  } else if (fnid == 0x1860f909) {
    return "sys_dbg_get_spu_thread_ids";
  } else if (fnid == 0x3e5eed36) {
    return "sys_dbg_get_spu_thread_name";
  } else if (fnid == 0xc353353a) {
    return "sys_dbg_initialize_ppu_exception_handler";
  } else if (fnid == 0x590a276e) {
    return "sys_dbg_mat_get_condition";
  } else if (fnid == 0x24a3d413) {
    return "sys_dbg_mat_set_condition";
  } else if (fnid == 0xc5eef17f) {
    return "sys_dbg_read_ppu_thread_context";
  } else if (fnid == 0xc21ee635) {
    return "sys_dbg_read_spu_thread_context";
  } else if (fnid == 0x266c2bd3) {
    return "sys_dbg_read_spu_thread_context2";
  } else if (fnid == 0x22916f45) {
    return "sys_dbg_register_ppu_exception_handler";
  } else if (fnid == 0xdb14b37b) {
    return "sys_dbg_set_address_to_dabr";
  } else if (fnid == 0xab475d53) {
    return "sys_dbg_set_mask_to_ppu_exception_handler";
  } else if (fnid == 0x06a840f5) {
    return "sys_dbg_set_stacksize_ppu_exception_handler";
  } else if (fnid == 0xd830062a) {
    return "sys_dbg_signal_to_coredump_handler";
  } else if (fnid == 0x4ded9f6c) {
    return "sys_dbg_signal_to_ppu_exception_handler";
  } else if (fnid == 0xc6d7ec13) {
    return "sys_dbg_unregister_ppu_exception_handler";
  } else if (fnid == 0x580f8203) {
    return "sys_dbg_vm_get_page_information";
  } else if (fnid == 0x6005cde1) {
    return "_sys_net_errno_loc";
  } else if (fnid == 0xc9157d30) {
    return "_sys_net_h_errno_loc";
  } else if (fnid == 0xc94f6939) {
    return "accept";
  } else if (fnid == 0xb0a59804) {
    return "bind";
  } else if (fnid == 0x64f66d35) {
    return "connect";
  } else if (fnid == 0xf7ac8941) {
    return "gethostbyaddr";
  } else if (fnid == 0x71f4c717) {
    return "gethostbyname";
  } else if (fnid == 0xf9ec2db6) {
    return "getpeername";
  } else if (fnid == 0x13efe7f5) {
    return "getsockname";
  } else if (fnid == 0x5a045bd1) {
    return "getsockopt";
  } else if (fnid == 0xdabbc2c0) {
    return "inet_addr";
  } else if (fnid == 0xa9a079e0) {
    return "inet_aton";
  } else if (fnid == 0x566893ce) {
    return "inet_lnaof";
  } else if (fnid == 0xb4152c74) {
    return "inet_makeaddr";
  } else if (fnid == 0xe39a62a7) {
    return "inet_netof";
  } else if (fnid == 0x506ad863) {
    return "inet_network";
  } else if (fnid == 0x858a930b) {
    return "inet_ntoa";
  } else if (fnid == 0xc98a3146) {
    return "inet_ntop";
  } else if (fnid == 0x8af3825e) {
    return "inet_pton";
  } else if (fnid == 0x28e208bb) {
    return "listen";
  } else if (fnid == 0xfba04f37) {
    return "recv";
  } else if (fnid == 0x1f953b9f) {
    return "recvfrom";
  } else if (fnid == 0xc9d09c34) {
    return "recvmsg";
  } else if (fnid == 0xdc751b40) {
    return "send";
  } else if (fnid == 0xad09481b) {
    return "sendmsg";
  } else if (fnid == 0x9647570b) {
    return "sendto";
  } else if (fnid == 0x88f03575) {
    return "setsockopt";
  } else if (fnid == 0xa50777c6) {
    return "shutdown";
  } else if (fnid == 0x9c056962) {
    return "socket";
  } else if (fnid == 0x6db6e8cd) {
    return "socketclose";
  } else if (fnid == 0x051ee3ee) {
    return "socketpoll";
  } else if (fnid == 0x3f09e20a) {
    return "socketselect";
  } else if (fnid == 0x8ccf05ed) {
    return "sys_net_abort_resolver";
  } else if (fnid == 0x8d1b77fb) {
    return "sys_net_abort_socket";
  } else if (fnid == 0x44328aa2) {
    return "sys_net_close_dump";
  } else if (fnid == 0xb68d5625) {
    return "sys_net_finalize_network";
  } else if (fnid == 0xfdb8f926) {
    return "sys_net_free_thread_context";
  } else if (fnid == 0x1d14d6e4) {
    return "sys_net_get_lib_name_server";
  } else if (fnid == 0x368823c0) {
    return "sys_net_get_netemu_test_param";
  } else if (fnid == 0x3b27c780) {
    return "sys_net_get_sockinfo";
  } else if (fnid == 0xa765d029) {
    return "sys_net_get_sockinfo_ex";
  } else if (fnid == 0xa5a86557) {
    return "sys_net_get_test_param";
  } else if (fnid == 0x05bd4438) {
    return "sys_net_get_udpp2p_test_param";
  } else if (fnid == 0x27fb339d) {
    return "sys_net_if_ctl";
  } else if (fnid == 0x139a9e9b) {
    return "sys_net_initialize_network_ex";
  } else if (fnid == 0xab447704) {
    return "sys_net_open_dump";
  } else if (fnid == 0x89c9917c) {
    return "sys_net_read_dump";
  } else if (fnid == 0x9a318259) {
    return "sys_net_set_lib_name_server";
  } else if (fnid == 0xe2434507) {
    return "sys_net_set_netemu_test_param";
  } else if (fnid == 0x7687d48c) {
    return "sys_net_set_resolver_configurations";
  } else if (fnid == 0x4ab0b9b9) {
    return "sys_net_set_test_param";
  } else if (fnid == 0x10b81ed6) {
    return "sys_net_set_udpp2p_test_param";
  } else if (fnid == 0xb48636c4) {
    return "sys_net_show_ifconfig";
  } else if (fnid == 0x5420e419) {
    return "sys_net_show_nameserver";
  } else if (fnid == 0x79b61646) {
    return "sys_net_show_route";
  } else if (fnid == 0xf7f7fb20) {
    return "_sys_free";
  } else if (fnid == 0xb9bf1078) {
    return "_sys_heap_alloc_heap_memory";
  } else if (fnid == 0xb2fcf2c8) {
    return "_sys_heap_create_heap";
  } else if (fnid == 0xaede4b03) {
    return "_sys_heap_delete_heap";
  } else if (fnid == 0x8a561d92) {
    return "_sys_heap_free";
  } else if (fnid == 0xd1ad4570) {
    return "_sys_heap_get_mallinfo";
  } else if (fnid == 0xb6369393) {
    return "_sys_heap_get_total_free_size";
  } else if (fnid == 0x35168520) {
    return "_sys_heap_malloc";
  } else if (fnid == 0x44265c08) {
    return "_sys_heap_memalign";
  } else if (fnid == 0x8985b5b6) {
    return "_sys_heap_stats";
  } else if (fnid == 0xbdb18f83) {
    return "_sys_malloc";
  } else if (fnid == 0x318f17e1) {
    return "_sys_memalign";
  } else if (fnid == 0x3bd53c7b) {
    return "_sys_memchr";
  } else if (fnid == 0xfb5db080) {
    return "_sys_memcmp";
  } else if (fnid == 0x6bf66ea7) {
    return "_sys_memcpy";
  } else if (fnid == 0x27427742) {
    return "_sys_memmove";
  } else if (fnid == 0x68b9b011) {
    return "_sys_memset";
  } else if (fnid == 0x9f04f7af) {
    return "_sys_printf";
  } else if (fnid == 0x96328741) {
    return "_sys_process_at_Exitspawn";
  } else if (fnid == 0x2c847572) {
    return "_sys_process_atexitspawn";
  } else if (fnid == 0xc4fd6121) {
    return "_sys_qsort";
  } else if (fnid == 0x06574237) {
    return "_sys_snprintf";
  } else if (fnid == 0xa1f9eafe) {
    return "_sys_sprintf";
  } else if (fnid == 0xdd0c1e09) {
    return "_sys_spu_printf_attach_group";
  } else if (fnid == 0x1ae10b92) {
    return "_sys_spu_printf_attach_thread";
  } else if (fnid == 0x5fdfb2fe) {
    return "_sys_spu_printf_detach_group";
  } else if (fnid == 0xb3bbcf2a) {
    return "_sys_spu_printf_detach_thread";
  } else if (fnid == 0xdd3b27ac) {
    return "_sys_spu_printf_finalize";
  } else if (fnid == 0x45fe2fce) {
    return "_sys_spu_printf_initialize";
  } else if (fnid == 0x052d29a6) {
    return "_sys_strcat";
  } else if (fnid == 0x7498887b) {
    return "_sys_strchr";
  } else if (fnid == 0x459b4393) {
    return "_sys_strcmp";
  } else if (fnid == 0x99c88692) {
    return "_sys_strcpy";
  } else if (fnid == 0x2d36462b) {
    return "_sys_strlen";
  } else if (fnid == 0x1ca525a2) {
    return "_sys_strncasecmp";
  } else if (fnid == 0x996f7cf8) {
    return "_sys_strncat";
  } else if (fnid == 0x04e83d2c) {
    return "_sys_strncmp";
  } else if (fnid == 0xd3039d4d) {
    return "_sys_strncpy";
  } else if (fnid == 0x191f0c4a) {
    return "_sys_strrchr";
  } else if (fnid == 0x4b2f301a) {
    return "_sys_tolower";
  } else if (fnid == 0xeef75113) {
    return "_sys_toupper";
  } else if (fnid == 0xfa7f693d) {
    return "_sys_vprintf";
  } else if (fnid == 0x0618936b) {
    return "_sys_vsnprintf";
  } else if (fnid == 0x791b9219) {
    return "_sys_vsprintf";
  } else if (fnid == 0x8a2f159b) {
    return "console_getc";
  } else if (fnid == 0xe66bac36) {
    return "console_putc";
  } else if (fnid == 0xf57e1d6f) {
    return "console_write";
  } else if (fnid == 0xe76964f5) {
    return "sys_game_board_storage_read";
  } else if (fnid == 0x8bb03ab8) {
    return "sys_game_board_storage_write";
  } else if (fnid == 0x9f950780) {
    return "sys_game_get_rtc_status";
  } else if (fnid == 0x620e35a7) {
    return "sys_game_get_system_sw_version";
  } else if (fnid == 0x3172759d) {
    return "sys_game_get_temperature";
  } else if (fnid == 0xfc52a7a9) {
    return "sys_game_process_exitspawn";
  } else if (fnid == 0x67f9fedb) {
    return "sys_game_process_exitspawn2";
  } else if (fnid == 0xacad8fb6) {
    return "sys_game_watchdog_clear";
  } else if (fnid == 0x9e0623b5) {
    return "sys_game_watchdog_start";
  } else if (fnid == 0x6e05231d) {
    return "sys_game_watchdog_stop";
  } else if (fnid == 0x71a8472a) {
    return "sys_get_random_number";
  } else if (fnid == 0x744680a2) {
    return "sys_initialize_tls";
  } else if (fnid == 0x4a071d98) {
    return "sys_interrupt_thread_disestablish";
  } else if (fnid == 0xda0eb71a) {
    return "sys_lwcond_create";
  } else if (fnid == 0x1c9a942c) {
    return "sys_lwcond_destroy";
  } else if (fnid == 0xef87a695) {
    return "sys_lwcond_signal";
  } else if (fnid == 0xe9a1bd84) {
    return "sys_lwcond_signal_all";
  } else if (fnid == 0x52aadadf) {
    return "sys_lwcond_signal_to";
  } else if (fnid == 0x2a6d9d51) {
    return "sys_lwcond_wait";
  } else if (fnid == 0x2f85c0ef) {
    return "sys_lwmutex_create";
  } else if (fnid == 0xc3476d0c) {
    return "sys_lwmutex_destroy";
  } else if (fnid == 0x1573dc3f) {
    return "sys_lwmutex_lock";
  } else if (fnid == 0xaeb78725) {
    return "sys_lwmutex_trylock";
  } else if (fnid == 0x1bc200f4) {
    return "sys_lwmutex_unlock";
  } else if (fnid == 0xa146a143) {
    return "sys_mempool_allocate_block";
  } else if (fnid == 0xca9a60bf) {
    return "sys_mempool_create";
  } else if (fnid == 0x9d3c0f81) {
    return "sys_mempool_destroy";
  } else if (fnid == 0x608212fc) {
    return "sys_mempool_free_block";
  } else if (fnid == 0x25596f51) {
    return "sys_mempool_get_count";
  } else if (fnid == 0x05c65656) {
    return "sys_mempool_try_allocate_block";
  } else if (fnid == 0xb257540b) {
    return "sys_mmapper_allocate_memory";
  } else if (fnid == 0x70258515) {
    return "sys_mmapper_allocate_memory_from_container";
  } else if (fnid == 0x409ad939) {
    return "sys_mmapper_free_memory";
  } else if (fnid == 0xdc578057) {
    return "sys_mmapper_map_memory";
  } else if (fnid == 0x4643ba6e) {
    return "sys_mmapper_unmap_memory";
  } else if (fnid == 0x24a1ea07) {
    return "sys_ppu_thread_create";
  } else if (fnid == 0xaff080a4) {
    return "sys_ppu_thread_exit";
  } else if (fnid == 0x350d454e) {
    return "sys_ppu_thread_get_id";
  } else if (fnid == 0xa3e3be68) {
    return "sys_ppu_thread_once";
  } else if (fnid == 0x3dd4a957) {
    return "sys_ppu_thread_register_atexit";
  } else if (fnid == 0xac6fc404) {
    return "sys_ppu_thread_unregister_atexit";
  } else if (fnid == 0xe6f2c1e7) {
    return "sys_process_exit";
  } else if (fnid == 0x4f7172c9) {
    return "sys_process_is_stack";
  } else if (fnid == 0xa2c7ba64) {
    return "sys_prx_exitspawn_with_level";
  } else if (fnid == 0x0341bb97) {
    return "sys_prx_get_module_id_by_address";
  } else if (fnid == 0xe0998dbf) {
    return "sys_prx_get_module_id_by_name";
  } else if (fnid == 0x84bb6774) {
    return "sys_prx_get_module_info";
  } else if (fnid == 0xa5d06bf0) {
    return "sys_prx_get_module_list";
  } else if (fnid == 0x74311398) {
    return "sys_prx_get_my_module_id";
  } else if (fnid == 0x26090058) {
    return "sys_prx_load_module";
  } else if (fnid == 0xef68c17c) {
    return "sys_prx_load_module_by_fd";
  } else if (fnid == 0xb27c8ae7) {
    return "sys_prx_load_module_list";
  } else if (fnid == 0xe7ef3a80) {
    return "sys_prx_load_module_list_on_memcontainer";
  } else if (fnid == 0xaa6d9bff) {
    return "sys_prx_load_module_on_memcontainer";
  } else if (fnid == 0xa330ad84) {
    return "sys_prx_load_module_on_memcontainer_by_fd";
  } else if (fnid == 0x42b23552) {
    return "sys_prx_register_library";
  } else if (fnid == 0x9f18429d) {
    return "sys_prx_start_module";
  } else if (fnid == 0x80fb0c19) {
    return "sys_prx_stop_module";
  } else if (fnid == 0xf0aece0d) {
    return "sys_prx_unload_module";
  } else if (fnid == 0xd0ea47a7) {
    return "sys_prx_unregister_library";
  } else if (fnid == 0xb995662e) {
    return "sys_raw_spu_image_load";
  } else if (fnid == 0x893305fa) {
    return "sys_raw_spu_load";
  } else if (fnid == 0x8c2bb498) {
    return "sys_spinlock_initialize";
  } else if (fnid == 0xa285139d) {
    return "sys_spinlock_lock";
  } else if (fnid == 0x722a0254) {
    return "sys_spinlock_trylock";
  } else if (fnid == 0x5267cb35) {
    return "sys_spinlock_unlock";
  } else if (fnid == 0x1ed454ce) {
    return "sys_spu_elf_get_information";
  } else if (fnid == 0xdb6b3250) {
    return "sys_spu_elf_get_segments";
  } else if (fnid == 0xe0da8efd) {
    return "sys_spu_image_close";
  } else if (fnid == 0xebe5f72f) {
    return "sys_spu_image_import";
  } else if (fnid == 0x8461e528) {
    return "sys_time_get_system_time";
  } else if (fnid == 0xC02932C4) {
    return "aes_set_decrypt_key";
  } else if (fnid == 0x70C081A7) {
    return "aes_decrypt";
  } else if (fnid == 0xFC096B9E) {
    return "aes_set_encrypt_key";
  } else if (fnid == 0xBEFAD0E2) {
    return "aes_encrypt";
  } else if (fnid == 0x7B79B6C5) {
    return "aes_cbc_encrypt";
  } else if (fnid == 0xB45387CD) {
    return "aes_cbc_decrypt";
  } else if (fnid == 0x5FAFE92B) {
    return "sha1_buffer";
  } else if (fnid == 0x55ACAB8A) {
    return "sha1_init";
  } else if (fnid == 0x831E89EE) {
    return "sha1_update";
  } else if (fnid == 0x3CABD075) {
    return "sha1_final";
  } else if (fnid == 0x4484A101) {
    return "sha1_hmac_update";
  } else if (fnid == 0x547B602C) {
    return "sha1_hmac_init";
  } else if (fnid == 0x300B99F2) {
    return "sha1_hmac_final";
  } else if (fnid == 0x68B630D5) {
    return "aes_omac_mode1";
  } else if (fnid == 0x74A2A1FE) {
    return "sha1_hmac_buffer";
  } else if (fnid == 0xB80602D2) {
    return "ecdsa";
  } else {
    return form ("%X", fnid);
  }
}


static get_fnid_comment(module, fnid) {
  if (fnid == 0x1529e506) {
    return "int cellAdecDecodeAu(CellAdecAuInfo *auInfo)";
  } else if (fnid == 0x97ff2af1) {
    return "int cellAdecGetPcm(void *outBuffer)";
  } else if (fnid == 0xbd75f78b) {
    return "int cellAdecGetPcmItem(CellAdecPcmItem **pcmItem)";
  } else if (fnid == 0xd00a6988) {
    return "int32_t cellAdecOpen(CellAdecType *type, CellAdecResource *res, CellAdecCb *cb, CellAdecHandle *handle)";
  } else if (fnid == 0x8b5551a4) {
    return "int32_t cellAdecOpenEx(CellAdecType *type, CellAdecResourceEx *res, CellAdecCb *cb, CellAdecHandle *handle)";
  } else if (fnid == 0x7e4a4a49) {
    return "int32_t cellAdecQueryAttr(CellAdecType *type, CellAdecAttr *attr)";
  } else if (fnid == 0x487b613e) {
    return "int32_t cellAdecStartSeq(void *param)";
  } else if (fnid == 0x46cfc013) {
    return "int32_t cellAtracAddStreamData(CellAtracHandle *pHandle, uint32_t uiAddByte)";
  } else if (fnid == 0xfa293e88) {
    return "int32_t cellAtracCreateDecoder(CellAtracHandle *pHandle, uint8_t *pucWorkMem, uint32_t uiPpuThreadPriority, uint32_t uiSpuThreadPriority)";
  } else if (fnid == 0x2642d4cc) {
    return "int32_t cellAtracCreateDecoderExt(CellAtracHandle *pHandle, uint8_t *pucWorkMem, uint32_t uiPpuThreadPriority, CellAtracExtRes *pExtRes)";
  } else if (fnid == 0x8eb0e65f) {
    return "int32_t cellAtracDecode(CellAtracHandle *pHandle, float *pfOutAddr, uint32_t *puiSamples, uint32_t *puiFinishflag, int32_t *piRemainFrame)";
  } else if (fnid == 0x761cb9be) {
    return "int32_t cellAtracDeleteDecoder(CellAtracHandle *pHandle)";
  } else if (fnid == 0x006016da) {
    return "int32_t cellAtracGetBitrate(CellAtracHandle *pHandle, uint32_t *puiBitrate)";
  } else if (fnid == 0x99fb73d1) {
    return "int32_t cellAtracGetBufferInfoForResetting(CellAtracHandle *pHandle, uint32_t uiSample, CellAtracBufferInfo *pBufferInfo)";
  } else if (fnid == 0x0f9667b6) {
    return "int32_t cellAtracGetChannel(CellAtracHandle *pHandle, uint32_t *puiChannel)";
  } else if (fnid == 0xb5c11938) {
    return "int32_t cellAtracGetInternalErrorInfo(CellAtracHandle *pHandle, Int32_t *piResult)";
  } else if (fnid == 0xab6b6dbf) {
    return "int32_t cellAtracGetLoopInfo(CellAtracHandle *pHandle, int32_t *piLoopNum, uint32_t *puiLoopStatus)";
  } else if (fnid == 0x5f62d546) {
    return "int32_t cellAtracGetMaxSample(CellAtracHandle *pHandle, uint32_t *puiMaxSample)";
  } else if (fnid == 0x7b22e672) {
    return "int32_t cellAtracGetNextDecodePosition(CellAtracHandle *pHandle, uint32_t *puiSamplePosition)";
  } else if (fnid == 0x4797d1ff) {
    return "int32_t cellAtracGetNextSample(CellAtracHandle *pHandle, uint32_t *puiNextSample)";
  } else if (fnid == 0xdfab73aa) {
    return "int32_t cellAtracGetRemainFrame(CellAtracHandle *pHandle, int32_t *piRemainFrame)";
  } else if (fnid == 0xbe07f05e) {
    return "int32_t cellAtracGetSecondBufferInfo(CellAtracHandle *pHandle, uint32_t *puiReadPosition, uint32_t *puiDataByte)";
  } else if (fnid == 0xcf01d5d4) {
    return "int32_t cellAtracGetSoundInfo(CellAtracHandle *pHandle, int32_t *piEndSample, int32_t *piLoopStartSample, int32_t *piLoopEndSample)";
  } else if (fnid == 0x2bfff084) {
    return "int32_t cellAtracGetStreamDataInfo(CellAtracHandle *pHandle, uint8_t **ppucWritePointer, uint32_t *puiWritableByte, uint32_t *puiReadPosition)";
  } else if (fnid == 0xc9a95fcb) {
    return "int32_t cellAtracGetVacantSize(CellAtracHandle *pHandle, uint32_t *puiVacantSize)";
  } else if (fnid == 0x99efe171) {
    return "int32_t cellAtracIsSecondBufferNeeded(CellAtracHandle *pHandle)";
  } else if (fnid == 0x7772eb2b) {
    return "int32_t cellAtracResetPlayPosition(CellAtracHandle *pHandle, uint32_t uiSample, uint32_t uiWriteByte)";
  } else if (fnid == 0x66afc68e) {
    return "int32_t cellAtracSetDataAndGetMemSize(CellAtracHandle *pHandle, uint8_t *pucBufferAddr, uint32_t uiReadByte, uint32_t uiBufferByte, uint32_t *puiWorkMemByte)";
  } else if (fnid == 0x78ba5c41) {
    return "int32_t cellAtracSetLoopNum(CellAtracHandle *pHandle, int32_t iLoopNum)";
  } else if (fnid == 0x06ddb53e) {
    return "int32_t cellAtracSetSecondBuffer(CellAtracHandle *pHandle, uint8_t *pucSecondBufferAddr, uint32_t uiSecondBufferByte)";
  } else if (fnid == 0x9e4b1db8) {
    return "int cellAudioAdd2chData(uint32_t portNum, float *src, unsigned int samples, float volume)";
  } else if (fnid == 0x832df17e) {
    return "int cellAudioAdd6chData(uint32_t portNum, float *src, float volume)";
  } else if (fnid == 0xdab029aa) {
    return "int cellAudioAddData(uint32_t portNum, float volume)";
  } else if (fnid == 0xe4046afe) {
    return "int cellAudioGetPortBlockTag(uint32_t portNum, uint64_t blockNo, uint64_t *tag)";
  } else if (fnid == 0x74a66af0) {
    return "int cellAudioGetPortConfig(uint32_t portNum, CellAudioPortConfig *portConfig)";
  } else if (fnid == 0x4109d08c) {
    return "int cellAudioGetPortTimestamp(uint32_t portNum, uint64_t tag, usecond_t *stamp)";
  } else if (fnid == 0x0b168f92) {
    return "int cellAudioInit(void)";
  } else if (fnid == 0x31211f6b) {
    return "int cellAudioMiscSetAccessoryVolume(uint32_t devNum, float volume)";
  } else if (fnid == 0x4129fe2d) {
    return "int cellAudioPortClose(uint32_t portNum)";
  } else if (fnid == 0xcd7bc431) {
    return "int cellAudioPortOpen(CellAudioPortParam *audioParam, uint32_t *portNum)";
  } else if (fnid == 0x89be28f2) {
    return "int cellAudioPortStart(uint32_t portNum)";
  } else if (fnid == 0x5b1e2c73) {
    return "int cellAudioPortStop(uint32_t portNum)";
  } else if (fnid == 0xca5ac370) {
    return "int32_t cellAudioQuit(void)";
  } else if (fnid == 0xff3626fd) {
    return "int cellAudioRemoveNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0x2b9bd9ad) {
    return "int cellAudioRemoveNotifyEventQueueEx(sys_ipc_key_t key, uint32_t iFlags)";
  } else if (fnid == 0x17d1213b) {
    return "int cellAudioSendAck(uint64_t data3)";
  } else if (fnid == 0x377e0cd9) {
    return "int cellAudioSetNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0xb56ef5a1) {
    return "int cellAudioSetNotifyEventQueueEx(sys_ipc_key_t key, uint32_t iFlags)";
  } else if (fnid == 0x5676f81c) {
    return "int cellAudioSetPersonalDevice(int iPersonalStream, int iDevice)";
  } else if (fnid == 0x56dfe179) {
    return "int cellAudioSetPortLevel(uint32_t portNum, float level)";
  } else if (fnid == 0x28bc1409) {
    return "int cellAudioUnsetPersonalDevice(int iPersonalStream)";
  } else if (fnid == 0x4e9bb95b) {
    return "int cellBGDLGetInfo(const char *content_id, CellBGDLInfo *info, int num)";
  } else if (fnid == 0x2ab0d183) {
    return "int cellBGDLGetInfo2(const char *service_id, CellBGDLInfo *info, int num)";
  } else if (fnid == 0x74e57bdf) {
    return "int cellBGDLGetMode(CellBGDLMode *mode)";
  } else if (fnid == 0x7e134a90) {
    return "int cellBGDLSetMode(CellBGDLMode mode)";
  } else if (fnid == 0x379c5dd6) {
    return "int cellCameraClose(int dev_num)";
  } else if (fnid == 0xeb6f95fb) {
    return "int cellCameraCtrlExtensionUnit(int dev_num, uint8_t bRequest, uint16_t wValue, uint16_t wLength, uint8_t* pData)";
  } else if (fnid == 0x5ad46570) {
    return "int cellCameraEnd(void)";
  } else if (fnid == 0x532b8aaa) {
    return "int cellCameraGetAttribute(int dev_num, uint32_t *arg1, uint32_t *arg2)";
  } else if (fnid == 0x0e63c444) {
    return "int cellCameraGetBufferInfoEx(int dev_num, CellCameraInfoEx *info)";
  } else if (fnid == 0x7dac520c) {
    return "int cellCameraGetBufferSize(int dev_num, CellCameraInfoEx *info)";
  } else if (fnid == 0x602e2052) {
    return "int cellCameraGetDeviceGUID(int dev_num, uint32_t *ptr_guid)";
  } else if (fnid == 0xb602e328) {
    return "int cellCameraGetExtensionUnit(int dev_num, uint16_t wValue, uint16_t wLength, uint8_t* pData)";
  } else if (fnid == 0x58bc5870) {
    return "int cellCameraGetType(int dev_num, CellCameraType *type)";
  } else if (fnid == 0xbf47c5dd) {
    return "int cellCameraInit(void)";
  } else if (fnid == 0x7e063bbc) {
    return "int cellCameraIsAttached(int dev_num)";
  } else if (fnid == 0x8ca53dde) {
    return "int cellCameraIsAvailable(int dev_num)";
  } else if (fnid == 0xfa160f24) {
    return "int cellCameraIsOpen(int dev_num)";
  } else if (fnid == 0x5eebf24e) {
    return "int cellCameraIsStarted(int dev_num)";
  } else if (fnid == 0x5d25f866) {
    return "int cellCameraOpenEx(int dev_num, CellCameraInfoEx *info)";
  } else if (fnid == 0x61dfbe83) {
    return "int cellCameraPrepExtensionUnit(int dev_num, uint8_t* guidExtensionCode)";
  } else if (fnid == 0x3845d39b) {
    return "int cellCameraRead(int dev_num, unsigned int *frame_num, unsigned int *bytes_read)";
  } else if (fnid == 0xe28b206b) {
    return "int cellCameraReadComplete(int dev_num, uint32_t bufnum, uint32_t arg2)";
  } else if (fnid == 0x21fc151f) {
    return "int cellCameraReadEx(int dev_num, CellCameraReadEx* pread)";
  } else if (fnid == 0x9b98d258) {
    return "int cellCameraRemoveNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0x44673f07) {
    return "int cellCameraRemoveNotifyEventQueue2(sys_ipc_key_t key)";
  } else if (fnid == 0x81f83db9) {
    return "int cellCameraReset(int dev_num)";
  } else if (fnid == 0x8cd56eee) {
    return "int cellCameraSetAttribute(int dev_num, uint32_t arg1, uint32_t arg2)";
  } else if (fnid == 0x2dea3e9b) {
    return "int cellCameraSetExtensionUnit(int dev_num, uint16_t wValue, uint16_t wLength, uint8_t* pData)";
  } else if (fnid == 0xb0647e5a) {
    return "int cellCameraSetNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0xa7fd2f5b) {
    return "int cellCameraSetNotifyEventQueue2(sys_ipc_key_t key, uint64_t source, uint64_t flag)";
  } else if (fnid == 0x456dc4aa) {
    return "int cellCameraStart(int dev_num)";
  } else if (fnid == 0x02f5ced0) {
    return "int cellCameraStop(int dev_num)";
  } else if (fnid == 0x2099f86e) {
    return "int32_t cellCelp8EncEncodeFrame(CellCelp8EncPcmInfo *frameInfo)";
  } else if (fnid == 0x48c5020d) {
    return "int32_t cellCelp8EncGetAu(void *outBuffer, CellCelp8EncAuInfo *auItem)";
  } else if (fnid == 0x2eb6efee) {
    return "int32_t cellCelp8EncOpen(CellCelp8EncResource *res, CellCelp8EncHandle *handle)";
  } else if (fnid == 0xcd48ad62) {
    return "int32_t cellCelp8EncOpenEx(CellCelp8EncResourceEx *res, CellCelp8EncHandle *handle)";
  } else if (fnid == 0x2d677e0c) {
    return "int32_t cellCelp8EncQueryAttr(CellCelp8EncAttr *attr)";
  } else if (fnid == 0x0f6ab57b) {
    return "int32_t cellCelp8EncStart(CellCelp8EncParam *param)";
  } else if (fnid == 0x81fe030c) {
    return "int32_t cellCelpEncEncodeFrame(CellCelpEncPcmInfo *frameInfo)";
  } else if (fnid == 0x3773692f) {
    return "int32_t cellCelpEncGetAu(void *outBuffer, CellCelpEncAuInfo *auItem)";
  } else if (fnid == 0x77b3b29a) {
    return "int32_t cellCelpEncOpen(CellCelpEncResource *res, CellCelpEncHandle *handle)";
  } else if (fnid == 0x9eb084db) {
    return "int32_t cellCelpEncOpenEx(CellCelpEncResourceEx *res, CellCelpEncHandle *handle)";
  } else if (fnid == 0x6b148570) {
    return "int32_t cellCelpEncQueryAttr(CellCelpEncAttr *attr)";
  } else if (fnid == 0x55dc23de) {
    return "int32_t cellCelpEncStart(CellCelpEncParam *param)";
  } else if (fnid == 0x8921232c) {
    return "cell::Daisy::LFQueue2PopOpen(cell::Daisy::LFQueue2*)";
  } else if (fnid == 0x43838c2a) {
    return "cell::Daisy::LFQueue2PopClose(cell::Daisy::LFQueue2*, int (*)(void*, unsigned int))";
  } else if (fnid == 0x437151f0) {
    return "cell::Daisy::LFQueue2PushOpen(cell::Daisy::LFQueue2*)";
  } else if (fnid == 0xa2e6c4b0) {
    return "cell::Daisy::LFQueue2PushClose(cell::Daisy::LFQueue2*, int (*)(void*, unsigned int))";
  } else if (fnid == 0x6f564a3d) {
    return "cell::Daisy::LFQueue2GetPopPointer(cell::Daisy::LFQueue2*, int*, unsigned int)";
  } else if (fnid == 0xa98e3c4b) {
    return "cell::Daisy::ScatterGatherInterlock::proceedSequenceNumber()";
  } else if (fnid == 0xdeb0d2e6) {
    return "cell::Daisy::ScatterGatherInterlock::probe(unsigned int)";
  } else if (fnid == 0xfa46fd99) {
    return "cell::Daisy::ScatterGatherInterlock::release()";
  } else if (fnid == 0x20586bc0) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, unsigned int*, unsigned int, unsigned char)";
  } else if (fnid == 0x8d42fae9) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, void*, int (*)(void*, unsigned int))";
  } else if (fnid == 0xb8e85009) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, unsigned int*, unsigned int, unsigned char)";
  } else if (fnid == 0xa4cd494e) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, void*, int (*)(void*, unsigned int))";
  } else if (fnid == 0xed37e00a) {
    return "cell::Daisy::ScatterGatherInterlock::~ScatterGatherInterlock()";
  } else if (fnid == 0x7e639d78) {
    return "cell::Daisy::ScatterGatherInterlock::~ScatterGatherInterlock()";
  } else if (fnid == 0xce618901) {
    return "cell::Daisy::LFQueue2CompletePopPointer(cell::Daisy::LFQueue2*, int, int (*)(void*, unsigned int), unsigned int)";
  } else if (fnid == 0x72dee049) {
    return "cell::Daisy::LFQueue2HasUnfinishedConsumer(cell::Daisy::LFQueue2*, unsigned int)";
  } else if (fnid == 0x8fd3b122) {
    return "cell::Daisy::Lock::initialize(unsigned int)";
  } else if (fnid == 0x163dafeb) {
    return "cell::Daisy::Lock::completeConsume(unsigned int)";
  } else if (fnid == 0x933c2273) {
    return "cell::Daisy::Lock::completeProduce(unsigned int)";
  } else if (fnid == 0xc3e29e69) {
    return "cell::Daisy::Lock::getNextHeadPointer()";
  } else if (fnid == 0xf88e07db) {
    return "cell::Daisy::Lock::getNextTailPointer()";
  } else if (fnid == 0x1cf82d42) {
    return "cell::Daisy::Lock::popOpen()";
  } else if (fnid == 0x4c34ec38) {
    return "cell::Daisy::Lock::popClose()";
  } else if (fnid == 0xd888f42a) {
    return "cell::Daisy::Lock::pushOpen()";
  } else if (fnid == 0xc6c5f3c6) {
    return "cell::Daisy::Lock::pushClose()";
  } else if (fnid == 0x17348ba6) {
    return "cell::Daisy::_snprintf(char*, unsigned int, char const*, ...)";
  } else if (fnid == 0xa286b24a) {
    return "cell::Daisy::LFQueue2PopOpen(cell::Daisy::LFQueue2*)";
  } else if (fnid == 0x9581b8bc) {
    return "cell::Daisy::LFQueue2PopClose(cell::Daisy::LFQueue2*, int (*)(void*, unsigned int))";
  } else if (fnid == 0xf2034429) {
    return "cell::Daisy::LFQueue2PushOpen(cell::Daisy::LFQueue2*)";
  } else if (fnid == 0x0563627c) {
    return "cell::Daisy::LFQueue2PushClose(cell::Daisy::LFQueue2*, int (*)(void*, unsigned int))";
  } else if (fnid == 0x0d219671) {
    return "cell::Daisy::LFQueue2GetPopPointer(cell::Daisy::LFQueue2*, int*, unsigned int)";
  } else if (fnid == 0xc0faf91c) {
    return "cell::Daisy::ScatterGatherInterlock::proceedSequenceNumber()";
  } else if (fnid == 0xd2be66e6) {
    return "cell::Daisy::ScatterGatherInterlock::probe(unsigned int)";
  } else if (fnid == 0x1ce8c914) {
    return "cell::Daisy::ScatterGatherInterlock::release()";
  } else if (fnid == 0x1e5b1e23) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, unsigned int*, unsigned int, unsigned char)";
  } else if (fnid == 0x3190dfe4) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, void*, int (*)(void*, unsigned int))";
  } else if (fnid == 0x34234bf0) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, unsigned int*, unsigned int, unsigned char)";
  } else if (fnid == 0xb190d6ad) {
    return "cell::Daisy::ScatterGatherInterlock::ScatterGatherInterlock(cell::Daisy::_AtomicInterlock volatile*, unsigned int, void*, int (*)(void*, unsigned int))";
  } else if (fnid == 0x8dacb8d0) {
    return "cell::Daisy::ScatterGatherInterlock::~ScatterGatherInterlock()";
  } else if (fnid == 0x5a93e4e8) {
    return "cell::Daisy::ScatterGatherInterlock::~ScatterGatherInterlock()";
  } else if (fnid == 0x1bbcb5b9) {
    return "cell::Daisy::LFQueue2CompletePopPointer(cell::Daisy::LFQueue2*, int, int (*)(void*, unsigned int), unsigned int)";
  } else if (fnid == 0x2be4dde1) {
    return "cell::Daisy::LFQueue2HasUnfinishedConsumer(cell::Daisy::LFQueue2*, unsigned int)";
  } else if (fnid == 0x2e8654f8) {
    return "cell::Daisy::Lock::initialize(unsigned int)";
  } else if (fnid == 0xbd091e26) {
    return "cell::Daisy::Lock::completeConsume(unsigned int)";
  } else if (fnid == 0x41df5d21) {
    return "cell::Daisy::Lock::completeProduce(unsigned int)";
  } else if (fnid == 0x2c967aa1) {
    return "cell::Daisy::Lock::getNextHeadPointer()";
  } else if (fnid == 0x6fc83371) {
    return "cell::Daisy::Lock::getNextTailPointer()";
  } else if (fnid == 0x17c35cc9) {
    return "cell::Daisy::Lock::popOpen()";
  } else if (fnid == 0x566c9460) {
    return "cell::Daisy::Lock::popClose()";
  } else if (fnid == 0x706feed9) {
    return "cell::Daisy::Lock::pushOpen()";
  } else if (fnid == 0x7b79d6aa) {
    return "cell::Daisy::Lock::pushClose()";
  } else if (fnid == 0x28acb77f) {
    return "cell::Daisy::_snprintf(char*, unsigned int, char const*, ...)";
  } else if (fnid == 0x7b56dc3f) {
    return "int32_t cellDmuxEnableEs(const CellCodecEsFilterId *esFilterId, const CellDmuxEsResource *esResourceInfo, const CellDmuxEsCb *esCb, const void *esSpecificInfo, CellDmuxEsHandle *esHandle)";
  } else if (fnid == 0x42c716b5) {
    return "int32_t cellDmuxGetAu(const CellDmuxAuInfo **auInfo, void **auSpecificInfo)";
  } else if (fnid == 0x2c9a5857) {
    return "int32_t cellDmuxGetAuEx(const CellDmuxAuInfoEx **auInfoEx, void **auSpecificInfo)";
  } else if (fnid == 0x68492de9) {
    return "int32_t cellDmuxOpen(const CellDmuxType *demuxerType, const CellDmuxResource *demuxerResource, const CellDmuxCb *demuxerCb, CellDmuxHandle *demuxerHandle)";
  } else if (fnid == 0x11bc3a6c) {
    return "int32_t cellDmuxOpen2(const CellDmuxType2 *demuxerType2, const CellDmuxResource2 *demuxerResource2, const CellDmuxCb *demuxerCb, CellDmuxHandle *demuxerHandle)";
  } else if (fnid == 0xf6c23560) {
    return "int32_t cellDmuxOpenEx(const CellDmuxType *demuxerType, const CellDmuxResourceEx *demuxerResourceEx, const CellDmuxCb *demuxerCb, CellDmuxHandle *demuxerHandle)";
  } else if (fnid == 0x2750c5e0) {
    return "int32_t cellDmuxPeekAu(const CellDmuxAuInfo **auInfo, void **auSpecificInfo)";
  } else if (fnid == 0x002e8da2) {
    return "int32_t cellDmuxPeekAuEx(const CellDmuxAuInfoEx **auInfoEx, void **auSpecificInfo)";
  } else if (fnid == 0xa2d4189b) {
    return "int32_t cellDmuxQueryAttr(const CellDmuxType *demuxerType, CellDmuxAttr *demuxerAttr)";
  } else if (fnid == 0x3f76e3cd) {
    return "int32_t cellDmuxQueryAttr2(const CellDmuxType2 *demuxerType2, CellDmuxAttr *demuxerAttr)";
  } else if (fnid == 0x02170d1a) {
    return "int32_t cellDmuxQueryEsAttr(const CellCodecEsFilterId *esFilterId, const void *esSpecificInfo, CellDmuxEsAttr *esAttr)";
  } else if (fnid == 0x52911bcf) {
    return "int32_t cellDmuxQueryEsAttr2(const CellCodecEsFilterId *esFilterId, const void *esSpecificInfo, CellDmuxEsAttr *esAttr)";
  } else if (fnid == 0x04e7499f) {
    return "int32_t cellDmuxSetStream(const void *streamAddress, size_t streamSize, bool discontinuity, uint64_t userData)";
  } else if (fnid == 0xf6c6900c) {
    return "int cellFiberPpuCheckFlags(CellFiberPpuScheduler* scheduler)";
  } else if (fnid == 0x0a25b6c8) {
    return "int cellFiberPpuContextEnterScheduler(uint64_t arg0, uint64_t arg1, CellFiberPpuContext** fiberFrom, const CellFiberPpuContextExecutionOption* option)";
  } else if (fnid == 0xb3a48079) {
    return "int cellFiberPpuContextFinalize(CellFiberPpuContext* context)";
  } else if (fnid == 0x72086315) {
    return "int cellFiberPpuContextInitialize(CellFiberPpuContext* context, uint64_t arg, void* eaStack, size_t sizeStack, const CellFiberPpuContextAttribute* attr)";
  } else if (fnid == 0x01036193) {
    return "int cellFiberPpuContextReturnToThread(int cause)";
  } else if (fnid == 0xaba1c563) {
    return "int cellFiberPpuContextRun(CellFiberPpuContext* context, int* cause, CellFiberPpuContext** fiberFrom, const CellFiberPpuContextExecutionOption* option)";
  } else if (fnid == 0x081c98be) {
    return "int cellFiberPpuContextRunScheduler(uint64_t arg0, CellFiberPpuContext** fiberFrom, const CellFiberPpuContextExecutionOption* option)";
  } else if (fnid == 0xd0066b17) {
    return "int cellFiberPpuContextSwitch(CellFiberPpuContext* context, CellFiberPpuContext** fiberFrom, const CellFiberPpuContextExecutionOption* option)";
  } else if (fnid == 0x7c2f4034) {
    return "int cellFiberPpuCreateFiber(CellFiberPpuScheduler* scheduler, CellFiberPpu* fiber, uint64_t arg, unsigned int priority, void* eaStack, size_t sizeStack, const CellFiberPpuAttribute* attr)";
  } else if (fnid == 0xfa8d5f95) {
    return "int cellFiberPpuExit(int status)";
  } else if (fnid == 0x8b6baa01) {
    return "int cellFiberPpuFinalizeScheduler(CellFiberPpuScheduler* scheduler)";
  } else if (fnid == 0xb0594b2d) {
    return "int cellFiberPpuGetScheduler(CellFiberPpu* fiber, CellFiberPpuScheduler** pScheduler)";
  } else if (fnid == 0xe492a675) {
    return "int cellFiberPpuHasRunnableFiber(CellFiberPpuScheduler* scheduler, bool* flag)";
  } else if (fnid == 0xee3b604d) {
    return "int cellFiberPpuInitializeScheduler(CellFiberPpuScheduler* scheduler, CellFiberPpuSchedulerAttribute* attr)";
  } else if (fnid == 0xa6004249) {
    return "int cellFiberPpuJoinFiber(CellFiberPpu* fiber, int* status)";
  } else if (fnid == 0x12b1acf0) {
    return "int cellFiberPpuRunFibers(CellFiberPpuScheduler* scheduler)";
  } else if (fnid == 0x3860a12a) {
    return "int cellFiberPpuSchedulerTraceFinalize(CellFiberPpuScheduler *scheduler)";
  } else if (fnid == 0xbf9cd933) {
    return "int cellFiberPpuSchedulerTraceInitialize(CellFiberPpuScheduler *scheduler, void *buffer, size_t size, uint32_t mode)";
  } else if (fnid == 0xadedbebf) {
    return "int cellFiberPpuSchedulerTraceStart(CellFiberPpuScheduler *scheduler)";
  } else if (fnid == 0xe665f9a9) {
    return "int cellFiberPpuSchedulerTraceStop(CellFiberPpuScheduler *scheduler)";
  } else if (fnid == 0x8afb8356) {
    return "int cellFiberPpuSendSignal(CellFiberPpu* fiber, unsigned int* numWorker, uint32_t eaFiber, unsigned int* numWorker)";
  } else if (fnid == 0xfbf5fe40) {
    return "int cellFiberPpuSetPriority(unsigned priority)";
  } else if (fnid == 0xa4599cf3) {
    return "int cellFiberPpuWaitFlag(uint32_t* eaFlag, bool flagValue)";
  } else if (fnid == 0x47ca71ef) {
    return "int32_t cellFontAdjustFontScaling(const CellFont *font, float fontScale)";
  } else if (fnid == 0x9e3b1e16) {
    return "int32_t cellFontAdjustGlyphExpandBuffer(const CellFont *font)";
  } else if (fnid == 0x66a23100) {
    return "int cellFontBindRenderer(const CellFont *font, CellFontRenderer *renderer)";
  } else if (fnid == 0xb276f1f6) {
    return "int cellFontCloseFont(CellFont *font)";
  } else if (fnid == 0x042e74e3) {
    return "int cellFontCreateRenderer(const CellFontLibrary *library, CellFontRendererConfig *config, CellFontRenderer *Renderer)";
  } else if (fnid == 0xa7b2103a) {
    return "int cellFontDelete(const CellFontLibrary *library, void *p)";
  } else if (fnid == 0xd62f5d76) {
    return "int cellFontDeleteGlyph(const CellFont *font, CellFontGlyph *glyph)";
  } else if (fnid == 0x21ebb248) {
    return "int cellFontDestroyRenderer(CellFontRenderer *renderer)";
  } else if (fnid == 0x8a35c887) {
    return "int32_t cellFontEndGraphics(const CellFontGraphics *graphics)";
  } else if (fnid == 0x40d40544) {
    return "int cellFontEndLibrary(const CellFontLibrary *library)";
  } else if (fnid == 0xc17259de) {
    return "int cellFontGenerateCharGlyph(const CellFont *font, uint32_t code, CellFontGlyph **glyph)";
  } else if (fnid == 0xcaed32c1) {
    return "int cellFontGenerateCharGlyphVertical(const CellFont *font, uint32_t code, CellFontGlyph **glyph)";
  } else if (fnid == 0xc91c8ece) {
    return "int cellFontGetBindingRenderer(const CellFont *font, CellFontRenderer **renderer)";
  } else if (fnid == 0xd8eaee9f) {
    return "int cellFontGetCharGlyphMetrics(const CellFont *font, uint32_t code, CellFontGlyphMetrics *metrics)";
  } else if (fnid == 0xfe9a6dd7) {
    return "int cellFontGetCharGlyphMetricsVertical(const CellFont *font, uint32_t code, CellFontGlyphMetrics *metrics)";
  } else if (fnid == 0xe16e679a) {
    return "int32_t cellFontGetEffectSlant(const CellFont *font, float *slantParam)";
  } else if (fnid == 0x25dbeff9) {
    return "int32_t cellFontGetEffectWeight(const CellFont *font, float *weightParam)";
  } else if (fnid == 0x98ac5524) {
    return "int cellFontGetFontIdCode(const CellFont *font, uint32_t code, uint32_t *fontId, uint32_t *fontCode)";
  } else if (fnid == 0x59ef0073) {
    return "int32_t cellFontGetGlyphExpandBufferInfo(const CellFont *font)";
  } else if (fnid == 0x1387c45c) {
    return "int32_t cellFontGetHorizontalLayout(const CellFont *font, CellFontHorizontalLayout *layout)";
  } else if (fnid == 0x06be743d) {
    return "int32_t cellFontGetKerning(const CellFont *font, uint32_t preCode, uint32_t code, CellFontKerning *kerning)";
  } else if (fnid == 0x5abd8b1e) {
    return "int32_t cellFontGetLibrary(const CellFont *font, const CellFontLibrary **library, uint32_t *libraryType)";
  } else if (fnid == 0x2da9fd9d) {
    return "int cellFontGetRenderCharGlyphMetrics(const CellFont *font, uint32_t code, CellFontGlyphMetrics* *metrics)";
  } else if (fnid == 0x700e6223) {
    return "int cellFontGetRenderCharGlyphMetricsVertical(const CellFont *font, uint32_t code, CellFontGlyphMetrics* *metrics)";
  } else if (fnid == 0xced4dda9) {
    return "int32_t cellFontGetRenderEffectSlant(const CellFont *font, float *slantParam)";
  } else if (fnid == 0x0109f3d3) {
    return "int32_t cellFontGetRenderEffectWeight(const CellFont *font, float *weightParam)";
  } else if (fnid == 0x0baf90fe) {
    return "int32_t cellFontGetRenderScaledKerning(const CellFont *font, uint32_t preCode, uint32_t code, CellFontKerning *kerning)";
  } else if (fnid == 0x0d106a11) {
    return "int cellFontGetRenderScalePixel(const CellFont *font, float *w, float *h)";
  } else if (fnid == 0xa165daae) {
    return "int cellFontGetRenderScalePoint(const CellFont *font, float *w, float *h)";
  } else if (fnid == 0x8a632038) {
    return "int32_t cellFontGetResolutionDpi(const CellFont *font, uint32_t *hDpi, uint32_t *vDpi)";
  } else if (fnid == 0x285d30d6) {
    return "int32_t cellFontGetScalePixel(const CellFont *font, float *w, float *h)";
  } else if (fnid == 0xf7a19060) {
    return "int32_t cellFontGetScalePoint(const CellFont *font, float *w, float *h)";
  } else if (fnid == 0x698897f8) {
    return "int32_t cellFontGetVerticalLayout(const CellFont *font, CellFontVerticalLayout *layout)";
  } else if (fnid == 0x231d5941) {
    return "int cellFontGlyphGetHorizontalShift(CellFontGlyph *glyph, float *shiftX, float *shiftY)";
  } else if (fnid == 0xa8fae920) {
    return "int cellFontGlyphGetOutlineControlDistance(CellFontGlyph *glyph, float maxScale, float baseControlDistance, float *controlDistance)";
  } else if (fnid == 0x9c8d3ff7) {
    return "int cellFontGlyphGetOutlineVertexes(CellFontGlyph *glyph, float controlDistance, CellFontGetOutlineVertexesIF *getIF, CellFontGlyphBoundingBox *boundingBox, uint32_t *vcount)";
  } else if (fnid == 0x22e24707) {
    return "int cellFontGlyphGetScalePixel(CellFontGlyph *glyph, float *w, float *h)";
  } else if (fnid == 0xb4d112af) {
    return "int cellFontGlyphGetVertexesGlyphSize(CellFontGlyph *glyph, float controlDistance, uint32_t *useSize)";
  } else if (fnid == 0x534e785f) {
    return "int cellFontGlyphGetVerticalShift(CellFontGlyph *glyph, float *shiftX, float *shiftY)";
  } else if (fnid == 0xe01b199e) {
    return "int cellFontGlyphRenderImage(CellFontGlyph *glyph, CellFontGlyphStyle *style, CellFontRenderer *renderer, CellFontRenderSurface *surface, float x, float y, CellFontGlyphMetrics *metrics, CellFontImageTransInfo *transInfo)";
  } else if (fnid == 0x8e3f2c40) {
    return "int cellFontGlyphRenderImageVertical(CellFontGlyph *glyph, CellFontGlyphStyle *style, CellFontRenderer *renderer, CellFontRenderSurface *surface, float x, float y, CellFontGlyphMetrics *metrics, CellFontImageTransInfo *transInfo)";
  } else if (fnid == 0x53f529fe) {
    return "int cellFontGlyphSetupVertexesGlyph(CellFontGlyph *glyph, float controlDistance, uint32_t *mappedBuf, uint32_t mappedBufSize, CellFontVertexesGlyph *VertexesGlyph, uint32_t *dataSize)";
  } else if (fnid == 0x03a142b9) {
    return "int32_t cellFontGraphicsGetDrawType(CellFontGraphicsDrawContext *drawContext, uint32_t *drawType)";
  } else if (fnid == 0xa41342dc) {
    return "int32_t cellFontGraphicsGetFontRGBA(CellFontGraphicsDrawContext *drawContext)";
  } else if (fnid == 0xf7aaa8e2) {
    return "int32_t cellFontGraphicsGetLineRGBA(CellFontGraphicsDrawContext *drawContext)";
  } else if (fnid == 0x2388186c) {
    return "int32_t cellFontGraphicsGetScalePixel(CellFontGraphicsDrawContext *drawContext, float *w, float *h)";
  } else if (fnid == 0x87bd650f) {
    return "int32_t cellFontGraphicsSetDrawType(CellFontGraphicsDrawContext *drawContext, uint32_t drawType)";
  } else if (fnid == 0x061049ad) {
    return "int32_t cellFontGraphicsSetFontRGBA(CellFontGraphicsDrawContext *drawContext)";
  } else if (fnid == 0x7c83bc15) {
    return "int32_t cellFontGraphicsSetLineRGBA(CellFontGraphicsDrawContext *drawContext)";
  } else if (fnid == 0x16322df1) {
    return "int32_t cellFontGraphicsSetScalePixel(CellFontGraphicsDrawContext *drawContext, float w, float h)";
  } else if (fnid == 0x970d4c22) {
    return "int32_t cellFontGraphicsSetupDrawContext(const CellFontGraphics *graphics, CellFontGraphicsDrawContext *drawContext)";
  } else if (fnid == 0x0a7306a4) {
    return "int32_t cellFontOpenFontFile(const CellFontLibrary *library, uint8_t *fontPath, uint32_t subNum, int32_t uniqueId, CellFont *font)";
  } else if (fnid == 0x29329541) {
    return "int32_t cellFontOpenFontInstance(CellFont *openedFont, CellFont *font)";
  } else if (fnid == 0x9e19072b) {
    return "int32_t cellFontOpenFontMemory(const CellFontLibrary *library, void *fontAddr, uint32_t fontSize, uint32_t subNum, int32_t uniqueId, CellFont *font)";
  } else if (fnid == 0xa885cc9b) {
    return "int32_t cellFontOpenFontset(const CellFontLibrary *library, CellFontType *fontType, CellFont *font)";
  } else if (fnid == 0x073fa321) {
    return "int32_t cellFontOpenFontsetOnMemory(const CellFontLibrary *library, CellFontType *fontType, CellFont *font)";
  } else if (fnid == 0x88be4799) {
    return "int cellFontRenderCharGlyphImage(const CellFont *font, uint32_t code, CellFontRenderSurface *surface, float x, float y, CellFontGlyphMetrics* *metrics, CellFontImageTransInfo *transInfo)";
  } else if (fnid == 0x1a218fe4) {
    return "int cellFontRenderCharGlyphImageHorizontal(const CellFont *font, uint32_t code, CellFontRenderSurface *surface, float x, float y, CellFontGlyphMetrics *metrics, CellFontImageTransInfo *transInfo)";
  } else if (fnid == 0xe857a0ca) {
    return "int cellFontRenderCharGlyphImageVertical(const CellFont *font, uint32_t code, CellFontRenderSurface *surface, float x, float y, CellFontGlyphMetrics *metrics, CellFontImageTransInfo *transInfo)";
  } else if (fnid == 0x90b9465e) {
    return "void cellFontRenderSurfaceInit(CellFontRenderSurface *surface, void *buffer, int bufferWidthByte, int pixelSizeByte, int w, int h)";
  } else if (fnid == 0xb422b005) {
    return "void cellFontRenderSurfaceSetScissor(CellFontRenderSurface *surface, int x0, int y0, int w, int h)";
  } else if (fnid == 0x8657c8f5) {
    return "int32_t cellFontSetEffectSlant(const CellFont *font, float slantParam)";
  } else if (fnid == 0x25253fe4) {
    return "int32_t cellFontSetEffectWeight(const CellFont *font, float weightParam)";
  } else if (fnid == 0x6cfada83) {
    return "int32_t cellFontSetFontOpenMode(const CellFontLibrary *library, uint32_t openMode)";
  } else if (fnid == 0x6bf6f832) {
    return "int32_t cellFontSetFontsetOpenMode(const CellFontLibrary *library, uint32_t openMode)";
  } else if (fnid == 0xfb3341ba) {
    return "int32_t cellFontSetResolutionDpi(const CellFont *font, uint32_t hDpi, uint32_t vDpi)";
  } else if (fnid == 0x297f0e93) {
    return "int32_t cellFontSetScalePixel(const CellFont *font, float w, float h)";
  } else if (fnid == 0x70f3e728) {
    return "int32_t cellFontSetScalePoint(const CellFont *font, float w, float h)";
  } else if (fnid == 0x78d05e08) {
    return "int32_t cellFontSetupRenderEffectSlant(const CellFont *font, float slantParam)";
  } else if (fnid == 0xa6dc25d1) {
    return "int32_t cellFontSetupRenderEffectWeight(const CellFont *font, float weightParam)";
  } else if (fnid == 0x227e1e3c) {
    return "int cellFontSetupRenderScalePixel(const CellFont *font, float w, float h)";
  } else if (fnid == 0x4d19c631) {
    return "int cellFontSetupRenderScalePoint(const CellFont *font, float w, float h)";
  } else if (fnid == 0xf16379fa) {
    return "int cellFontUnbindRenderer(CellFont *font)";
  } else if (fnid == 0x6bad7a69) {
    return "int cellFontVertexesGlyphRelocate(CellFontVertexesGlyph *VertexesGlyph, CellFontVertexesGlyph *VertexesGlyph2, CellFontVertexesGlyphSubHeader *SubHeader, uint32_t *relocateBuf, uint32_t relocateSize)";
  } else if (fnid == 0xf52639ea) {
    return "int cellGameBootCheck(unsigned int *type, unsigned int *attributes, CellGameContentSize *size, char *dirName)";
  } else if (fnid == 0xb0a1f8c6) {
    return "int cellGameContentErrorDialog(int type, int errNeedSizeKB, const char *dirName)";
  } else if (fnid == 0x70acec67) {
    return "int cellGameContentPermit(char *contentInfoPath, char *usrdirPath)";
  } else if (fnid == 0x42a2e133) {
    return "int cellGameCreateGameData(CellGameSetInitParams *init, char *tmp_contentInfoPath, char *tmp_usrdirPath)";
  } else if (fnid == 0xdb9819f3) {
    return "int cellGameDataCheck(unsigned int type, const char *dirName, CellGameContentSize *size)";
  } else if (fnid == 0xb367c6e3) {
    return "int cellGameDeleteGameData(const char *dirName)";
  } else if (fnid == 0x2a8e6b92) {
    return "int cellGameGetDiscContentInfoUpdatePath(char *updatePath)";
  } else if (fnid == 0xa80bf223) {
    return "int cellGameGetLocalWebContentPath(char *contentPath)";
  } else if (fnid == 0xb7a45caf) {
    return "int cellGameGetParamInt(int id, int *value)";
  } else if (fnid == 0x3a5d726a) {
    return "int cellGameGetParamString(int id, char *buf, unsigned int bufsize)";
  } else if (fnid == 0xef9d42d5) {
    return "int cellGameGetSizeKB(int *sizeKB)";
  } else if (fnid == 0xce4374f6) {
    return "int cellGamePatchCheck(CellGameContentSize *size, void *reserved)";
  } else if (fnid == 0xdaa5cd20) {
    return "int cellGameSetParamString(int id, const char *buf)";
  } else if (fnid == 0xd24e3928) {
    return "int cellGameThemeInstall(const char *usrdirPath, const char *fileName, unsigned int option)";
  } else if (fnid == 0x87406734) {
    return "int cellGameThemeInstallFromBuffer(unsigned int fileSize, unsigned int bufSize, void *buf, unsigned int option)";
  } else if (fnid == 0xf6acd0bc) {
    return "int cellGameGetBootGameInfo(unsigned int *type, char *dirName, unsigned int *execdata)";
  } else if (fnid == 0x59b1ede1) {
    return "int cellGameGetHomeDataExportPath(char *exportPath)";
  } else if (fnid == 0x72cc6cf7) {
    return "int cellGameGetHomeDataImportPath(char *importPath)";
  } else if (fnid == 0x94e9f81d) {
    return "int cellGameGetHomeLaunchOptionPath(char *commonPath, char *personalPath)";
  } else if (fnid == 0x38579ec9) {
    return "int cellGameSetExitParam(unsigned int execdata)";
  } else if (fnid == 0x21ac3697) {
    return "int32_t cellGcmAddressToOffset(const void *address, uint32_t *offset)";
  } else if (fnid == 0x4524cccd) {
    return "int32_t cellGcmBindTile(const uint8_t index)";
  } else if (fnid == 0x9dc04436) {
    return "int32_t cellGcmBindZcull(const uint32_t index, const uint32_t offset, const uint32_t width, const uint32_t height, const uint32_t cullStart, const uint32_t zFormat, const uint32_t aaFormat, const uint32_t zcullDir, const uint32_t zcullFormat, const uint32_t sFunc, const uint32_t sRef, const uint32_t sMask)";
  } else if (fnid == 0xa547adde) {
    return "void cellGcmGetControlRegister(void)";
  } else if (fnid == 0x93806525) {
    return "int32_t cellGcmGetCurrentDisplayBufferId(uint8_t *id)";
  } else if (fnid == 0xc8f3bd09) {
    return "uint32_t cellGcmGetCurrentField(void)";
  } else if (fnid == 0x5e2ee0f0) {
    return "uint32_t cellGcmGetDefaultCommandWordSize(void)";
  } else if (fnid == 0x8cdf8c70) {
    return "uint32_t cellGcmGetDefaultSegmentWordSize(void)";
  } else if (fnid == 0x371674cf) {
    return "int32_t cellGcmGetDisplayBufferByFlipIndex(const uint8_t fid)";
  } else if (fnid == 0x0e6b0dae) {
    return "void cellGcmGetDisplayInfo(void)";
  } else if (fnid == 0x72a577ce) {
    return "uint32_t cellGcmGetFlipStatus(void)";
  } else if (fnid == 0xf80196c1) {
    return "void cellGcmGetLabelAddress(const uint8_t index)";
  } else if (fnid == 0x63387071) {
    return "system_time_t cellGcmGetLastFlipTime(void)";
  } else if (fnid == 0x23ae55a3) {
    return "system_time_t cellGcmGetLastSecondVTime(void)";
  } else if (fnid == 0xfb81c03e) {
    return "uint32_t cellGcmGetMaxIoMapSize(void)";
  } else if (fnid == 0x21cee035) {
    return "void cellGcmGetNotifyDataAddress(const uint32_t index)";
  } else if (fnid == 0x2922aed0) {
    return "void cellGcmGetOffsetTable(CellGcmOffsetTable *table)";
  } else if (fnid == 0x99d397ac) {
    return "uint32_t cellGcmGetReport(const uint32_t type, const uint32_t index)";
  } else if (fnid == 0x9a0159af) {
    return "void cellGcmGetReportDataAddress(const uint32_t index)";
  } else if (fnid == 0x8572bce2) {
    return "void cellGcmGetReportDataAddressLocation(const uint32_t index, const uint32_t location)";
  } else if (fnid == 0xa6b180ac) {
    return "uint32_t cellGcmGetReportDataLocation(const uint32_t index, const uint32_t location)";
  } else if (fnid == 0x055bd74d) {
    return "uint32_t cellGcmGetTiledPitchSize(const uint32_t size)";
  } else if (fnid == 0x657571f7) {
    return "void cellGcmGetTileInfo(void)";
  } else if (fnid == 0x5a41c10f) {
    return "uint64_t cellGcmGetTimeStamp(const uint32_t index)";
  } else if (fnid == 0x2ad4951b) {
    return "uint64_t cellGcmGetTimeStampLocation(const uint32_t index, const uint32_t location)";
  } else if (fnid == 0x723bbc7e) {
    return "uint64_t cellGcmGetVBlankCount(void)";
  } else if (fnid == 0xd9a0a879) {
    return "void cellGcmGetZcullInfo(void)";
  } else if (fnid == 0x107bf3a1) {
    return "int32_t cellGcmInitCursor(void)";
  } else if (fnid == 0xcaabd992) {
    return "Int32_t cellGcmInitDefaultFifoMode(int32_t mode)";
  } else if (fnid == 0xfce9e764) {
    return "int32_t cellGcmInitSystemMode(const uint64_t mode)";
  } else if (fnid == 0x2a6fba9c) {
    return "int32_t cellGcmIoOffsetToAddress(uint32_t ioOffset, void **address)";
  } else if (fnid == 0x63441cb4) {
    return "int32_t cellGcmMapEaIoAddress(const void *ea, const uint32_t io, const uint32_t size)";
  } else if (fnid == 0x626e8518) {
    return "int32_t cellGcmMapEaIoAddressWithFlags(const void *ea, const uint32_t io, const uint32_t size, const uint32_t userflags)";
  } else if (fnid == 0xdb769b32) {
    return "int32_t cellGcmMapLocalMemory(void **address, uint32_t *size)";
  } else if (fnid == 0xa114ec67) {
    return "int32_t cellGcmMapMainMemory(const void * ea, const uint32_t size, const uint32_t *offset)";
  } else if (fnid == 0xa7ede268) {
    return "int32_t cellGcmReserveIoMapSize(const uint32_t size)";
  } else if (fnid == 0xb2e761d4) {
    return "void cellGcmResetFlipStatus(void)";
  } else if (fnid == 0x69c6cc82) {
    return "int32_t cellGcmSetCursorDisable(void)";
  } else if (fnid == 0xc47d0812) {
    return "int32_t cellGcmSetCursorEnable(void)";
  } else if (fnid == 0xf9bfdc72) {
    return "int32_t cellGcmSetCursorImageOffset(uint32_t offset)";
  } else if (fnid == 0x1a0de550) {
    return "int32_t cellGcmSetCursorPosition(int32_t x, int32_t y)";
  } else if (fnid == 0x51c9d62b) {
    return "void cellGcmSetDebugOutputLevel(int32_t level)";
  } else if (fnid == 0xbc982946) {
    return "void cellGcmSetDefaultCommandBuffer(void )";
  } else if (fnid == 0x172c3197) {
    return "Int32_t cellGcmSetDefaultCommandBufferAndSegmentWordSize(const uint32_t bufferSize, const uint32_t segmentSize)";
  } else if (fnid == 0x9ba451e4) {
    return "Int32_t cellGcmSetDefaultFifoSize(const uint32_t bufferSize, const uint32_t segmentSize)";
  } else if (fnid == 0xa53d12ae) {
    return "int32_t cellGcmSetDisplayBuffer(const uint8_t id, const uint32_t offset, const uint32_t pitch, const uint32_t width, const uint32_t height)";
  } else if (fnid == 0xacee8542) {
    return "int32_t cellGcmSetFlipImmediate(const uint8_t fid)";
  } else if (fnid == 0x4ae8d215) {
    return "void cellGcmSetFlipMode(const uint32_t mode)";
  } else if (fnid == 0xa47c09ff) {
    return "void cellGcmSetFlipStatus(void)";
  } else if (fnid == 0x4d7ce993) {
    return "void cellGcmSetSecondVFrequency(const uint32_t freq)";
  } else if (fnid == 0xbd100dbc) {
    return "int32_t cellGcmSetTileInfo(const uint8_t index, const uint8_t location, const uint32_t offset, const uint32_t size, const uint32_t pitch, const uint8_t comp, const uint16_t base, const uint32_t bank)";
  } else if (fnid == 0xffe0160e) {
    return "void cellGcmSetVBlankFrequency(const uint32_t freq)";
  } else if (fnid == 0xd34a420d) {
    return "void cellGcmSetZcull(const uint32_t index, const uint32_t offset, const uint32_t width, const uint32_t height, const uint32_t cullStart, const uint32_t zFormat, const uint32_t aaFormat, const uint32_t zcullDir, const uint32_t zcullFormat, const uint32_t sFunc, const uint32_t sRef, const uint32_t sMask)";
  } else if (fnid == 0x25b40ab4) {
    return "int32_t cellGcmSortRemapEaIoAddress(void)";
  } else if (fnid == 0xd9b7653e) {
    return "int32_t cellGcmUnbindTile(const uint8_t index)";
  } else if (fnid == 0xa75640e8) {
    return "int32_t cellGcmUnbindZcull(const uint8_t index)";
  } else if (fnid == 0xefd00f54) {
    return "int32_t cellGcmUnmapEaIoAddress(const void *ea)";
  } else if (fnid == 0xdb23e867) {
    return "int32_t cellGcmUnmapIoAddress(const uint32_t io)";
  } else if (fnid == 0x3b9bd5bd) {
    return "int32_t cellGcmUnreserveIoMapSize(const uint32_t size)";
  } else if (fnid == 0xbd2fa0a7) {
    return "int32_t cellGcmUpdateCursor(void)";
  } else if (fnid == 0xb60d42a5) {
    return "int32_t cellGifDecCreate(CellGifDecMainHandle *mainHandle, const CellGifDecThreadInParam *threadInParam, CellGifDecThreadOutParam *threadOutParam)";
  } else if (fnid == 0x44b1bc61) {
    return "int32_t cellGifDecDecodeData(uint8_t *data, const CellGifDecDataCtrlParam *dataCtrlParam, CellGifDecDataOutInfo *dataOutInfo)";
  } else if (fnid == 0x4711cb7f) {
    return "int32_t cellGifDecExtCreate(CellGifDecMainHandle *mainHandle, const CellGifDecThreadInParam *threadInParam, CellGifDecThreadOutParam *threadOutParam, const CellGifDecExtThreadInParam *extThreadInParam, CellGifDecExtThreadOutParam *extThreadOutParam)";
  } else if (fnid == 0x02e7e03e) {
    return "int32_t cellGifDecExtDecodeData(uint8_t *data, const CellGifDecDataCtrlParam *dataCtrlParam, CellGifDecDataOutInfo *dataOutInfo, const CellGifDecCbCtrlDisp *cbCtrlDisp, CellGifDecDispParam *dispParam)";
  } else if (fnid == 0x17fb83c1) {
    return "int32_t cellGifDecExtOpen(CellGifDecOpnInfo *openInfo, const CellGifDecCbCtrlStrm *cbCtrlStrm)";
  } else if (fnid == 0xe53f91f2) {
    return "int32_t cellGifDecExtReadHeader(CellGifDecInfo *info, CellGifDecExtInfo *extInfo)";
  } else if (fnid == 0x95cae771) {
    return "int32_t cellGifDecExtSetParameter(CellGifDecOutParam *outParam, const CellGifDecExtInParam *extInParam, CellGifDecExtOutParam *extOutParam)";
  } else if (fnid == 0x75745079) {
    return "int32_t cellGifDecOpen(CellGifDecOpnInfo *openInfo)";
  } else if (fnid == 0xf0da95de) {
    return "int32_t cellGifDecReadHeader(CellGifDecInfo *info)";
  } else if (fnid == 0x41a90dc4) {
    return "int32_t cellGifDecSetParameter(const CellGifDecInParam *inParam, CellGifDecOutParam *outParam)";
  } else if (fnid == 0x1b5bdcc6) {
    return "int cellHttpAddCookieWithClientId(const CellHttpUri *uri, const char *cookie)";
  } else if (fnid == 0x4b33942a) {
    return "int cellHttpClientAddHeader(const CellHttpHeader *header)";
  } else if (fnid == 0x27f86d70) {
    return "int cellHttpClientCloseConnections(const CellHttpUri *uri)";
  } else if (fnid == 0x617eec02) {
    return "int cellHttpClientDeleteHeader(const char *name)";
  } else if (fnid == 0x0d9c65be) {
    return "int cellHttpClientGetAllHeaders(CellHttpHeader **headers, size_t *items, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0xfce39343) {
    return "int cellHttpClientGetAuthenticationCacheStatus(bool *enable)";
  } else if (fnid == 0x5980a293) {
    return "int cellHttpClientGetAutoAuthentication(bool *enable)";
  } else if (fnid == 0x2960e309) {
    return "int cellHttpClientGetAutoRedirect(bool *enable)";
  } else if (fnid == 0x14bfc765) {
    return "int cellHttpClientGetConnTimeout(int64_t *usec)";
  } else if (fnid == 0xeb9c1e5e) {
    return "int cellHttpClientGetCookieStatus(bool *enable)";
  } else if (fnid == 0xd1ec0b25) {
    return "int cellHttpClientGetHeader(CellHttpHeader *header, const char *name, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x591c21a8) {
    return "int cellHttpClientGetKeepAlive(bool *enable)";
  } else if (fnid == 0x46bcc9ff) {
    return "int cellHttpClientGetPerHostKeepAliveMax(size_t *maxSize)";
  } else if (fnid == 0xffc74003) {
    return "int cellHttpClientGetPerHostPoolSize(size_t *poolSize)";
  } else if (fnid == 0xd06c90a4) {
    return "int cellHttpClientGetPerPipelineMax(size_t *pipeMax)";
  } else if (fnid == 0x2a1f28f6) {
    return "int cellHttpClientGetPipeline(bool *enable)";
  } else if (fnid == 0x4d40cf98) {
    return "int cellHttpClientGetProxy(CellHttpUri *proxy, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x130150ea) {
    return "int cellHttpClientGetRecvBufferSize(int *size)";
  } else if (fnid == 0xba78e51f) {
    return "int cellHttpClientGetRecvTimeout(int64_t *usec)";
  } else if (fnid == 0x6884cdb7) {
    return "int cellHttpClientGetResponseBufferMax(size_t *max)";
  } else if (fnid == 0x271a0b06) {
    return "int cellHttpClientGetSendTimeout(int64_t *usec)";
  } else if (fnid == 0x070f1020) {
    return "int cellHttpClientGetTotalPoolSize(size_t *poolSize)";
  } else if (fnid == 0xee05b0c1) {
    return "int cellHttpClientGetUserAgent(char *userAgent, size_t size, size_t *required)";
  } else if (fnid == 0xdc405507) {
    return "int cellHttpClientGetVersion(uint32_t *major, uint32_t *minor)";
  } else if (fnid == 0xadc0a4b2) {
    return "int cellHttpClientPollConnections(CellHttpTransId *transId, int64_t usec)";
  } else if (fnid == 0x6eed4999) {
    return "int cellHttpClientSetAuthenticationCacheStatus(bool enable)";
  } else if (fnid == 0x660d42a9) {
    return "int cellHttpClientSetAuthenticationCallback(const char *realm, const CellHttpUri *uri, char *username, char *password, bool *save, void *userArg, CellHttpAuthenticationCallback cbfunc, void *userArg)";
  } else if (fnid == 0x8eaf47a3) {
    return "int cellHttpClientSetAutoAuthentication(bool enable)";
  } else if (fnid == 0x211d8ba3) {
    return "int cellHttpClientSetAutoRedirect(bool enable)";
  } else if (fnid == 0xd7471088) {
    return "int cellHttpClientSetConnTimeout(int64_t usec)";
  } else if (fnid == 0x13fe767b) {
    return "int cellHttpClientSetCookieRecvCallback(const CellHttpUri *uri, const char *cookieValue, void *userArg, CellHttpCookieRecvCallback cbfunc, void *userArg)";
  } else if (fnid == 0x4d915204) {
    return "int cellHttpClientSetCookieSendCallback(const CellHttpUri *uri, const char *cookieValue, void *userArg, CellHttpCookieSendCallback cbfunc, void *userArg)";
  } else if (fnid == 0x434419c8) {
    return "int cellHttpClientSetCookieStatus(bool enable)";
  } else if (fnid == 0xa34c4b6f) {
    return "int cellHttpClientSetHeader(const CellHttpHeader *header)";
  } else if (fnid == 0x5d473170) {
    return "int cellHttpClientSetKeepAlive(bool enable)";
  } else if (fnid == 0x595adee9) {
    return "int cellHttpClientSetPerHostKeepAliveMax(size_t maxSize)";
  } else if (fnid == 0xab1c55ab) {
    return "int cellHttpClientSetPerHostPoolSize(size_t poolSize)";
  } else if (fnid == 0xdc7ed599) {
    return "int cellHttpClientSetPerPipelineMax(size_t pipeMax)";
  } else if (fnid == 0x296a46cf) {
    return "int cellHttpClientSetPipeline(bool enable)";
  } else if (fnid == 0xd7d3cd5d) {
    return "int cellHttpClientSetProxy(const CellHttpUri *proxy)";
  } else if (fnid == 0xbf6e3659) {
    return "int cellHttpClientSetRecvBufferSize(int size)";
  } else if (fnid == 0x224e1610) {
    return "int cellHttpClientSetRecvTimeout(int64_t usec)";
  } else if (fnid == 0x473cd9f1) {
    return "int cellHttpClientSetRedirectCallback(const CellHttpStatusLine *response, const CellHttpUri *from, const CellHttpUri *to, void *userArg, CellHttpRedirectCallback cbfunc, void *userArg)";
  } else if (fnid == 0xadd66b5c) {
    return "int cellHttpClientSetResponseBufferMax(size_t max)";
  } else if (fnid == 0x71714cdc) {
    return "int cellHttpClientSetSendTimeout(int64_t usec)";
  } else if (fnid == 0x1395d8d1) {
    return "int cellHttpClientSetSslCallback(uint32_t verifyErr, int certNum, const char *hostname, void *userArg, CellHttpsSslCallback cbfunc, void *userArg)";
  } else if (fnid == 0xd8352a40) {
    return "int cellHttpClientSetSslClientCertificate(const CellHttpsData *cert, const CellHttpsData *privKey)";
  } else if (fnid == 0x8aa5fcd3) {
    return "int cellHttpClientSetTotalPoolSize(size_t poolSize)";
  } else if (fnid == 0xb6feb84b) {
    return "int cellHttpClientSetTransactionStateCallback(int32_t state, void *userArg, CellHttpTransactionStateCallback cbfunc, void *userArg)";
  } else if (fnid == 0xcac9fc34) {
    return "int cellHttpClientSetUserAgent(const char *userAgent)";
  } else if (fnid == 0x40547d8b) {
    return "int cellHttpClientSetVersion(uint32_t major, uint32_t minor)";
  } else if (fnid == 0xf972c733) {
    return "int cellHttpCookieExportWithClientId(void *buffer, size_t size, size_t *exportSize)";
  } else if (fnid == 0x0d846d63) {
    return "int cellHttpCookieImportWithClientId(const void *buffer, size_t size)";
  } else if (fnid == 0x4e4ee53a) {
    return "int cellHttpCreateClient(CellHttpClientId *clientId)";
  } else if (fnid == 0x052a80d9) {
    return "int cellHttpCreateTransaction(CellHttpTransId *transId, const char *method, const CellHttpUri *uri)";
  } else if (fnid == 0x2a87603a) {
    return "int cellHttpGetProxy(CellHttpUri *proxy, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x250c386c) {
    return "int cellHttpInit(void *pool, size_t poolSize)";
  } else if (fnid == 0x9638f766) {
    return "int cellHttpInitCookie(void *pool, size_t poolSize)";
  } else if (fnid == 0x61c90691) {
    return "int cellHttpRecvResponse(char *buf, size_t size, size_t *recvd)";
  } else if (fnid == 0xed993147) {
    return "int cellHttpRequestAddHeader(const CellHttpHeader *header)";
  } else if (fnid == 0x16214411) {
    return "int cellHttpRequestDeleteHeader(const char *name)";
  } else if (fnid == 0x42205fe0) {
    return "int cellHttpRequestGetAllHeaders(CellHttpHeader **headers, size_t *items, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x4137a1f6) {
    return "int cellHttpRequestGetChunkedTransferStatus(bool *enable)";
  } else if (fnid == 0x958323cf) {
    return "int cellHttpRequestGetContentLength(uint64_t *totalSize)";
  } else if (fnid == 0x0b9fea5f) {
    return "int cellHttpRequestGetHeader(CellHttpHeader *header, const char *name, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x8e3f7ee1) {
    return "int cellHttpRequestSetChunkedTransferStatus(bool enable)";
  } else if (fnid == 0xaf73a64e) {
    return "int cellHttpRequestSetContentLength(uint64_t totalSize)";
  } else if (fnid == 0x54f2a4de) {
    return "int cellHttpRequestSetHeader(const CellHttpHeader *header)";
  } else if (fnid == 0xbea17389) {
    return "int cellHttpResponseGetAllHeaders(CellHttpHeader **headers, size_t *items, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x464ff889) {
    return "int cellHttpResponseGetContentLength(uint64_t *length)";
  } else if (fnid == 0x4f5d8d20) {
    return "int cellHttpResponseGetHeader(CellHttpHeader *header, const char *name, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x10d0d7fc) {
    return "int cellHttpResponseGetStatusCode(int32_t *code)";
  } else if (fnid == 0x6a81b5e4) {
    return "int cellHttpResponseGetStatusLine(CellHttpStatusLine *status, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0xa755b005) {
    return "int cellHttpSendRequest(const char *buf, size_t size, size_t *sent)";
  } else if (fnid == 0x0d896b97) {
    return "int cellHttpSetProxy(const CellHttpUri *proxy)";
  } else if (fnid == 0x522180bc) {
    return "int cellHttpsInit(size_t caCertNum, const CellHttpsData *caList)";
  } else if (fnid == 0x38954133) {
    return "int cellHttpTransactionGetSslCipherBits(int32_t *effectiveBits, int32_t *algorithmBits)";
  } else if (fnid == 0x34061e49) {
    return "int cellHttpTransactionGetSslCipherId(int32_t *id)";
  } else if (fnid == 0x895c604c) {
    return "int cellHttpTransactionGetSslCipherName(char *name, size_t size, size_t *required)";
  } else if (fnid == 0xe3c424b3) {
    return "int cellHttpTransactionGetSslCipherString(char *buffer, size_t size)";
  } else if (fnid == 0x93e938e5) {
    return "int cellHttpTransactionGetSslCipherVersion(char *version, size_t size, size_t *required)";
  } else if (fnid == 0x2a78ff04) {
    return "int cellHttpTransactionGetSslId(CellHttpSslId *id)";
  } else if (fnid == 0xad1c6f02) {
    return "int cellHttpTransactionGetSslVersion(int32_t *version)";
  } else if (fnid == 0x0ef17399) {
    return "int cellHttpTransactionGetUri(CellHttpUri *uri, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0xd47cc666) {
    return "int cellHttpTransactionReleaseConnection(int *sid)";
  } else if (fnid == 0x37bb53a2) {
    return "int cellHttpUtilAppendHeaderValue(CellHttpHeader *dest, const CellHttpHeader *src, const char *value, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x8e52ee08) {
    return "int cellHttpUtilBase64Decoder(char *output, const void *in, size_t len)";
  } else if (fnid == 0x83faa354) {
    return "int cellHttpUtilBase64Encoder(char *out, const void *input, size_t len)";
  } else if (fnid == 0x04accebf) {
    return "int cellHttpUtilBuildHeader(const CellHttpHeader *header, char *buf, size_t len, size_t *required)";
  } else if (fnid == 0x1c6e4dbb) {
    return "int cellHttpUtilBuildRequestLine(const CellHttpRequestLine *req, char *buf, size_t len, size_t *required)";
  } else if (fnid == 0x6f0f7667) {
    return "int cellHttpUtilBuildUri(const CellHttpUri *uri, char *buf, size_t len, size_t *required, int32_t flags)";
  } else if (fnid == 0x97f9fbe5) {
    return "int cellHttpUtilCopyHeader(CellHttpHeader *dest, const CellHttpHeader *src, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x50ea75bc) {
    return "int cellHttpUtilCopyStatusLine(CellHttpStatusLine *dest, const CellHttpStatusLine *src, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0xf05df789) {
    return "int cellHttpUtilCopyUri(CellHttpUri *dest, const CellHttpUri *src, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0x9003b1f2) {
    return "int cellHttpUtilEscapeUri(char *out, size_t outSize, const unsigned char *in, size_t inSize, size_t *required)";
  } else if (fnid == 0x8e6c5bb9) {
    return "int cellHttpUtilFormUrlDecode(unsigned char *out, size_t size, const char *in, size_t *required)";
  } else if (fnid == 0x44d756d6) {
    return "int cellHttpUtilFormUrlEncode(char *out, size_t outSize, const unsigned char *in, size_t inSize, size_t *required)";
  } else if (fnid == 0x8ea23deb) {
    return "int cellHttpUtilMergeUriPath(CellHttpUri *uri, const CellHttpUri *src, const char *path, void *pool, size_t poolSize, size_t *required)";
  } else if (fnid == 0xe1fb0ebd) {
    return "int cellHttpUtilParseHeader(CellHttpHeader *header, const char *str, size_t len, void *pool, size_t size, size_t *required, size_t *parsedLength)";
  } else if (fnid == 0xa3457869) {
    return "int cellHttpUtilParseProxy(CellHttpUri *uri, const char *str, void *pool, size_t size, size_t *required)";
  } else if (fnid == 0x2bcbced4) {
    return "int cellHttpUtilParseStatusLine(CellHttpStatusLine *resp, const char *str, size_t len, void *pool, size_t size, size_t *required, size_t *parsedLength)";
  } else if (fnid == 0x32faaf58) {
    return "int cellHttpUtilParseUri(CellHttpUri *uri, const char *str, void *pool, size_t size, size_t *required)";
  } else if (fnid == 0x8bb608e4) {
    return "int cellHttpUtilParseUriPath(CellHttpUriPath *path, const char *str, void *pool, size_t size, size_t *required)";
  } else if (fnid == 0xaabeb869) {
    return "int cellHttpUtilSweepPath(char *dst, const char *src, size_t srcSize)";
  } else if (fnid == 0x2763fd66) {
    return "int cellHttpUtilUnescapeUri(unsigned char *out, size_t size, const char *in, size_t *required)";
  } else if (fnid == 0xeede898c) {
    return "int cellImeJpConfirmPrediction(CellImeJpPredictItem *pPredictItem)";
  } else if (fnid == 0x7a18c2b9) {
    return "int cellImeJpCurrentPartConfirm(int16_t listItem)";
  } else if (fnid == 0x6ccbe3d6) {
    return "int cellImeJpEnterChar(uint16_t inputChar, int16_t *pOutputStatus)";
  } else if (fnid == 0x5b6ada55) {
    return "int cellImeJpEnterCharExt(uint16_t inputChar, int16_t *pOutputStatus)";
  } else if (fnid == 0x441a1c2b) {
    return "int cellImeJpEnterString(const uint16_t *pInputString, int16_t *pOutputStatus)";
  } else if (fnid == 0x6298b55a) {
    return "int cellImeJpEnterStringExt(const uint16_t *pInputString, int16_t *pOutputStatus)";
  } else if (fnid == 0xe4cc15ba) {
    return "int cellImeJpGetCandidateList(int16_t *plistNum, uint16_t *pCandidateString)";
  } else if (fnid == 0xc4796a45) {
    return "int cellImeJpGetCandidateListSize(int16_t *pListSize)";
  } else if (fnid == 0x177bd218) {
    return "int cellImeJpGetCandidateSelect(int16_t *pIndex)";
  } else if (fnid == 0xd3fc3606) {
    return "int cellImeJpGetConfirmString(uint16_t *pConfirmString)";
  } else if (fnid == 0x89f8a567) {
    return "int cellImeJpGetConfirmYomiString(uint16_t *pYomiString)";
  } else if (fnid == 0xf91abda3) {
    return "int cellImeJpGetConvertString(uint16_t *pConvertString)";
  } else if (fnid == 0xea2d4881) {
    return "int cellImeJpGetConvertYomiString(uint16_t *pYomiString)";
  } else if (fnid == 0x5f5b3227) {
    return "int cellImeJpGetFocusLength(int16_t *pFocusLength)";
  } else if (fnid == 0x0e363ae7) {
    return "int cellImeJpGetFocusTop(int16_t *pFocusTop)";
  } else if (fnid == 0x1986f2cd) {
    return "int cellImeJpGetPredictList(int16_t *pYomiString, int32_t itemNum, int32_t *plistCount, CellImeJpPredictItem *pPredictItem)";
  } else if (fnid == 0x66c6cc78) {
    return "int cellImeJpGetStatus(int16_t *pInputStatus)";
  } else if (fnid == 0x1e411261) {
    return "int cellImeJpMoveFocusClause(int16_t moveType)";
  } else if (fnid == 0x44608862) {
    return "int cellImeJpOpen(sys_memory_container_t container_id, CellImeJpHandle *hImeJpHandle)";
  } else if (fnid == 0x47b43dd4) {
    return "int cellImeJpOpen2(sys_memory_container_t container_id, CellImeJpHandle *hImeJpHandle)";
  } else if (fnid == 0x1b119958) {
    return "int cellImeJpOpen3(sys_memory_container_t container_id, CellImeJpHandle *hImeJpHandle, const CellImeJpAddDic *addDicPath)";
  } else if (fnid == 0x8bb41f47) {
    return "int cellImeJpPostConvert(int16_t postType)";
  } else if (fnid == 0xc1786c81) {
    return "int cellImeJpSetFixInputMode(int16_t fixInputMode)";
  } else if (fnid == 0xf5992ec8) {
    return "int cellImeJpSetInputCharType(int16_t charTypeOption)";
  } else if (fnid == 0x24e9d8fc) {
    return "int cellImeJpSetKanaInputMode(int16_t inputOption)";
  } else if (fnid == 0xbd679cc1) {
    return "int cellImeJpTemporalConfirm(int16_t selectIndex)";
  } else if (fnid == 0xa7978f59) {
    return "int32_t cellJpgDecCreate(CellJpgDecMainHandle *mainHandle, const CellJpgDecThreadInParam *threadInParam, CellJpgDecThreadOutParam *threadOutParam)";
  } else if (fnid == 0xaf8bb012) {
    return "int32_t cellJpgDecDecodeData(uint8_t *data, const CellJpgDecDataCtrlParam *dataCtrlParam, CellJpgDecDataOutInfo *dataOutInfo)";
  } else if (fnid == 0x8b300f66) {
    return "int32_t cellJpgDecExtCreate( *extThreadOutParam)";
  } else if (fnid == 0x716f8792) {
    return "int32_t cellJpgDecExtDecodeData(uint8_t *data, const CellJpgDecDataCtrlParam *dataCtrlParam, CellJpgDecDataOutInfo *dataOutInfo, const CellJpgDecCbCtrlDisp *cbCtrlDisp, CellJpgDecDispParam *dispParam)";
  } else if (fnid == 0xa9f703e3) {
    return "int32_t cellJpgDecExtOpen(CellJpgDecOpnInfo *openInfo, const CellJpgDecCbCtrlStrm *cbCtrlStrm)";
  } else if (fnid == 0xb91eb3d2) {
    return "int32_t cellJpgDecExtReadHeader(CellJpgDecInfo *info, CellJpgDecExtInfo *extInfo)";
  } else if (fnid == 0x65cbbb16) {
    return "int32_t cellJpgDecExtSetParameter(CellJpgDecOutParam *outParam, const CellJpgDecExtInParam *extInParam, CellJpgDecExtOutParam *extOutParam)";
  } else if (fnid == 0x976ca5c2) {
    return "int32_t cellJpgDecOpen(CellJpgDecOpnInfo *openInfo)";
  } else if (fnid == 0x6d9ebccf) {
    return "int32_t cellJpgDecReadHeader(CellJpgDecInfo *info)";
  } else if (fnid == 0xe08f3910) {
    return "int32_t cellJpgDecSetParameter(CellJpgDecOutParam *outParam)";
  } else if (fnid == 0xa9e81214) {
    return "int32_t cellJpgEncEncodePicture(const CellJpgEncPicture *picture, const CellJpgEncEncodeParam *encodeParam, const CellJpgEncOutputParam *outputParam)";
  } else if (fnid == 0x636dc89e) {
    return "int32_t cellJpgEncEncodePicture2(const CellJpgEncPicture2 *picture, const CellJpgEncEncodeParam *encodeParam, const CellJpgEncOutputParam *outputParam)";
  } else if (fnid == 0x4262e880) {
    return "int32_t cellJpgEncGetStreamInfo(CellJpgEncStreamInfo *streamInfo)";
  } else if (fnid == 0xa4bfae51) {
    return "int32_t cellJpgEncOpen(const CellJpgEncConfig *config, const CellJpgEncResource *resource, CellJpgEncHandle *handle)";
  } else if (fnid == 0x6f2d371c) {
    return "int32_t cellJpgEncOpenEx(const CellJpgEncConfig *config, const CellJpgEncResourceEx *resourceEx, CellJpgEncHandle *handle)";
  } else if (fnid == 0x12d9b6c5) {
    return "int32_t cellJpgEncQueryAttr(const CellJpgEncConfig *config, CellJpgEncAttr *attr)";
  } else if (fnid == 0x2ae79be8) {
    return "int32_t cellJpgEncWaitForInput(bool block)";
  } else if (fnid == 0x9b4e3a74) {
    return "int32_t cellJpgEncWaitForOutput(uint32_t *streamInfoNum, bool block)";
  } else if (fnid == 0x56776c0d) {
    return "int32_t cellKey2CharGetChar(CellKey2CharKeyData *kdata, uint16_t **charcode, uint32_t *charNum, bool *processed)";
  } else if (fnid == 0xabf629c1) {
    return "int32_t cellKey2CharOpen(CellKey2CharHandle handle)";
  } else if (fnid == 0x0dfbadfa) {
    return "int32_t cellKey2CharSetArrangement(int32_t arrange)";
  } else if (fnid == 0xbfc03768) {
    return "int32_t cellKey2CharSetMode(int32_t mode)";
  } else if (fnid == 0xeb41cc68) {
    return "void ARIBstoUCS2s(size_t *arib_len, size_t *ucs2_len)";
  } else if (fnid == 0x32689828) {
    return "void ARIBstoUTF8s(size_t *arib_len, size_t *utf8_len)";
  } else if (fnid == 0xfa4a675a) {
    return "void BIG5stoUCS2s(size_t *big5_len, size_t *ucs2_len)";
  } else if (fnid == 0xd990858b) {
    return "void BIG5stoUTF8s(size_t *big5_len, size_t *utf8_len)";
  } else if (fnid == 0x9ec52258) {
    return "int BIG5toUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x4b3bbacb) {
    return "int BIG5toUTF8(size_t *utf8_len)";
  } else if (fnid == 0x9cd8135b) {
    return "void EUCCNstoUCS2s(size_t *euccn_len, size_t *ucs2_len)";
  } else if (fnid == 0x1ae2acee) {
    return "void EUCCNstoUTF8s(size_t *euccn_len, size_t *utf8_len)";
  } else if (fnid == 0xd9fb1224) {
    return "int EUCCNtoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x8171c1cc) {
    return "int EUCCNtoUTF8(size_t *utf8_len)";
  } else if (fnid == 0xa34fa0eb) {
    return "void EUCJPstoJISs(size_t *eucjp_len, size_t *jis_len)";
  } else if (fnid == 0x511d386b) {
    return "void EUCJPstoSJISs(size_t *eucjp_len, size_t *sjis_len)";
  } else if (fnid == 0x90e9b5d2) {
    return "void EUCJPstoUCS2s(size_t *eucjp_len, size_t *ucs2_len)";
  } else if (fnid == 0x5ac783dc) {
    return "void EUCJPstoUTF8s(size_t *eucjp_len, size_t *utf8_len)";
  } else if (fnid == 0x53c71ac2) {
    return "int EUCJPtoSJIS(size_t *sjis_len)";
  } else if (fnid == 0x54f59807) {
    return "int EUCJPtoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x3dabd5a7) {
    return "int EUCJPtoUTF8(size_t *utf8_len)";
  } else if (fnid == 0x14f504b8) {
    return "void EUCKRstoUCS2s(size_t *euckr_len, size_t *ucs2_len)";
  } else if (fnid == 0x8a56f148) {
    return "void EUCKRstoUHCs(size_t *euckr_len, size_t *uhc_len)";
  } else if (fnid == 0x2b84030c) {
    return "void EUCKRstoUTF8s(size_t *euckr_len, size_t *utf8_len)";
  } else if (fnid == 0x9a72059d) {
    return "int EUCKRtoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x58246762) {
    return "int EUCKRtoUHC(size_t *uhc_len)";
  } else if (fnid == 0x63219199) {
    return "int EUCKRtoUTF8(size_t *utf8_len)";
  } else if (fnid == 0x60ffa0ec) {
    return "void GB18030stoUCS2s(size_t *gb18030_len, size_t *ucs2_len)";
  } else if (fnid == 0xd02ef83d) {
    return "void GB18030stoUTF8s(size_t *gb18030_len, size_t *utf8_len)";
  } else if (fnid == 0xaf18d499) {
    return "int GB18030toUCS2(uint16_t *ucs2)";
  } else if (fnid == 0xeabc3d00) {
    return "int GB18030toUTF8(size_t *utf8_len)";
  } else if (fnid == 0x1cb1138f) {
    return "void GBKstoUCS2s(size_t *gbk_len, size_t *ucs2_len)";
  } else if (fnid == 0x949bb14c) {
    return "void GBKstoUTF8s(size_t *gbk_len, size_t *utf8_len)";
  } else if (fnid == 0x1fb50183) {
    return "int GBKtoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x860fc741) {
    return "int GBKtoUTF8(size_t *utf8_len)";
  } else if (fnid == 0x0bf867e2) {
    return "void HZstoUCS2s(size_t *hz_len, size_t *ucs2_len)";
  } else if (fnid == 0x42838145) {
    return "void HZstoUTF8s(size_t *hz_len, size_t *utf8_len)";
  } else if (fnid == 0xa609f3e9) {
    return "void JISstoEUCJPs(size_t *jis_len, size_t *eucjp_len)";
  } else if (fnid == 0x6169f205) {
    return "void JISstoSJISs(size_t *jis_len, size_t *sjis_len)";
  } else if (fnid == 0xe956dc64) {
    return "void JISstoUCS2s(size_t *jis_len, size_t *ucs2_len)";
  } else if (fnid == 0x060ee3b2) {
    return "void JISstoUTF8s(size_t *jis_len, size_t *utf8_len)";
  } else if (fnid == 0x01b0cbf4) {
    return "int l10n_convert(const void *src, void *dst, size_t *dst_len)";
  } else if (fnid == 0xa298cad2) {
    return "void l10n_convert_str(const void *src, size_t *src_len, void *dst, size_t *dst_len)";
  } else if (fnid == 0x1ac0d23d) {
    return "int L10nConvert(const void *src, void *dst, size_t *dst_len)";
  } else if (fnid == 0x931ff25a) {
    return "void L10nConvertStr(const void *src, size_t *src_len, void *dst, size_t *dst_len)";
  } else if (fnid == 0xc9b78f58) {
    return "void MSJISstoUCS2s(size_t *msjis_len, size_t *ucs2_len)";
  } else if (fnid == 0x5a4ab223) {
    return "void MSJISstoUTF8s(size_t *msjis_len, size_t *utf8_len)";
  } else if (fnid == 0xb6e45343) {
    return "int MSJIStoUCS2(const uint16_t msjis, uint16_t *ucs2)";
  } else if (fnid == 0x398a3dee) {
    return "int MSJIStoUTF8(const uint32_t msjis)";
  } else if (fnid == 0x9ce52809) {
    return "void SBCSstoUCS2s(size_t *sbcs_len, size_t *ucs2_len)";
  } else if (fnid == 0x72632e53) {
    return "void SBCSstoUTF8s(size_t *sbcs_len, size_t *utf8_len)";
  } else if (fnid == 0xc944fa56) {
    return "int SBCStoUCS2(const uint8_t sbcs, uint16_t *ucs2)";
  } else if (fnid == 0x74496718) {
    return "int SBCStoUTF8(const uint8_t sbcs)";
  } else if (fnid == 0xd8721e2c) {
    return "void SJISstoEUCJPs(size_t *sjis_len, size_t *eucjp_len)";
  } else if (fnid == 0x73f2cd21) {
    return "void SJISstoJISs(size_t *sjis_len, size_t *jis_len)";
  } else if (fnid == 0xf9b1896d) {
    return "void SJISstoUCS2s(size_t *sjis_len, size_t *ucs2_len)";
  } else if (fnid == 0x33435818) {
    return "void SJISstoUTF8s(size_t *sjis_len, size_t *utf8_len)";
  } else if (fnid == 0xf439728e) {
    return "int SJIStoEUCJP(size_t *eucjp_len)";
  } else if (fnid == 0xbdd44ee3) {
    return "int SJIStoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x6122e000) {
    return "int SJIStoUTF8(size_t *utf8_len)";
  } else if (fnid == 0xbe8d5485) {
    return "void UCS2stoARIBs(size_t *ucs2_len, size_t *arib_len)";
  } else if (fnid == 0xee6c6a39) {
    return "void UCS2stoBIG5s(size_t *ucs2_len, size_t *big5_len)";
  } else if (fnid == 0x71804d64) {
    return "void UCS2stoEUCCNs(size_t *ucs2_len, size_t *euccn_len)";
  } else if (fnid == 0x6e5906fd) {
    return "void UCS2stoEUCJPs(size_t *ucs2_len, size_t *eucjp_len)";
  } else if (fnid == 0xdc54886c) {
    return "void UCS2stoEUCKRs(size_t *ucs2_len, size_t *euckr_len)";
  } else if (fnid == 0x53764725) {
    return "void UCS2stoGB18030s(size_t *ucs2_len, size_t *gb18030_len)";
  } else if (fnid == 0x55f6921c) {
    return "void UCS2stoGBKs(size_t *ucs2_len, size_t *gbk_len)";
  } else if (fnid == 0x0ce278fd) {
    return "void UCS2stoHZs(size_t *ucs2_len, size_t *hz_len)";
  } else if (fnid == 0x88f8340b) {
    return "void UCS2stoJISs(size_t *ucs2_len, size_t *jis_len)";
  } else if (fnid == 0x3a20bc34) {
    return "void UCS2stoMSJISs(size_t *ucs2_len, size_t *msjis_len)";
  } else if (fnid == 0xebae29c0) {
    return "void UCS2stoSBCSs(size_t *ucs2_len, size_t *sbcs_len)";
  } else if (fnid == 0x0d90a48d) {
    return "void UCS2stoSJISs(size_t *ucs2_len, size_t *sjis_len)";
  } else if (fnid == 0xf1dcfa71) {
    return "void UCS2stoUHCs(size_t *ucs2_len, size_t *uhc_len)";
  } else if (fnid == 0x714a9b4a) {
    return "void UCS2stoUTF16s(size_t *ucs2_len, size_t *utf16_len)";
  } else if (fnid == 0xeb685b83) {
    return "void UCS2stoUTF32s(size_t *ucs2_len, size_t *utf32_len)";
  } else if (fnid == 0x2ad091c6) {
    return "void UCS2stoUTF8s(size_t *ucs2_len, size_t *utf8_len)";
  } else if (fnid == 0x5b684dfb) {
    return "int UCS2toBIG5(const uint16_t ucs2)";
  } else if (fnid == 0x9a0e7d23) {
    return "int UCS2toEUCCN(const uint16_t ucs2)";
  } else if (fnid == 0x005200e6) {
    return "int UCS2toEUCJP(const uint16_t ucs2)";
  } else if (fnid == 0xc7bdcb4c) {
    return "int UCS2toEUCKR(const uint16_t ucs2)";
  } else if (fnid == 0x0bedf77d) {
    return "int UCS2toGB18030(const uint16_t ucs2)";
  } else if (fnid == 0xa0d463c0) {
    return "int UCS2toGBK(const uint16_t ucs2)";
  } else if (fnid == 0x65444204) {
    return "int UCS2toMSJIS(const uint16_t ucs2, uint16_t *msjis)";
  } else if (fnid == 0x256b6861) {
    return "int UCS2toSBCS(const uint16_t ucs2, uint8_t *sbcs)";
  } else if (fnid == 0x596df41c) {
    return "int UCS2toSJIS(const uint16_t ucs2)";
  } else if (fnid == 0x6a6f25d1) {
    return "int UCS2toUHC(const uint16_t ucs2)";
  } else if (fnid == 0x64a10ec8) {
    return "int UCS2toUTF16(const uint16_t ucs2)";
  } else if (fnid == 0x0356038c) {
    return "int UCS2toUTF32(const uint16_t ucs2, uint32_t *utf32)";
  } else if (fnid == 0xa9a76fb8) {
    return "int UCS2toUTF8(const uint16_t ucs2)";
  } else if (fnid == 0x16eaf5f1) {
    return "void UHCstoEUCKRs(size_t *uhc_len, size_t *euckr_len)";
  } else if (fnid == 0x41b4a5ae) {
    return "void UHCstoUCS2s(size_t *uhc_len, size_t *ucs2_len)";
  } else if (fnid == 0x5e1d9330) {
    return "void UHCstoUTF8s(size_t *uhc_len, size_t *utf8_len)";
  } else if (fnid == 0x7c5bde1c) {
    return "int UHCtoEUCKR(size_t *euckr_len)";
  } else if (fnid == 0x91a99765) {
    return "int UHCtoUCS2(uint16_t *ucs2)";
  } else if (fnid == 0xb3361be6) {
    return "int UHCtoUTF8(size_t *utf8_len)";
  } else if (fnid == 0x53558b6b) {
    return "void UTF16stoUCS2s(size_t *utf16_len, size_t *ucs2_len)";
  } else if (fnid == 0x2efa7294) {
    return "void UTF16stoUTF32s(size_t *utf16_len, size_t *utf32_len)";
  } else if (fnid == 0xe6f5711b) {
    return "void UTF16stoUTF8s(size_t *utf16_len, size_t *utf8_len)";
  } else if (fnid == 0x6fc530b3) {
    return "int UTF16toUCS2(uint16_t *ucs2)";
  } else if (fnid == 0xa19fb9de) {
    return "int UTF16toUTF32(uint32_t *utf32)";
  } else if (fnid == 0x317ab7c2) {
    return "int UTF16toUTF8(size_t *utf8_len)";
  } else if (fnid == 0xd8cb24cb) {
    return "void UTF32stoUCS2s(size_t *utf32_len, size_t *ucs2_len)";
  } else if (fnid == 0x8555fe15) {
    return "void UTF32stoUTF16s(size_t *utf32_len, size_t *utf16_len)";
  } else if (fnid == 0x21aa3045) {
    return "void UTF32stoUTF8s(size_t *utf32_len, size_t *utf8_len)";
  } else if (fnid == 0x6c62d879) {
    return "int UTF32toUCS2(const uint32_t utf32, uint16_t *ucs2)";
  } else if (fnid == 0x9b1210c6) {
    return "int UTF32toUTF16(const uint32_t utf32)";
  } else if (fnid == 0x9768b6d3) {
    return "int UTF32toUTF8(const uint32_t utf32)";
  } else if (fnid == 0xa5146299) {
    return "void UTF8stoARIBs(size_t *utf8_len, size_t *arib_len)";
  } else if (fnid == 0x52b7883f) {
    return "void UTF8stoBIG5s(size_t *utf8_len, size_t *big5_len)";
  } else if (fnid == 0x8f472054) {
    return "void UTF8stoEUCCNs(size_t *utf8_len, size_t *euccn_len)";
  } else if (fnid == 0xc62b758d) {
    return "void UTF8stoEUCJPs(size_t *utf8_len, size_t *eucjp_len)";
  } else if (fnid == 0x5cd29270) {
    return "void UTF8stoEUCKRs(size_t *utf8_len, size_t *euckr_len)";
  } else if (fnid == 0x89236c86) {
    return "void UTF8stoGB18030s(size_t *utf8_len, size_t *gb18030_len)";
  } else if (fnid == 0x262a5ae2) {
    return "void UTF8stoGBKs(size_t *utf8_len, size_t *gbk_len)";
  } else if (fnid == 0xdefa1c17) {
    return "void UTF8stoHZs(size_t *utf8_len, size_t *hz_len)";
  } else if (fnid == 0x9cf1ab77) {
    return "void UTF8stoJISs(size_t *utf8_len, size_t *jis_len)";
  } else if (fnid == 0x62b36bcf) {
    return "void UTF8stoMSJISs(size_t *utf8_len, size_t *msjis_len)";
  } else if (fnid == 0xda67b37f) {
    return "void UTF8stoSBCSs(size_t *utf8_len, size_t *sbcs_len)";
  } else if (fnid == 0xdd5ebdeb) {
    return "void UTF8stoSJISs(size_t *utf8_len, size_t *sjis_len)";
  } else if (fnid == 0xfdbf6ac5) {
    return "void UTF8stoUCS2s(size_t *utf8_len, size_t *ucs2_len)";
  } else if (fnid == 0x9a13d6b8) {
    return "void UTF8stoUHCs(size_t *utf8_len, size_t *uhc_len)";
  } else if (fnid == 0xf7681b9a) {
    return "void UTF8stoUTF16s(size_t *utf8_len, size_t *utf16_len)";
  } else if (fnid == 0x8ccdba38) {
    return "void UTF8stoUTF32s(size_t *utf8_len, size_t *utf32_len)";
  } else if (fnid == 0xe6d9e234) {
    return "int UTF8toBIG5(size_t *big5_len)";
  } else if (fnid == 0x7d07a1c2) {
    return "int UTF8toEUCCN(size_t *euccn_len)";
  } else if (fnid == 0x6e0705c4) {
    return "int UTF8toEUCJP(size_t *eucjp_len)";
  } else if (fnid == 0x2f9eb543) {
    return "int UTF8toEUCKR(size_t *euckr_len)";
  } else if (fnid == 0x058addc8) {
    return "int UTF8toGB18030(size_t *gb18030_len)";
  } else if (fnid == 0xb7cef4a6) {
    return "int UTF8toGBK(size_t *gbk_len)";
  } else if (fnid == 0x4931b44e) {
    return "int UTF8toMSJIS(uint16_t *msjis)";
  } else if (fnid == 0xb9cf473d) {
    return "int UTF8toSBCS(uint8_t *sbcs)";
  } else if (fnid == 0xeb3dc670) {
    return "int UTF8toSJIS(size_t *sjis_len)";
  } else if (fnid == 0x28724522) {
    return "int UTF8toUCS2(uint16_t *ucs2)";
  } else if (fnid == 0x9557ac9b) {
    return "int UTF8toUHC(size_t *uhc_len)";
  } else if (fnid == 0x61fb9442) {
    return "int UTF8toUTF16(size_t *utf16_len)";
  } else if (fnid == 0x74871fe0) {
    return "int UTF8toUTF32(uint32_t *utf32)";
  } else if (fnid == 0x8d229f8e) {
    return "int cellMicClose(int dev_num)";
  } else if (fnid == 0xc6328caa) {
    return "int cellMicEnd(void)";
  } else if (fnid == 0x6a024aa0) {
    return "int cellMicGetDeviceAttr(int dev_num, CellMicDeviceAttr dev_attrib, int *arg1, int *arg2)";
  } else if (fnid == 0x017024a8) {
    return "int cellMicGetDeviceGUID(int dev_num, uint32_t* ptr_guid)";
  } else if (fnid == 0xfda12276) {
    return "int cellMicGetFormatAux(int dev_num, CellMicInputFormatI* format)";
  } else if (fnid == 0x87a08d29) {
    return "int cellMicGetFormatDsp(int dev_num, CellMicInputFormatI* format)";
  } else if (fnid == 0x4e0b69ee) {
    return "int cellMicGetFormatRaw(int dev_num, CellMicInputFormatI* format)";
  } else if (fnid == 0xac5ba03a) {
    return "int cellMicGetSignalAttr(int dev_num, CellMicSignalAttr sig_attrib, void* value)";
  } else if (fnid == 0xb30780eb) {
    return "int cellMicGetSignalState(int dev_num, CellMicSignalState sig_state, void* value)";
  } else if (fnid == 0xa52d2ae4) {
    return "int cellMicGetType(int dev_num, int* ptr_type)";
  } else if (fnid == 0x8325e02d) {
    return "int cellMicInit(void)";
  } else if (fnid == 0x1b42101b) {
    return "int cellMicIsAttached(int dev_num)";
  } else if (fnid == 0xdd1b59f0) {
    return "int cellMicOpen(int dev_num, int samprate)";
  } else if (fnid == 0x05709bbf) {
    return "int cellMicOpenEx(int dev_num, int raw_samprate, int raw_channel, int dsp_samprate, int bufms, CellMicSignalType sigtype)";
  } else if (fnid == 0xa42ac07a) {
    return "int cellMicOpenRaw(int dev_num, int samprate, int channel)";
  } else if (fnid == 0x07e1b12c) {
    return "int cellMicRead(int dev_num, void* data, int max_bytes)";
  } else if (fnid == 0x3acc118e) {
    return "int cellMicReadAux(int dev_num, void* data, int max_bytes)";
  } else if (fnid == 0xc414faa5) {
    return "int cellMicReadDsp(int dev_num, void* data, int max_bytes)";
  } else if (fnid == 0x72165a7f) {
    return "int cellMicReadRaw(int dev_num, void* data, int max_bytes)";
  } else if (fnid == 0x65336418) {
    return "int cellMicRemoveNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0x6bc46aab) {
    return "int cellMicReset(int dev_num)";
  } else if (fnid == 0xb2c16321) {
    return "int cellMicSetDeviceAttr(int dev_num, CellMicDeviceAttr dev_attrib, int arg1, int arg2)";
  } else if (fnid == 0x7903400e) {
    return "int cellMicSetNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0x6cc7ae00) {
    return "int cellMicSetNotifyEventQueue2(sys_ipc_key_t key, uint64_t source, uint64_t flag)";
  } else if (fnid == 0x323deb41) {
    return "int cellMicSetSignalAttr(int dev_num, CellMicSignalAttr sig_attrib, void* value)";
  } else if (fnid == 0xdd724314) {
    return "int cellMicStart(int dev_num)";
  } else if (fnid == 0xddd19a89) {
    return "int cellMicStartEx(int dev_num, uint32_t iFlags)";
  } else if (fnid == 0xfcfaf246) {
    return "int cellMicStop(int dev_num)";
  } else if (fnid == 0xa8615dc8) {
    return "int cellMusicDecodeFinalize(void)";
  } else if (fnid == 0x4aef2877) {
    return "int cellMusicDecodeFinalize2(void)";
  } else if (fnid == 0x58ab1999) {
    return "int cellMusicDecodeGetContentsId(CellSearchContentId *contents_id)";
  } else if (fnid == 0x25ea7ac0) {
    return "int cellMusicDecodeGetContentsId2(CellSearchContentId *contents_id)";
  } else if (fnid == 0x5af74c50) {
    return "int cellMusicDecodeGetDecodeStatus(int *status)";
  } else if (fnid == 0x1576e4f2) {
    return "int cellMusicDecodeGetDecodeStatus2(int *status)";
  } else if (fnid == 0xdbf70550) {
    return "int cellMusicDecodeGetSelectionContext(CellMusicSelectionContext *context)";
  } else if (fnid == 0xf91639f9) {
    return "int cellMusicDecodeGetSelectionContext2(CellMusicSelectionContext *context)";
  } else if (fnid == 0xd55dbc11) {
    return "int cellMusicDecodeInitialize(int mode, sys_memory_container_t container, int spuPriority, void *userData)";
  } else if (fnid == 0xf80e31e5) {
    return "int cellMusicDecodeInitialize2(int mode, sys_memory_container_t container, int spuPriority, void *userData, int speed, int bufSize)";
  } else if (fnid == 0xb641168e) {
    return "int cellMusicDecodeInitialize2SystemWorkload(int mode, sys_memory_container_t container, void *userData, int spuUsageRate, int bufSize, CellSpurs *spurs, const CellSpursSystemWorkloadAttribute *attr)";
  } else if (fnid == 0x84f154b2) {
    return "int cellMusicDecodeInitializeSystemWorkload(int mode, sys_memory_container_t container, void *userData, int spuUsageRate, CellSpurs *spurs, const CellSpursSystemWorkloadAttribute* attr)";
  } else if (fnid == 0xa881b744) {
    return "int cellMusicDecodeRead(void *buf, uint32_t *startTime, uint64_t reqSize, uint64_t *readSize, int *position)";
  } else if (fnid == 0xb2d054df) {
    return "int cellMusicDecodeRead2(void *buf, uint32_t *startTime, uint64_t reqSize, uint64_t *readSize, int *position)";
  } else if (fnid == 0xf24cb963) {
    return "int cellMusicDecodeSelectContents(void)";
  } else if (fnid == 0xc22563c4) {
    return "int cellMusicDecodeSelectContents2(void)";
  } else if (fnid == 0x066bb1cf) {
    return "int cellMusicDecodeSetDecodeCommand(int command)";
  } else if (fnid == 0x2ef701ec) {
    return "int cellMusicDecodeSetDecodeCommand2(int command)";
  } else if (fnid == 0xb84f5c81) {
    return "int cellMusicDecodeSetSelectionContext(CellMusicSelectionContext *context)";
  } else if (fnid == 0x491d6ba5) {
    return "int cellMusicDecodeSetSelectionContext2(CellMusicSelectionContext *context)";
  } else if (fnid == 0xe90effea) {
    return "int cellMusicExportFinalize(void *userdata)";
  } else if (fnid == 0xb202f0e8) {
    return "void cellMusicExportFromFile(const char *srcHddDir, const char *srcHddFile, CellMusicExportSetParam *param, void *userdata)";
  } else if (fnid == 0xb4c9b4f9) {
    return "int cellMusicExportInitialize(unsigned int version, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xe0443a44) {
    return "int cellMusicExportInitialize2(unsigned int version, void *userdata)";
  } else if (fnid == 0x92b50ebc) {
    return "int cellMusicExportProgress(void *userdata)";
  } else if (fnid == 0x6f2104f3) {
    return "int cellMusicFinalize(void)";
  } else if (fnid == 0x7be4dc31) {
    return "int cellMusicFinalize2(void)";
  } else if (fnid == 0x4c188caa) {
    return "void cellMusicGetContentsId(CellSearchContentId *contents_id)";
  } else if (fnid == 0x6674de2d) {
    return "void cellMusicGetContentsId2(CellSearchContentId *contents_id)";
  } else if (fnid == 0x95f7d9d9) {
    return "void cellMusicGetPlaybackStatus(int *status)";
  } else if (fnid == 0x648b7611) {
    return "void cellMusicGetPlaybackStatus2(int *status)";
  } else if (fnid == 0x0b461648) {
    return "void cellMusicGetSelectionContext(CellMusicSelectionContext *context)";
  } else if (fnid == 0x8793ef97) {
    return "void cellMusicGetSelectionContext2(CellMusicSelectionContext *context)";
  } else if (fnid == 0x8aa188e3) {
    return "void cellMusicGetVolume(float *level)";
  } else if (fnid == 0xf9073a24) {
    return "void cellMusicGetVolume2(float *level)";
  } else if (fnid == 0x72ec14b5) {
    return "int cellMusicInitialize(int mode, sys_memory_container_t container, int spuPriority, void *userData)";
  } else if (fnid == 0xbe50b11e) {
    return "int cellMusicInitialize2(int mode, int spuPriority, void *userData)";
  } else if (fnid == 0x61865281) {
    return "int cellMusicInitialize2SystemWorkload(int mode, void *userData, CellSpurs *spurs, const CellSpursSystemWorkloadAttribute *attr)";
  } else if (fnid == 0x72876546) {
    return "int cellMusicInitializeSystemWorkload(int mode, sys_memory_container_t container, void *userData, CellSpurs *spurs, const CellSpursSystemWorkloadAttribute *attr)";
  } else if (fnid == 0xb2336ba7) {
    return "void cellMusicSelectContents(sys_memory_container_t container)";
  } else if (fnid == 0xad04cddd) {
    return "void cellMusicSelectContents2(void)";
  } else if (fnid == 0xa0661626) {
    return "void cellMusicSetPlaybackCommand(int command, void *param)";
  } else if (fnid == 0x98947a6e) {
    return "void cellMusicSetPlaybackCommand2(int command, void *param)";
  } else if (fnid == 0x5bff31bf) {
    return "void cellMusicSetSelectionContext(CellMusicSelectionContext *context)";
  } else if (fnid == 0x2bdc5d6b) {
    return "void cellMusicSetSelectionContext2(CellMusicSelectionContext *context)";
  } else if (fnid == 0xe74ce7bd) {
    return "int cellMusicSetVolume(float level)";
  } else if (fnid == 0x4014c246) {
    return "int cellMusicSetVolume2(float level)";
  } else if (fnid == 0x3e359ab6) {
    return "int cellGameUpdateCheckAbort(void)";
  } else if (fnid == 0xffa3d791) {
    return "int cellGameUpdateCheckFinishAsync(void *userdata)";
  } else if (fnid == 0xf463981c) {
    return "int cellGameUpdateCheckFinishAsyncEx(void *userdata)";
  } else if (fnid == 0xd0a5d727) {
    return "int cellGameUpdateCheckStartAsync(const CellGameUpdateParam *param, void *userdata)";
  } else if (fnid == 0x0791015f) {
    return "int cellGameUpdateCheckStartAsyncEx(const CellGameUpdateParam *param, void *userdata)";
  } else if (fnid == 0xa5e1fa60) {
    return "int cellGameUpdateCheckStartWithoutDialogAsync(void *userdata)";
  } else if (fnid == 0x558700f6) {
    return "int cellGameUpdateCheckStartWithoutDialogAsyncEx(void *userdata)";
  } else if (fnid == 0x99ab1a26) {
    return "int cellGameUpdateInit(void)";
  } else if (fnid == 0x10dae56d) {
    return "int cellGameUpdateTerm(void)";
  } else if (fnid == 0x0ce13c6b) {
    return "int cellNetCtlAddHandler(void *arg, int *hid)";
  } else if (fnid == 0x901815c3) {
    return "int cellNetCtlDelHandler(int hid)";
  } else if (fnid == 0x1e585b5d) {
    return "int cellNetCtlGetInfo(int code, union CellNetCtlInfo *info)";
  } else if (fnid == 0x3a12865f) {
    return "int cellNetCtlGetNatInfo(struct CellNetCtlNatInfo *natinfo)";
  } else if (fnid == 0x8b3eba69) {
    return "int cellNetCtlGetState(int *state)";
  } else if (fnid == 0xbd5a59fc) {
    return "int cellNetCtlInit(void)";
  } else if (fnid == 0x71d53210) {
    return "int cellNetCtlNetStartDialogAbortAsync(void)";
  } else if (fnid == 0x04459230) {
    return "int cellNetCtlNetStartDialogLoadAsync(const struct CellNetCtlNetStartDialogParam *param)";
  } else if (fnid == 0x0f1f13d3) {
    return "int cellNetCtlNetStartDialogUnloadAsync(struct CellNetCtlNetStartDialogResult *result)";
  } else if (fnid == 0x105ee2cb) {
    return "void cellNetCtlTerm(void)";
  } else if (fnid == 0x23a2ede6) {
    return "int cellOskDialogExtAddJapaneseOptionDictionary(const char **filePath)";
  } else if (fnid == 0x4fe14d09) {
    return "int cellOskDialogExtAddOptionDictionary(const CellOskDialogImeDictionaryInfo *dictionaryInfo)";
  } else if (fnid == 0xe6c43c58) {
    return "int cellOskDialogExtEnableHalfByteKana(void)";
  } else if (fnid == 0x7c95feb8) {
    return "void cellOskDialogExtInputDeviceLock(void )";
  } else if (fnid == 0x09565b21) {
    return "void cellOskDialogExtInputDeviceUnlock(void )";
  } else if (fnid == 0x1e1b4c97) {
    return "void cellOskDialogExtRegisterKeyboardEventHookCallback(uint16_t hookEventMode)";
  } else if (fnid == 0x7eb292cd) {
    return "void cellOskDialogExtSetBaseColor(float red, float green, float blue, float alpha)";
  } else if (fnid == 0x75370397) {
    return "void cellOskDialogExtSetInitialScale(float initialScale)";
  } else if (fnid == 0x8b60c469) {
    return "void cellOskDialogExtUpdateInputText(void )";
  } else if (fnid == 0xce6cb776) {
    return "void cellOvisFixSpuSegments(sys_spu_image_t *image&nbsp)";
  } else if (fnid == 0x82f294b2) {
    return "int cellOvisGetOverlayTableSize(const char *elf&nbsp)";
  } else if (fnid == 0xa876c911) {
    return "int cellOvisInitializeOverlayTable(const char *elf&nbsp)";
  } else if (fnid == 0x629ba0c0) {
    return "void cellOvisInvalidateOverlappedSegments(int *nsegs&nbsp)";
  } else if (fnid == 0x1abeb9d6) {
    return "int cellPamfEpIteratorGetEp(CellPamfEpIterator *pIt, CellPamfEp *pEp)";
  } else if (fnid == 0x50b83205) {
    return "int cellPamfEpIteratorMove(CellPamfEpIterator *pIt, int steps, CellPamfEp *pEp)";
  } else if (fnid == 0x90fc9a59) {
    return "int cellPamfGetHeaderSize2(const uint8_t *pAddr, uint64_t fileSize, uint32_t attribute, uint64_t *pSize)";
  } else if (fnid == 0x44f5c9e3) {
    return "int cellPamfGetStreamOffsetAndSize(const uint8_t *pAddr, uint64_t fileSize, uint64_t *pOffset, uint64_t *pSize)";
  } else if (fnid == 0xe8586ec6) {
    return "int cellPamfReaderGetEpIteratorWithIndex(CellPamfReader *pSelf, uint32_t epIndex, CellPamfEpIterator *pIt)";
  } else if (fnid == 0x439fba17) {
    return "int cellPamfReaderGetEpIteratorWithTimeStamp(CellPamfReader *pSelf, CellCodecTimeStamp *pTimeStamp, CellPamfEpIterator *pIt)";
  } else if (fnid == 0x71df326a) {
    return "int cellPamfReaderGetEsFilterId(CellPamfReader *pSelf)";
  } else if (fnid == 0xdb70296c) {
    return "uint32_t cellPamfReaderGetMuxRateBound(CellPamfReader* pSelf)";
  } else if (fnid == 0xd0230671) {
    return "uint8_t cellPamfReaderGetNumberOfSpecificStreams(uint8_t streamType)";
  } else if (fnid == 0x37f723f7) {
    return "uint8_t cellPamfReaderGetNumberOfStreams(CellPamfReader* pSelf)";
  } else if (fnid == 0xf61609d6) {
    return "int cellPamfReaderGetPresentationEndTime(CellPamfReader *pSelf, CellCodecTimeStamp *pTimeStamp)";
  } else if (fnid == 0x4de501b1) {
    return "int cellPamfReaderGetPresentationStartTime(CellPamfReader *pSelf, CellCodecTimeStamp *pTimeStamp)";
  } else if (fnid == 0x041cc708) {
    return "int cellPamfReaderGetStreamIndex(CellPamfReader *pSelf)";
  } else if (fnid == 0x67fd273b) {
    return "int cellPamfReaderGetStreamInfo(CellPamfReader *pSelf, void *pInfo, size_t size)";
  } else if (fnid == 0x9ab20793) {
    return "int cellPamfReaderGetStreamTypeAndChannel(CellPamfReader *pSelf, uint8_t *pType, uint8_t *pCh)";
  } else if (fnid == 0xb8436ee5) {
    return "int cellPamfReaderInitialize(CellPamfReader *pSelf, const uint8_t *pAddr, uint64_t fileSize, uint32_t attribute)";
  } else if (fnid == 0x461534b4) {
    return "int cellPamfReaderSetStreamWithIndex(CellPamfReader *pSelf, uint8_t streamIndex)";
  } else if (fnid == 0x03fd2caa) {
    return "int cellPamfReaderSetStreamWithTypeAndChannel(CellPamfReader *pSelf, uint8_t streamType, uint8_t ch)";
  } else if (fnid == 0x28b4e2c1) {
    return "int cellPamfReaderSetStreamWithTypeAndIndex(CellPamfReader *pSelf, uint8_t streamType, uint8_t streamIndex)";
  } else if (fnid == 0x01067e22) {
    return "int cellPamfStreamTypeToEsFilterId(uint8_t type, uint8_t ch, CellCodecEsFilterId *pEsFilterId)";
  } else if (fnid == 0xd1a40ef4) {
    return "int cellPamfVerify(const uint8_t *pAddr, uint64_t fileSize)";
  } else if (fnid == 0xad7d8f38) {
    return "int cellPhotoDecodeFinalize(void *userdata)";
  } else if (fnid == 0x28b22e44) {
    return "int cellPhotoDecodeFromFile(const char *srcHddDir, const char *srcHddFile, CellPhotoDecodeSetParam *set_param, CellPhotoDecodeReturnParam *return_param)";
  } else if (fnid == 0x596f0a56) {
    return "int cellPhotoDecodeInitialize(unsigned int version, sys_memory_container_t container1, sys_memory_container_t container2, void *userdata)";
  } else if (fnid == 0x0f424ecb) {
    return "int cellPhotoDecodeInitialize2(unsigned int version, sys_memory_container_t container2, void *userdata)";
  } else if (fnid == 0x0783bce0) {
    return "int cellPhotoImport(unsigned int version, CellPhotoImportSetParam *param, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x1ab8df55) {
    return "int cellPhotoImport2(unsigned int version, CellPhotoImportSetParam *param, void *userdata)";
  } else if (fnid == 0xed4a0148) {
    return "int cellPhotoExportFinalize(void *userdata)";
  } else if (fnid == 0x09ce84ac) {
    return "int cellPhotoExportFromFile(const char *srcHddDir, const char *srcHddFile, CellPhotoExportSetParam *param, void *userdata)";
  } else if (fnid == 0x4357c77f) {
    return "int cellPhotoExportInitialize(unsigned int version, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x08cbd8e1) {
    return "int cellPhotoExportInitialize2(unsigned int version, void *userdata)";
  } else if (fnid == 0xde509ead) {
    return "int cellPhotoExportProgress(void *userdata)";
  } else if (fnid == 0x157d30c5) {
    return "int32_t cellPngDecCreate(CellPngDecMainHandle *mainHandle, const CellPngDecThreadInParam *threadInParam, CellPngDecThreadOutParam *threadOutParam)";
  } else if (fnid == 0x2310f155) {
    return "int32_t cellPngDecDecodeData(uint8_t *data)";
  } else if (fnid == 0x48436b2d) {
    return "int32_t cellPngDecExtCreate( *extThreadOutParam)";
  } else if (fnid == 0x726fc1d0) {
    return "int32_t cellPngDecExtDecodeData(uint8_t *data)";
  } else if (fnid == 0xb40ca175) {
    return "int32_t cellPngDecGetTextChunk(uint32_t *textInfoNum)";
  } else if (fnid == 0x609ec7d5) {
    return "int32_t cellPngDecGetUnknownChunks(uint32_t *unknownChunkNumber)";
  } else if (fnid == 0x5b546ca4) {
    return "int32_t cellPngEncEncodePicture(const CellPngEncPicture *picture, const CellPngEncEncodeParam *encodeParam, const CellPngEncOutputParam *outputParam)";
  } else if (fnid == 0x585269bc) {
    return "int32_t cellPngEncGetStreamInfo(CellPngEncStreamInfo *streamInfo)";
  } else if (fnid == 0x19256dc5) {
    return "int32_t cellPngEncOpen(const CellPngEncConfig *config, const CellPngEncResource *resource, CellPngEncHandle *handle)";
  } else if (fnid == 0xc82558ce) {
    return "int32_t cellPngEncOpenEx(const CellPngEncConfig *config, const CellPngEncResourceEx *resourceEx, CellPngEncHandle *handle)";
  } else if (fnid == 0x496cfcd0) {
    return "int32_t cellPngEncQueryAttr(const CellPngEncConfig *config, CellPngEncAttr *attr)";
  } else if (fnid == 0x662bd637) {
    return "int32_t cellPngEncWaitForInput(bool block)";
  } else if (fnid == 0x90ef2963) {
    return "int32_t cellPngEncWaitForOutput(uint32_t *streamInfoNum, bool block)";
  } else if (fnid == 0x293d9e9c) {
    return "int cellPrintCancelJob(void)";
  } else if (fnid == 0xc04a7d42) {
    return "int cellPrintEndJob(void)";
  } else if (fnid == 0x0d44f661) {
    return "int cellPrintEndPage(void)";
  } else if (fnid == 0x6e952645) {
    return "int cellPrintGetPrintableArea(int *pixelWidth, int *pixelHeight)";
  } else if (fnid == 0x6802dfb5) {
    return "int cellPrintGetStatus(CellPrintStatus *status)";
  } else if (fnid == 0xc9c3ef14) {
    return "int cellPrintLoadAsync(const CellPrintLoadParam *param, sys_memory_container_t container)";
  } else if (fnid == 0xf0865182) {
    return "int cellPrintLoadAsync2(const CellPrintLoadParam *param)";
  } else if (fnid == 0xf9a53f35) {
    return "int cellPrintOpenConfig(void *userdata)";
  } else if (fnid == 0x0a373522) {
    return "int cellPrintSendBand(const unsigned char *buff, int buffsize, int *sendsize)";
  } else if (fnid == 0x795b12b3) {
    return "int cellPrintStartJob(int totalPage, int colorFormat)";
  } else if (fnid == 0x865acf74) {
    return "int cellPrintStartPage(void)";
  } else if (fnid == 0xeb51aa38) {
    return "int cellPrintUnloadAsync(void *userdata)";
  } else if (fnid == 0x4ac76585) {
    return "int cellRecClose(int isDiscard)";
  } else if (fnid == 0x5a8a8b0f) {
    return "void cellRecGetInfo(int info, uint64_t *pValue)";
  } else if (fnid == 0x39651e01) {
    return "int cellRecOpen(const char *pDirName, const char *pFileName, const CellRecParam *pParam, sys_memory_container_t container, void *cbUserData&nbsp)";
  } else if (fnid == 0xdbf22bd1) {
    return "size_t cellRecQueryMemSize(const CellRecParam *pParam)";
  } else if (fnid == 0xf0958f73) {
    return "int32_t cellRecSetInfo(int setInfo, uint64_t value)";
  } else if (fnid == 0x964cd1b8) {
    return "int cellRecStart(void )";
  } else if (fnid == 0x5b45439d) {
    return "int cellRecStop(void )";
  } else if (fnid == 0xfb793f27) {
    return "int32_t cellRemotePlayBreak(void)";
  } else if (fnid == 0xe12c8c19) {
    return "int32_t cellRemotePlayGetComparativeVolume(float *pComparativeAudioVolume)";
  } else if (fnid == 0x533f41df) {
    return "int32_t cellRemotePlayGetStatus(void)";
  } else if (fnid == 0x743918bd) {
    return "int32_t cellRemotePlaySetComparativeVolume(float comparativeAudioVolume)";
  } else if (fnid == 0x22ae06d8) {
    return "void cellRescAdjustAspectRatio(const float horizontal, const float vertical)";
  } else if (fnid == 0xe0cef79e) {
    return "void cellRescCreateInterlaceTable(const int length)";
  } else if (fnid == 0x01220224) {
    return "int32_t cellRescGcmSurface2RescSrc(CellRescSrc* const rescSrc)";
  } else if (fnid == 0x5a338cdb) {
    return "void cellRescGetBufferSize(int32_t* const fragmentShader)";
  } else if (fnid == 0xc47c5c22) {
    return "uint32_t cellRescGetFlipStatus(void)";
  } else if (fnid == 0x66f5e388) {
    return "void cellRescGetLastFlipTime(void)";
  } else if (fnid == 0x0a2069c7) {
    return "void cellRescGetNumColorBuffers(const CellRescBufferMode dstMode, const CellRescPalTemporalMode palTemporalMode, const int32_t reserved)";
  } else if (fnid == 0x1dd3c4cd) {
    return "void cellRescGetRegisterCount(void)";
  } else if (fnid == 0x516ee89e) {
    return "void cellRescInit(const CellRescInitConfig* const initConfig)";
  } else if (fnid == 0x129922a0) {
    return "void cellRescResetFlipStatus(void)";
  } else if (fnid == 0x8107277c) {
    return "void cellRescSetBufferAddress(const void* const fragmentShader)";
  } else if (fnid == 0x25c107e6) {
    return "int32_t cellRescSetConvertAndFlip(CellGcmContextData *con, const int32_t idx)";
  } else if (fnid == 0x23134710) {
    return "void cellRescSetDisplayMode(const CellRescBufferMode bufferMode)";
  } else if (fnid == 0x10db5b1a) {
    return "void cellRescSetDsts(const CellRescBufferMode bufferMode, const CellRescDsts* const dsts)";
  } else if (fnid == 0x2ea94661) {
    return "void cellRescSetFlipHandler(const CellRescHandler handler)";
  } else if (fnid == 0x19a2a967) {
    return "void cellRescSetPalInterpolateDropFlexRatio(const float ratio)";
  } else if (fnid == 0x7af8a37f) {
    return "void cellRescSetRegisterCount(const int32_t regCount)";
  } else if (fnid == 0x6cd0f95f) {
    return "void cellRescSetSrc(const CellRescSrc* const src)";
  } else if (fnid == 0xd3758645) {
    return "void cellRescSetVBlankHandler(const CellRescHandler handler)";
  } else if (fnid == 0x0d3c22ce) {
    return "void cellRescSetWaitFlip(CellGcmContextData *con)";
  } else if (fnid == 0xd1ca0503) {
    return "int32_t cellRescVideoOutResolutionId2RescBufferMode(CellRescBufferMode* const bufferMode)";
  } else if (fnid == 0x7f1086e6) {
    return "int cellRtcCheckValid(const CellRtcDateTime *pTime)";
  } else if (fnid == 0x46ca7fe0) {
    return "int cellRtcConvertLocalTimeToUtc(const CellRtcTick *pLocalTime, CellRtcTick *pUtc)";
  } else if (fnid == 0xc48d5002) {
    return "int cellRtcConvertUtcToLocalTime(const CellRtcTick *pUtc, CellRtcTick *pLocalTime)";
  } else if (fnid == 0x5491b9d5) {
    return "int cellRtcFormatRfc2822(char *pszDateTime, const CellRtcTick *pUtc, int iTimeZone)";
  } else if (fnid == 0xa07c3d2f) {
    return "int cellRtcFormatRfc2822LocalTime(char *pszDateTime, const CellRtcTick *pUtc)";
  } else if (fnid == 0xd9c0b463) {
    return "int cellRtcFormatRfc3339(char *pszDateTime, const CellRtcTick *pUtc, int iTimeZone)";
  } else if (fnid == 0x1324948a) {
    return "int cellRtcFormatRfc3339LocalTime(char *pszDateTime, const CellRtcTick *pUtc)";
  } else if (fnid == 0x32c941cf) {
    return "int cellRtcGetCurrentClock(CellRtcDateTime *pClock, int iTimeZone)";
  } else if (fnid == 0x2cce9cf5) {
    return "int cellRtcGetCurrentClockLocalTime(CellRtcDateTime *pClock)";
  } else if (fnid == 0x9dafc0d9) {
    return "int cellRtcGetCurrentTick(CellRtcTick *pTick)";
  } else if (fnid == 0xc2d8cf95) {
    return "int cellRtcGetDayOfWeek(int year, int month, int day)";
  } else if (fnid == 0x5b6a0a1d) {
    return "int cellRtcGetDaysInMonth(int year, int month)";
  } else if (fnid == 0xdfff32cf) {
    return "int cellRtcGetDosTime(const CellRtcDateTime *pDateTime, unsigned int *puiDosTime)";
  } else if (fnid == 0xc7bdb7eb) {
    return "int cellRtcGetTick(const CellRtcDateTime *pTime, CellRtcTick *pTick)";
  } else if (fnid == 0xcb90c761) {
    return "int cellRtcGetTime_t(const CellRtcDateTime *pDateTime, time_t *piTime)";
  } else if (fnid == 0xe7086f05) {
    return "int cellRtcGetWin32FileTime(const CellRtcDateTime *pDateTime, uint64_t *pulWin32FileTime)";
  } else if (fnid == 0x5316b4a8) {
    return "int cellRtcIsLeapYear(int year)";
  } else if (fnid == 0xc5bc0fac) {
    return "int cellRtcParseDateTime(CellRtcTick *pUtc, const char *pszDateTime)";
  } else if (fnid == 0xcf11c3d6) {
    return "int cellRtcParseRfc3339(CellRtcTick *pUtc, const char *pszDateTime)";
  } else if (fnid == 0x9598d4b3) {
    return "int cellRtcSetDosTime(CellRtcDateTime *pDateTime, unsigned int uiDosTime)";
  } else if (fnid == 0x99b13034) {
    return "int cellRtcSetTick(CellRtcDateTime *pTime, const CellRtcTick *pTick)";
  } else if (fnid == 0xbb543189) {
    return "int cellRtcSetTime_t(CellRtcDateTime *pDateTime, time_t iTime)";
  } else if (fnid == 0x5f68c268) {
    return "int cellRtcSetWin32FileTime(uint64_t ulWin32FileTime)";
  } else if (fnid == 0x75744e2a) {
    return "int cellRtcTickAddDays(CellRtcTick *pTick0, const CellRtcTick *pTick1, int iAdd)";
  } else if (fnid == 0xd41d3bd2) {
    return "int cellRtcTickAddHours(CellRtcTick *pTick0, const CellRtcTick *pTick1, int iAdd)";
  } else if (fnid == 0xf8509925) {
    return "int cellRtcTickAddMicroseconds(CellRtcTick *pTick0, const CellRtcTick *pTick1, int64_t lAdd)";
  } else if (fnid == 0x2f010bfa) {
    return "int cellRtcTickAddMinutes(CellRtcTick *pTick0, const CellRtcTick *pTick1, int64_t lAdd)";
  } else if (fnid == 0xe0ecbb45) {
    return "int cellRtcTickAddMonths(CellRtcTick *pTick0, const CellRtcTick *pTick1, int iAdd)";
  } else if (fnid == 0xccce71bd) {
    return "int cellRtcTickAddSeconds(CellRtcTick *pTick0, const CellRtcTick *pTick1, int64_t lAdd)";
  } else if (fnid == 0x269a1882) {
    return "int cellRtcTickAddTicks(CellRtcTick *pTick0, const CellRtcTick *pTick1, int64_t lAdd)";
  } else if (fnid == 0x64c63fd5) {
    return "int cellRtcTickAddWeeks(CellRtcTick *pTick0, const CellRtcTick *pTick1, int iAdd)";
  } else if (fnid == 0x332a74dd) {
    return "int cellRtcTickAddYears(CellRtcTick *pTick0, const CellRtcTick *pTick1, int iAdd)";
  } else if (fnid == 0xc1ad7ced) {
    return "int cellRudpActivate(int ctx_id, struct sockaddr const *to, socklen_t tolen)";
  } else if (fnid == 0xee41e16a) {
    return "int cellRudpBind(int ctx_id, int soc, uint16_t vport, uint8_t mux_mode)";
  } else if (fnid == 0x7dadc739) {
    return "int cellRudpCreateContext(void *arg, int *ctx_id)";
  } else if (fnid == 0x6c0cff03) {
    return "int cellRudpEnableInternalIOThread(uint32_t stackSize, uint32_t priority)";
  } else if (fnid == 0xb6bcb4a1) {
    return "int cellRudpEnd(void)";
  } else if (fnid == 0xa70737da) {
    return "int cellRudpFlush(int ctx_id)";
  } else if (fnid == 0x74bfad12) {
    return "int cellRudpGetContextStatus(int ctx_id, CellRudpContextStatus *status, size_t statusSize)";
  } else if (fnid == 0xd666931f) {
    return "int cellRudpGetLocalInfo(int ctx_id, int *soc, struct sockaddr *addr, socklen_t addrlen, uint16_t *vport, uint8_t *mux_mode)";
  } else if (fnid == 0xfbf7e9e4) {
    return "int cellRudpGetMaxSegmentSize(uint16_t *mss)";
  } else if (fnid == 0xff9d259c) {
    return "int cellRudpGetOption(int ctx_id, int option, void *optval, size_t optlen)";
  } else if (fnid == 0x576831ae) {
    return "int cellRudpGetRemoteInfo(int ctx_id, struct sockaddr *addr, socklen_t addrlen, uint16_t *vport)";
  } else if (fnid == 0x2cde989f) {
    return "ssize_t cellRudpGetSizeReadable(int ctx_id)";
  } else if (fnid == 0xa86b28e3) {
    return "ssize_t cellRudpGetSizeWritable(int ctx_id)";
  } else if (fnid == 0xcd1a3f23) {
    return "int cellRudpGetStatus(CellRudpStatus *status, size_t statusSize)";
  } else if (fnid == 0x63f63545) {
    return "int cellRudpInit(CellRudpAllocator *allocator)";
  } else if (fnid == 0xc407844f) {
    return "int cellRudpInitiate(int ctx_id, struct sockaddr const *to, socklen_t tolen, uint16_t vport)";
  } else if (fnid == 0x6ee04954) {
    return "int cellRudpNetReceived(int soc, uint8_t const *data, size_t datalen, struct sockaddr const *from, socklen_t fromlen)";
  } else if (fnid == 0xa3db855c) {
    return "int cellRudpPollControl(int poll_id, int op, int ctx_id, uint16_t events)";
  } else if (fnid == 0x6bc587e9) {
    return "int cellRudpPollCreate(size_t size)";
  } else if (fnid == 0x8ac398f1) {
    return "int cellRudpPollDestroy(int poll_id)";
  } else if (fnid == 0xd8310700) {
    return "int cellRudpPollWait(int poll_id, CellRudpPollEvent *events, size_t eventlen, CellRudpUsec timeout)";
  } else if (fnid == 0xfade48b2) {
    return "int cellRudpProcessEvents(CellRudpUsec timeout)";
  } else if (fnid == 0x92e4d899) {
    return "int cellRudpRead(int ctx_id, void *data, size_t len, uint8_t flags, CellRudpReadInfo *info)";
  } else if (fnid == 0x7ed95e60) {
    return "int cellRudpSetEventHandler(void *arg)";
  } else if (fnid == 0x54f81789) {
    return "int cellRudpSetMaxSegmentSize(uint16_t mss)";
  } else if (fnid == 0x384ba777) {
    return "int cellRudpSetOption(int ctx_id, int option, void const *optval, size_t optlen)";
  } else if (fnid == 0x48d3eeac) {
    return "int cellRudpTerminate(int ctx_id)";
  } else if (fnid == 0x48c001b0) {
    return "int cellRudpWrite(int ctx_id, void const *data, size_t len, uint8_t flags)";
  } else if (fnid == 0xed58e3ec) {
    return "int cellSailAuReceiverFinalize(CellSailAuReceiver *pSelf)";
  } else if (fnid == 0x3a1132ed) {
    return "int cellSailAuReceiverGet(CellSailAuReceiver *pSelf, uint64_t mode, uint32_t sessionId, uint64_t timeStamp, const CellSailAuInfo **ppInfo)";
  } else if (fnid == 0x3dd9639a) {
    return "int cellSailAuReceiverInitialize(CellSailAuReceiver *pSelf, void *pFunc, void *pArg, int mode)";
  } else if (fnid == 0x10298371) {
    return "int cellSailAviMovieGetHeader(CellSailAviMovie *pSelf, CellSailAviMainHeader *pMainHeader, CellSailAviExtendedHeader *pExtendedHeader)";
  } else if (fnid == 0x6e83f5c0) {
    return "int cellSailAviMovieGetMovieInfo(CellSailAviMovie *pSelf)";
  } else if (fnid == 0x3e908c56) {
    return "int cellSailAviMovieGetStreamByIndex(CellSailAviMovie *pSelf, uint32_t index)";
  } else if (fnid == 0xddebd2a5) {
    return "int cellSailAviMovieGetStreamByTypeAndIndex(CellSailAviMovie *pSelf, CellSailAviMediaType *pMediaType, uint32_t index)";
  } else if (fnid == 0xcc3cca60) {
    return "int cellSailAviStreamGetHeader(CellSailAviStream *pSelf, void *pSpecificInfo, size_t specificInfoSize)";
  } else if (fnid == 0xc09e2f23) {
    return "int cellSailAviStreamGetMediaType(CellSailAviStream *pSelf, CellSailAviMediaType *pMediaType)";
  } else if (fnid == 0xdf5553ef) {
    return "int cellSailDescriptorClearEs(CellSailDescriptor *pSelf, int type, unsigned index)";
  } else if (fnid == 0x15fd6a2a) {
    return "int cellSailDescriptorClose(CellSailDescriptor *pSelf)";
  } else if (fnid == 0x0abb318b) {
    return "int cellSailDescriptorCreateDatabase(CellSailDescriptor *pSelf, void *pDatabase, size_t size, uint64_t arg)";
  } else if (fnid == 0x28336e89) {
    return "int cellSailDescriptorDestroyDatabase(CellSailDescriptor *pSelf, void *pDatabase)";
  } else if (fnid == 0xac9c3b1f) {
    return "int cellSailDescriptorGetCapabilities(CellSailDescriptor *pSelf, uint32_t *pStartCapabilities, uint32_t *pTerminusCapabilities, uint32_t *pAvailableFlags)";
  } else if (fnid == 0xbd1635f4) {
    return "void* cellSailDescriptorGetMediaInfo(CellSailDescriptor *pSelf)";
  } else if (fnid == 0xd5f9a15b) {
    return "int cellSailDescriptorGetStreamType(CellSailDescriptor *pSelf)";
  } else if (fnid == 0x4c191088) {
    return "char* cellSailDescriptorGetUri(CellSailDescriptor *pSelf)";
  } else if (fnid == 0x92590d52) {
    return "int cellSailDescriptorInquireCapability(CellSailDescriptor *pSelf, CellSailStartCommand *pCommand)";
  } else if (fnid == 0x277adf21) {
    return "int cellSailDescriptorIsAutoSelection(CellSailDescriptor *pSelf)";
  } else if (fnid == 0xc044fab1) {
    return "int cellSailDescriptorOpen(CellSailDescriptor *pSelf)";
  } else if (fnid == 0x76b1a425) {
    return "int cellSailDescriptorSetAutoSelection(CellSailDescriptor *pSelf, bool autoSelection)";
  } else if (fnid == 0x0d0c2f0c) {
    return "int cellSailDescriptorSetEs(CellSailDescriptor *pSelf, int type, unsigned index, bool enable, void *pSpecifier)";
  } else if (fnid == 0xee94b99b) {
    return "int cellSailDescriptorSetParameter(CellSailDescriptor *pSelf, int type, uint64_t param0, uint64_t param1)";
  } else if (fnid == 0x9553af65) {
    return "int cellSailFutureFinalize(CellSailFuture *pSelf)";
  } else if (fnid == 0x3a2d806c) {
    return "int cellSailFutureGet(CellSailFuture *pSelf, usecond_t timeout, int *pResult)";
  } else if (fnid == 0x4cc54f8e) {
    return "int cellSailFutureInitialize(CellSailFuture *pSelf)";
  } else if (fnid == 0x51ecf361) {
    return "int cellSailFutureIsDone(CellSailFuture *pSelf, int *pResult)";
  } else if (fnid == 0x0c4cb439) {
    return "int cellSailFutureReset(CellSailFuture *pSelf, bool wait)";
  } else if (fnid == 0xa37fed15) {
    return "int cellSailFutureSet(CellSailFuture *pSelf, int result)";
  } else if (fnid == 0x76488bb1) {
    return "int cellSailGraphicsAdapterFinalize(CellSailGraphicsAdapter *pSelf)";
  } else if (fnid == 0xffd58aa4) {
    return "int cellSailGraphicsAdapterGetFormat(CellSailGraphicsAdapter *pSelf, CellSailVideoFormat *pFormat)";
  } else if (fnid == 0x0247c69e) {
    return "int cellSailGraphicsAdapterGetFrame(CellSailGraphicsAdapter *pSelf, CellSailGraphicsFrameInfo *pInfo)";
  } else if (fnid == 0x018281a8) {
    return "int cellSailGraphicsAdapterGetFrame2(CellSailGraphicsAdapter *pSelf, CellSailGraphicsFrameInfo *pInfo, CellSailGraphicsFrameInfo *pPrevInfo, uint64_t *pFlipTime, uint64_t flags)";
  } else if (fnid == 0x1c983864) {
    return "int cellSailGraphicsAdapterInitialize(CellSailGraphicsAdapter *pSelf, const CellSailGraphicsAdapterFuncs *pCallbacks, void *pArg)";
  } else if (fnid == 0x1872331b) {
    return "int cellSailGraphicsAdapterPtsToTimePosition(CellSailGraphicsAdapter *pSelf, uint64_t pts, uint64_t *pTime)";
  } else if (fnid == 0x2e3ccb5e) {
    return "int cellSailGraphicsAdapterSetPreferredFormat(CellSailGraphicsAdapter *pSelf, const CellSailVideoFormat *pFormat)";
  } else if (fnid == 0x44a20e79) {
    return "void cellSailGraphicsAdapterUpdateAvSync(CellSailGraphicsAdapter *pSelf, uint32_t tag, uint64_t timeStamp)";
  } else if (fnid == 0x346ebba3) {
    return "int cellSailMemAllocatorInitialize(CellSailMemAllocator *pSelf, CellSailMemAllocatorFuncs *pCallbacks)";
  } else if (fnid == 0xb980b76e) {
    return "int cellSailMp4MovieGetBrand(CellSailMp4Movie *pSelf, uint32_t *pMajorBrand, uint32_t *pMinorVersion)";
  } else if (fnid == 0x5783a454) {
    return "int cellSailMp4MovieGetMovieInfo(CellSailMp4Movie *pSelf)";
  } else if (fnid == 0x85b07126) {
    return "int cellSailMp4MovieGetTrackById(CellSailMp4Movie *pSelf, uint32_t trackId)";
  } else if (fnid == 0x5faf802b) {
    return "int cellSailMp4MovieGetTrackByIndex(CellSailMp4Movie *pSelf, int index)";
  } else if (fnid == 0xc2d90ec9) {
    return "int cellSailMp4MovieGetTrackByTypeAndIndex(CellSailMp4Movie *pSelf, uint32_t mediaType, uint32_t coding, int index)";
  } else if (fnid == 0xd4049de0) {
    return "int cellSailMp4MovieIsCompatibleBrand(CellSailMp4Movie *pSelf, uint32_t brand)";
  } else if (fnid == 0xa48be428) {
    return "int cellSailMp4TrackGetTrackInfo(CellSailMp4Track *pSelf)";
  } else if (fnid == 0x5f44f64f) {
    return "int cellSailMp4TrackGetTrackReference(CellSailMp4Track *pSelf, uint32_t *referenceType, int index)";
  } else if (fnid == 0x72236ec1) {
    return "int cellSailMp4TrackGetTrackReferenceCount(CellSailMp4Track *pSelf, uint32_t referenceType)";
  } else if (fnid == 0x7c8dff3b) {
    return "int cellSailPlayerAddDescriptor(CellSailPlayer *pSelf, CellSailDescriptor *pDesc)";
  } else if (fnid == 0xbdf21b0f) {
    return "int cellSailPlayerBoot(CellSailPlayer *pSelf, uint64_t userParam)";
  } else if (fnid == 0x950d53c1) {
    return "int cellSailPlayerCancel(CellSailPlayer *pSelf)";
  } else if (fnid == 0xbf9b8d72) {
    return "int cellSailPlayerCloseEsAudio(CellSailPlayer *pSelf, int index, uint64_t userParam)";
  } else if (fnid == 0xaed9d6cd) {
    return "int cellSailPlayerCloseEsUser(CellSailPlayer *pSelf, int index, uint64_t userParam)";
  } else if (fnid == 0x07924359) {
    return "int cellSailPlayerCloseEsVideo(CellSailPlayer *pSelf, int index, uint64_t userParam)";
  } else if (fnid == 0x85beffcc) {
    return "int cellSailPlayerCloseStream(CellSailPlayer *pSelf, uint64_t userParam)";
  } else if (fnid == 0xd7938b8d) {
    return "int cellSailPlayerCreateDescriptor(CellSailPlayer *pSelf, int streamType, void *pMediaInfo, const char *pUri, CellSailDescriptor **ppDesc)";
  } else if (fnid == 0xfc839bd4) {
    return "int cellSailPlayerDestroyDescriptor(CellSailPlayer *pSelf, CellSailDescriptor *pDesc)";
  } else if (fnid == 0x18b4629d) {
    return "int cellSailPlayerFinalize(CellSailPlayer* pSelf)";
  } else if (fnid == 0x75fca288) {
    return "void cellSailPlayerGetCurrentDescriptor(CellSailPlayer *pSelf)";
  } else if (fnid == 0x752f8585) {
    return "int cellSailPlayerGetDescriptorCount(CellSailPlayer *pSelf)";
  } else if (fnid == 0x952269c9) {
    return "int cellSailPlayerGetParameter(CellSailPlayer *pSelf, int parameterType, uint64_t *pParam0, uint64_t *pParam1)";
  } else if (fnid == 0x186b98d3) {
    return "int cellSailPlayerGetRegisteredProtocols(CellSailPlayer *pSelf, char **apProtocolNames, unsigned *pNum)";
  } else if (fnid == 0x38144ecf) {
    return "int cellSailPlayerGetRepeatMode(CellSailPlayer *pSelf, CellSailStartCommand *pCommand)";
  } else if (fnid == 0x23654375) {
    return "int cellSailPlayerInitialize2(CellSailPlayer *pSelf, CellSailMemAllocator *pAllocator, uint64_t callbackArg)";
  } else if (fnid == 0x09de25fd) {
    return "int cellSailPlayerIsEsAudioMuted(CellSailPlayer *pSelf, int index)";
  } else if (fnid == 0xdbe32ed4) {
    return "int cellSailPlayerIsEsVideoMuted(CellSailPlayer *pSelf, int index)";
  } else if (fnid == 0xaafa17b8) {
    return "int cellSailPlayerIsPaused(CellSailPlayer *pSelf)";
  } else if (fnid == 0x26563ddc) {
    return "int cellSailPlayerNext(CellSailPlayer *pSelf, CellSailStartCommand *pCommand, uint64_t userParam)";
  } else if (fnid == 0x145f9b11) {
    return "int cellSailPlayerOpenEsAudio(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0xa849d0a7) {
    return "int cellSailPlayerOpenEsUser(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0x477501f6) {
    return "int cellSailPlayerOpenEsVideo(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0x34ecc1b9) {
    return "int cellSailPlayerOpenStream(CellSailPlayer *pSelf, uint64_t userParam)";
  } else if (fnid == 0xbedccc74) {
    return "int cellSailPlayerRegisterSource(CellSailPlayer *pSelf, const char *pProtocolName, CellSailSource *pSource)";
  } else if (fnid == 0x9897fbd1) {
    return "int cellSailPlayerRemoveDescriptor(CellSailPlayer *pSelf, CellSailDescriptor **ppDesc)";
  } else if (fnid == 0x4fa5ad09) {
    return "int cellSailPlayerReopenEsAudio(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0x7b6fa92e) {
    return "int cellSailPlayerReopenEsUser(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0xf60a8a69) {
    return "int cellSailPlayerReopenEsVideo(CellSailPlayer *pSelf, int index, void *pSpecifier, bool enable, uint64_t userParam)";
  } else if (fnid == 0x47632810) {
    return "int cellSailPlayerReplaceEventHandler(CellSailPlayer *pSelf, void *pNewCallbackArg, CellSailPlayerFuncNotified *ppOldCallback, void *ppOldCallbackArg)";
  } else if (fnid == 0xf5747e1f) {
    return "int cellSailPlayerSetAuReceiver(CellSailPlayer *pSelf, int index, CellSailAuReceiver *pReceiver)";
  } else if (fnid == 0x91d287f6) {
    return "int cellSailPlayerSetEsAudioMuted(CellSailPlayer *pSelf, int index, bool muted)";
  } else if (fnid == 0xf1446a40) {
    return "int cellSailPlayerSetEsVideoMuted(CellSailPlayer *pSelf, int index, bool muted)";
  } else if (fnid == 0x18bcd21b) {
    return "int cellSailPlayerSetGraphicsAdapter(CellSailPlayer *pSelf, int index, CellSailGraphicsAdapter *pAdapter)";
  } else if (fnid == 0x5f7c7a6f) {
    return "int cellSailPlayerSetParameter(CellSailPlayer *pSelf, int parameterType, uint64_t param0, uint64_t param1)";
  } else if (fnid == 0xd1d55a90) {
    return "int cellSailPlayerSetPaused(CellSailPlayer *pSelf, bool paused)";
  } else if (fnid == 0x92eaf6ca) {
    return "int cellSailPlayerSetRendererAudio(CellSailPlayer *pSelf, int index, CellSailRendererAudio *pRenderer)";
  } else if (fnid == 0xecf56150) {
    return "int cellSailPlayerSetRendererVideo(CellSailPlayer *pSelf, int index, CellSailRendererVideo *pRenderer)";
  } else if (fnid == 0xfc5baf8a) {
    return "int cellSailPlayerSetRepeatMode(CellSailPlayer *pSelf, int repeatMode, CellSailStartCommand *pCommand)";
  } else if (fnid == 0x1139a206) {
    return "int cellSailPlayerSetSoundAdapter(CellSailPlayer *pSelf, int index, CellSailSoundAdapter *pAdapter)";
  } else if (fnid == 0xe535b0d3) {
    return "int cellSailPlayerStart(CellSailPlayer *pSelf, CellSailStartCommand *pCommand, uint64_t userParam)";
  } else if (fnid == 0xeba8d4ec) {
    return "int cellSailPlayerStop(CellSailPlayer *pSelf, uint64_t userParam)";
  } else if (fnid == 0x6f0b1002) {
    return "int cellSailPlayerSubscribeEvent(CellSailPlayer *pSelf, int eventType, uint64_t arg)";
  } else if (fnid == 0x69793952) {
    return "int cellSailPlayerUnsubscribeEvent(CellSailPlayer *pSelf, int eventType)";
  } else if (fnid == 0x06dd4174) {
    return "int cellSailRendererAudioFinalize(CellSailRendererAudio *pSelf)";
  } else if (fnid == 0x67b4d01f) {
    return "int cellSailRendererAudioInitialize(CellSailRendererAudio *pSelf, const CellSailRendererAudioFuncs *pFuncs, void *pArg, const CellSailRendererAudioAttribute *pAttr)";
  } else if (fnid == 0xb7b4ecee) {
    return "void cellSailRendererAudioNotifyCallCompleted(CellSailRendererAudio *pSelf, int status)";
  } else if (fnid == 0xf841a537) {
    return "void cellSailRendererAudioNotifyFrameDone(CellSailRendererAudio *pSelf)";
  } else if (fnid == 0x325039b9) {
    return "void cellSailRendererAudioNotifyOutputEos(CellSailRendererAudio *pSelf)";
  } else if (fnid == 0x47055fea) {
    return "int cellSailRendererVideoFinalize(CellSailRendererVideo *pSelf)";
  } else if (fnid == 0x8d1ff475) {
    return "int cellSailRendererVideoInitialize(CellSailRendererVideo *pSelf, const CellSailRendererVideoFuncs *pFuncs, void *pArg, const CellSailRendererVideoAttribute *pAttr)";
  } else if (fnid == 0x954f48f8) {
    return "void cellSailRendererVideoNotifyCallCompleted(CellSailRendererVideo *pSelf, int status)";
  } else if (fnid == 0x5f77e8df) {
    return "void cellSailRendererVideoNotifyFrameDone(CellSailRendererVideo *pSelf)";
  } else if (fnid == 0xdff1cda2) {
    return "void cellSailRendererVideoNotifyOutputEos(CellSailRendererVideo *pSelf)";
  } else if (fnid == 0xd1462438) {
    return "int cellSailSoundAdapterFinalize(CellSailSoundAdapter *pSelf)";
  } else if (fnid == 0xf25f197d) {
    return "int cellSailSoundAdapterGetFormat(CellSailSoundAdapter *pSelf, CellSailAudioFormat *pFormat)";
  } else if (fnid == 0x7eb8d6b5) {
    return "int cellSailSoundAdapterGetFrame(CellSailSoundAdapter *pSelf, uint32_t samples, CellSailSoundFrameInfo *pInfo)";
  } else if (fnid == 0x3d0d3b72) {
    return "int cellSailSoundAdapterInitialize(CellSailSoundAdapter *pSelf, const CellSailSoundAdapterFuncs *pCallbacks, void *pArg)";
  } else if (fnid == 0x4ae979df) {
    return "int cellSailSoundAdapterPtsToTimePosition(CellSailSoundAdapter *pSelf, uint64_t pts, uint64_t *pTime)";
  } else if (fnid == 0x1c9d5e5a) {
    return "int cellSailSoundAdapterSetPreferredFormat(CellSailSoundAdapter *pSelf, const CellSailAudioFormat *pFormat)";
  } else if (fnid == 0xeec22809) {
    return "void cellSailSoundAdapterUpdateAvSync(CellSailSoundAdapter *pSelf, uint32_t tag, uint64_t timeStamp)";
  } else if (fnid == 0xee724c99) {
    return "int cellSailSourceFinalize(CellSailSource *pSelf)";
  } else if (fnid == 0x9d30bdce) {
    return "int cellSailSourceInitialize(CellSailSource *pSelf, const CellSailSourceFuncs *pFuncs, void *pArg)";
  } else if (fnid == 0x764ec2d2) {
    return "void cellSailSourceNotifyCallCompleted(CellSailSource *pSelf, int status)";
  } else if (fnid == 0x54c53688) {
    return "void cellSailSourceNotifyInputEos(CellSailSource *pSelf)";
  } else if (fnid == 0xf4009a94) {
    return "void cellSailSourceNotifyMediaStateChanged(CellSailSource *pSelf, int state)";
  } else if (fnid == 0xf289f0cd) {
    return "void cellSailSourceNotifySessionError(CellSailSource *pSelf, int error, bool isFatal)";
  } else if (fnid == 0x95ee1695) {
    return "void cellSailSourceNotifyStreamOut(CellSailSource *pSelf, uint32_t num)";
  } else if (fnid == 0x899d1587) {
    return "int cellSailFeederAudioFinalize(CellSailFeederAudio *pSelf)";
  } else if (fnid == 0xbd591197) {
    return "int cellSailFeederAudioInitialize(CellSailFeederAudio *pSelf, const CellSailFeederAudioFuncs *pCallbacks, void *pArg, void *pAttribute)";
  } else if (fnid == 0xc2e2f30d) {
    return "void cellSailFeederAudioNotifyCallCompleted(CellSailFeederAudio *pSelf, int status)";
  } else if (fnid == 0x3c775cea) {
    return "void cellSailFeederAudioNotifyFrameOut(CellSailFeederAudio *pSelf, uint32_t num)";
  } else if (fnid == 0x999c0dc5) {
    return "void cellSailFeederAudioNotifySessionEnd(CellSailFeederAudio *pSelf)";
  } else if (fnid == 0xaf310ae6) {
    return "void cellSailFeederAudioNotifySessionError(CellSailFeederAudio *pSelf, int error, bool isFatal)";
  } else if (fnid == 0x81bfeae8) {
    return "int cellSailFeederVideoFinalize(CellSailFeederVideo *pSelf)";
  } else if (fnid == 0x57415dd3) {
    return "int cellSailFeederVideoInitialize(CellSailFeederVideo *pSelf, const CellSailFeederVideoFuncs *pCallbacks, void *pArg, void *pAttribute)";
  } else if (fnid == 0xd84daeb9) {
    return "void cellSailFeederVideoNotifyCallCompleted(CellSailFeederVideo *pSelf, int status)";
  } else if (fnid == 0xe5e0572a) {
    return "void cellSailFeederVideoNotifyFrameOut(CellSailFeederVideo *pSelf, uint32_t num)";
  } else if (fnid == 0xbff6e8d3) {
    return "void cellSailFeederVideoNotifySessionEnd(CellSailFeederVideo *pSelf)";
  } else if (fnid == 0x86cae679) {
    return "void cellSailFeederVideoNotifySessionError(CellSailFeederVideo *pSelf, int error, bool isFatal)";
  } else if (fnid == 0xe14cae97) {
    return "int cellSailProfileSetEsAudioParameter(CellSailProfile *pSelf, unsigned index, CellSailBsAudioParameter *pParameter, void *pSpecific)";
  } else if (fnid == 0x1422a425) {
    return "int cellSailProfileSetEsVideoParameter(CellSailProfile *pSelf, unsigned index, CellSailBsVideoParameter *pParameter, void *pSpecific)";
  } else if (fnid == 0xe8d86c43) {
    return "int cellSailProfileSetStreamParameter(CellSailProfile *pSelf, CellSailStreamParameter *pParameter, void *pSpecific)";
  } else if (fnid == 0xc4617ddc) {
    return "int cellSailRecorderBoot(CellSailRecorder *pSelf, uint64_t userParam)";
  } else if (fnid == 0xd37fb694) {
    return "int cellSailRecorderCancel(CellSailRecorder *pSelf)";
  } else if (fnid == 0xe3f56f62) {
    return "int cellSailRecorderCloseStream(CellSailRecorder *pSelf, uint64_t userParam)";
  } else if (fnid == 0x50affdc1) {
    return "int cellSailRecorderCreateProfile(CellSailRecorder *pSelf, int streamType, CellSailProfile **ppProfile)";
  } else if (fnid == 0x49476a3d) {
    return "int cellSailRecorderCreateVideoConverter(CellSailRecorder *pSelf, int queueDepth, CellSailVideoFormat *pIn, CellSailVideoFormat *pOut, void *pReserved, void *pDoneArg, CellSailVideoConverter **ppConverter)";
  } else if (fnid == 0x376c3926) {
    return "int cellSailRecorderDestroyProfile(CellSailRecorder *pSelf, CellSailProfile *pProfile)";
  } else if (fnid == 0x455c4709) {
    return "int cellSailRecorderDestroyVideoConverter(CellSailRecorder *pSelf, CellSailVideoConverter *pConverter)";
  } else if (fnid == 0xf57d74e3) {
    return "int cellSailRecorderFinalize(CellSailRecorder *pSelf)";
  } else if (fnid == 0xff20157b) {
    return "int cellSailRecorderGetParameter(CellSailRecorder *pSelf, int parameterType, uint64_t *pParam0, uint64_t *pParam1)";
  } else if (fnid == 0x7a52bf69) {
    return "int cellSailRecorderInitialize(CellSailRecorder *pSelf, CellSailMemAllocator *pAllocator, void *callbackArg)";
  } else if (fnid == 0x10c81457) {
    return "int cellSailRecorderOpenStream(CellSailRecorder *pSelf, CellSailProfile *pProfile, int reserved0, const char *pBasePath, void *reserved1, void *reserved2, uint64_t userParam)";
  } else if (fnid == 0x3deae857) {
    return "int cellSailRecorderSetFeederAudio(CellSailRecorder *pSelf, unsigned index, CellSailFeederAudio *pFeeder)";
  } else if (fnid == 0x4fec43a9) {
    return "int cellSailRecorderSetFeederVideo(CellSailRecorder *pSelf, unsigned index, CellSailFeederVideo *pFeeder)";
  } else if (fnid == 0x0a3ea2a9) {
    return "int cellSailRecorderSetParameter(CellSailRecorder *pSelf, int parameterType, uint64_t param0, uint64_t param1)";
  } else if (fnid == 0x4830faf8) {
    return "int cellSailRecorderStart(CellSailRecorder *pSelf, CellSailRecorderStartCommand *pCommand, const char *pId, uint64_t userParam)";
  } else if (fnid == 0x18ecc741) {
    return "int cellSailRecorderStop(CellSailRecorder *pSelf, CellSailRecorderStopCommand *pCommand, uint64_t userParam)";
  } else if (fnid == 0xe16de678) {
    return "int cellSailVideoConverterCanGetResult(CellSailVideoConverter *pSelf)";
  } else if (fnid == 0xb3d30b0d) {
    return "int cellSailVideoConverterCanProcess(CellSailVideoConverter *pSelf)";
  } else if (fnid == 0xe15679fe) {
    return "int cellSailVideoConverterGetResult(CellSailVideoConverter *pSelf, usecond_t waitTimeout, int *pResult, uint32_t *pUserParam)";
  } else if (fnid == 0x855da8c6) {
    return "int cellSailVideoConverterProcess(CellSailVideoConverter *pSelf, void *pIn, size_t inSize, void *pOut, void *pReserved, usecond_t waitTimeout, uint32_t userParam)";
  } else if (fnid == 0x46a2d878) {
    return "int cellSaveDataFixedExport(const char *dirName, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x52541151) {
    return "int cellSaveDataFixedImport(const char *dirName, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x04c06fc2) {
    return "int cellSaveDataGetListItem(const char *dirName, CellSaveDataDirStat *dir, CellSaveDataSystemFileParam *sysFileParam, unsigned int *bind, int *sizeKB)";
  } else if (fnid == 0x27cb8bc2) {
    return "int cellSaveDataListDelete(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x491cc554) {
    return "int cellSaveDataListExport(CellSaveDataSetList *setList, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x6b4e0de6) {
    return "int cellSaveDataListImport(CellSaveDataSetList *setList, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x95ae2cde) {
    return "int cellSaveDataUserFixedExport(const char *dirName, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x529231b0) {
    return "int cellSaveDataUserFixedImport(const char *dirName, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xf6482036) {
    return "int cellSaveDataUserGetListItem(const char *dirName, CellSaveDataDirStat *dir, CellSaveDataSystemFileParam *sysFileParam, unsigned int *bind, int *sizeKB)";
  } else if (fnid == 0x7048a9ba) {
    return "int cellSaveDataUserListDelete(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x273d116a) {
    return "int cellSaveDataUserListExport(CellSaveDataSetList *setList, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x39d6ee43) {
    return "int cellSaveDataUserListImport(CellSaveDataSetList *setList, unsigned int maxSizeKB, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xfc6f4e74) {
    return "int cellScreenShotDisable(void)";
  } else if (fnid == 0x9e33ab8f) {
    return "int cellScreenShotEnable(void)";
  } else if (fnid == 0x7a9c2243) {
    return "int cellScreenShotSetOverlayImage(const char *srcDir, const char *srcFile, int32_t offset_x, int32_t offset_y)";
  } else if (fnid == 0xd3ad63e4) {
    return "int cellScreenShotSetParameter(const CellScreenShotSetParam *param)";
  } else if (fnid == 0x8fe376a6) {
    return "int cellSearchCancel(const CellSearchId searchId)";
  } else if (fnid == 0x774033d6) {
    return "int cellSearchEnd(const CellSearchId searchId)";
  } else if (fnid == 0xbfab7616) {
    return "int cellSearchFinalize(void)";
  } else if (fnid == 0x94e21701) {
    return "int cellSearchGetContentIdByOffset(const CellSearchId searchId, int32_t offset, CellSearchContentType *outContentType, CellSearchContentId *outContentId, CellSearchTimeInfo *outTimeInfo)";
  } else if (fnid == 0x9663a44b) {
    return "int cellSearchGetContentInfoByContentId(const CellSearchContentId *contentId, CellSearchContentType *outContentType)";
  } else if (fnid == 0x3b210319) {
    return "int cellSearchGetContentInfoByOffset(const CellSearchId searchId, CellSearchContentType *outContentType, CellSearchContentId *outContentId)";
  } else if (fnid == 0x35cda406) {
    return "int cellSearchGetContentInfoDeveloperData(const CellSearchContentId *contentId)";
  } else if (fnid == 0xd7a7a433) {
    return "int cellSearchGetContentInfoGameComment(const CellSearchContentId *contentId)";
  } else if (fnid == 0xffb28491) {
    return "int cellSearchGetContentInfoPath(const CellSearchContentId *contentId, CellSearchContentInfoPath *infoPath)";
  } else if (fnid == 0x37b5ba0c) {
    return "int cellSearchGetContentInfoPathMovieThumb(const CellSearchContentId *contentId, CellSearchContentInfoPathMovieThumb *infoMt)";
  } else if (fnid == 0x025ce169) {
    return "int cellSearchGetMusicSelectionContext(const CellSearchId searchId, const CellSearchContentId *contentId, CellSearchRepeatMode repeatMode, CellSearchContextOption option, CellMusicSelectionContext *outContext)";
  } else if (fnid == 0xed20e079) {
    return "int cellSearchGetMusicSelectionContextOfSingleTrack(const CellSearchContentId *contentId, CellMusicSelectionContext *outContext)";
  } else if (fnid == 0x540d9068) {
    return "int cellSearchGetOffsetByContentId(const CellSearchId searchId, int32_t *outOffset)";
  } else if (fnid == 0xc81ccf8a) {
    return "int cellSearchInitialize(CellSearchMode mode, sys_memory_container_t container, void *userData)";
  } else if (fnid == 0xe73cb0d2) {
    return "int cellSearchPrepareFile(const char *path)";
  } else if (fnid == 0x0591826f) {
    return "int cellSearchStartContentSearch(CellSearchId *outSearchId)";
  } else if (fnid == 0x64fb0b76) {
    return "int cellSearchStartContentSearchInList(CellSearchId *outSearchId)";
  } else if (fnid == 0x0a4c8295) {
    return "int cellSearchStartListSearch(CellSearchId *outSearchId)";
  } else if (fnid == 0x13524faa) {
    return "int cellSearchStartSceneSearch(CellSearchSceneSearchType searchType, const char *gameTitle, const char **tags, uint32_t tagNum, CellSearchId *outSearchId)";
  } else if (fnid == 0xc0ed0522) {
    return "int cellSearchStartSceneSearchInVideo(const CellSearchContentId *videoId, CellSearchSceneSearchType searchType, CellSearchId *outSearchId)";
  } else if (fnid == 0xf6f5fbca) {
    return "void cellKeySheapBarrierDelete(CellKeySheapBarrier *obj, CellKeySheapBarrier *obj)";
  } else if (fnid == 0xe897c835) {
    return "int cellKeySheapBarrierNew(uint16_t total_count, uint16_t total_count)";
  } else if (fnid == 0xe6b37362) {
    return "void cellKeySheapBufferDelete(CellKeySheapBuffer *obj, CellKeySheapBuffer *obj)";
  } else if (fnid == 0x4a5b9659) {
    return "int cellKeySheapBufferNew(uint64_t size, uint64_t size)";
  } else if (fnid == 0xa1b25841) {
    return "int cellKeySheapInitialize(uint64_t size, uint32_t tag, uint64_t size, uint32_t tag)";
  } else if (fnid == 0x2452679f) {
    return "void cellKeySheapMutexDelete(CellKeySheapMutex *obj, CellKeySheapMutex *obj)";
  } else if (fnid == 0x79a6abd0) {
    return "void cellKeySheapQueueDelete(CellKeySheapQueue *obj, CellKeySheapQueue *obj)";
  } else if (fnid == 0x987e260e) {
    return "int cellKeySheapQueueNew(unsigned int depth, unsigned int depth)";
  } else if (fnid == 0xed136702) {
    return "void cellKeySheapRwmDelete(CellKeySheapRwm *obj, CellKeySheapRwm *obj)";
  } else if (fnid == 0xf01ac471) {
    return "int cellKeySheapRwmNew(CellKeySheapRwm *obj, void *keysheap, uint32_t size, CellKeySheapRwm *obj, uint64_t keysheap, uint32_t size)";
  } else if (fnid == 0x73a45cf8) {
    return "void cellKeySheapSemaphoreDelete(CellKeySheapSemaphore *obj, CellKeySheapSemaphore *obj)";
  } else if (fnid == 0x69a5861d) {
    return "int cellKeySheapSemaphoreNew(void *keysheap, int count, uint64_t keysheap, int count)";
  } else if (fnid == 0x4b1383fb) {
    return "uint64_t cellSheapAllocate(void *sheap, uint64_t size, uint64_t sheap, uint64_t size)";
  } else if (fnid == 0x5c5994bd) {
    return "int cellSheapFree(void *ptr, uint64_t ptr)";
  } else if (fnid == 0xbbb47cd8) {
    return "int cellSheapInitialize(uint64_t size, uint32_t tag, uint64_t size, uint32_t tag)";
  } else if (fnid == 0x7fa23275) {
    return "int cellSheapQueryFree(void *sheap, uint64_t sheap)";
  } else if (fnid == 0x37968718) {
    return "int cellSheapQueryMax(void *sheap, uint64_t sheap)";
  } else if (fnid == 0xcccd3257) {
    return "int cellSpudllGetImageSize(uint32_t *size, const void *so_elf, const CellSpudllHandleConfig *config, CellSpudllHandle *handle, uint32_t *size)";
  } else if (fnid == 0x3fbcf1d6) {
    return "int cellSpudllHandleConfigSetDefaultValues(CellSpudllHandleConfig *config)";
  } else if (fnid == 0x8fdf50b2) {
    return "int cellSpursAddUrgentCall(CellSpursJobChain *jobChain, uint64_t *commandList, uint64_t eaJobChain, uint64_t eaCommandList)";
  } else if (fnid == 0x17001000) {
    return "int cellSpursAddUrgentCommand(CellSpursJobChain *jobChain, uint64_t command, uint64_t eaJobChain, uint64_t command)";
  } else if (fnid == 0x69726aa2) {
    return "int cellSpursAddWorkload(CellSpurs *spurs, CellSpursWorkloadId *workloadId, const void *pm, unsigned int size, uint64_t data, unsigned int minContention, unsigned int maxContention)";
  } else if (fnid == 0xc0158d8b) {
    return "int cellSpursAddWorkloadWithAttribute(CellSpurs *spurs, CellSpursWorkloadId *workloadId, const CellSpursWorkloadAttribute *attr)";
  } else if (fnid == 0xb9bc6207) {
    return "int cellSpursAttachLv2EventQueue(CellSpurs *spurs, sys_event_queue_t queue, uint8_t *port, int isDynamic)";
  } else if (fnid == 0x1051d134) {
    return "int cellSpursAttributeEnableSpuPrintfIfAvailable(CellSpursAttribute *attr)";
  } else if (fnid == 0x9dcbcb5d) {
    return "int cellSpursAttributeEnableSystemWorkload(CellSpursAttribute *attr, unsigned int maxSpu)";
  } else if (fnid == 0x82275c1c) {
    return "int cellSpursAttributeSetMemoryContainerForSpuThread(CellSpursAttribute *attr, sys_memory_container_t container)";
  } else if (fnid == 0x07529113) {
    return "int cellSpursAttributeSetNamePrefix(CellSpursAttribute *attr, const char *prefix, size_t size)";
  } else if (fnid == 0xa839a4d9) {
    return "int cellSpursAttributeSetSpuThreadGroupType(CellSpursAttribute *attr, int type)";
  } else if (fnid == 0x9aeb5432) {
    return "int cellSpursBarrierGetTasksetAddress(const CellSpursBarrier *barrier, CellSpursTaskset **taskset, uint64_t barrier, uint64_t *taskset)";
  } else if (fnid == 0x7fdf4fef) {
    return "int cellSpursBarrierInitialize(CellSpursTaskset *taskset, CellSpursBarrier *ea, unsigned int total, uint64_t ea, unsigned int total)";
  } else if (fnid == 0x303c19cd) {
    return "int cellSpursCreateJobChainWithAttribute(CellSpurs *spurs, CellSpursJobChain *jobChain, CellSpursJobChainAttribute *attr)";
  } else if (fnid == 0xe14ca62d) {
    return "int cellSpursCreateTask2(CellSpursTaskset2 *taskset, CellSpursTaskId *id, const void *eaElf, const CellSpursTaskArgument *arg, const CellSpursTaskAttribute2 *attr, uint64_t taskset, CellSpursTaskId *id, uint64_t eaElf, qword arg, const CellSpursTaskAttribute2 *attr)";
  } else if (fnid == 0xe4944a1c) {
    return "int cellSpursCreateTask2WithBinInfo(CellSpursTaskset2 *taskset, CellSpursTaskId *id, const CellSpursTaskBinInfo *eaTaskBinInfo, const CellSpursTaskArgument *arg, void *eaContext, const char *name, void *__reserved__, uint64_t taskset, CellSpursTaskId *id, uint64_t eaTaskBinInfo, qword arg, uint64_t eaContext, const char *name, void *__reserved__)";
  } else if (fnid == 0x4a6465e3) {
    return "int cellSpursCreateTaskset2(CellSpurs *spurs, CellSpursTaskset2 *taskset2, const CellSpursTasksetAttribute2 *attr)";
  } else if (fnid == 0x1ebcf459) {
    return "int cellSpursDestroyTaskset2(CellSpursTaskset2 *taskset)";
  } else if (fnid == 0x4e66d483) {
    return "int cellSpursDetachLv2EventQueue(CellSpurs *spurs, uint8_t port)";
  } else if (fnid == 0x32b94add) {
    return "int cellSpursEnableExceptionEventHandler(CellSpurs *spurs, bool flag)";
  } else if (fnid == 0x87630976) {
    return "int cellSpursEventFlagAttachLv2EventQueue(CellSpursEventFlag *ev)";
  } else if (fnid == 0x4ac7bae4) {
    return "int cellSpursEventFlagClear(CellSpursEventFlag *ev, uint16_t bits, uint64_t ev, uint16_t bits)";
  } else if (fnid == 0x22aab31d) {
    return "int cellSpursEventFlagDetachLv2EventQueue(CellSpursEventFlag *ev)";
  } else if (fnid == 0x4d1e9373) {
    return "int cellSpursEventFlagGetClearMode(const CellSpursEventFlag *ev, CellSpursEventFlagClearMode *clear_mode, uint64_t ev, CellSpursEventFlagClearMode *clear_mode)";
  } else if (fnid == 0x890f9e5a) {
    return "int cellSpursEventFlagGetDirection(const CellSpursEventFlag *ev, CellSpursEventFlagDirection *direction, uint64_t ev, CellSpursEventFlagDirection *direction)";
  } else if (fnid == 0x947efb0b) {
    return "int cellSpursEventFlagGetTasksetAddress(const CellSpursEventFlag *ev, CellSpursTaskset **taskset, uint64_t ev, uint64_t *taskset)";
  } else if (fnid == 0xf5507729) {
    return "int cellSpursEventFlagSet(CellSpursEventFlag *ev, uint16_t bits, uint64_t ev, uint16_t bits)";
  } else if (fnid == 0x6d2d9339) {
    return "int cellSpursEventFlagTryWait(CellSpursEventFlag *ev, uint16_t *mask, CellSpursEventFlagWaitMode mode, uint64_t ev, uint16_t *mask, CellSpursEventFlagWaitMode mode)";
  } else if (fnid == 0x373523d4) {
    return "int cellSpursEventFlagWait(CellSpursEventFlag *ev, uint16_t *mask, CellSpursEventFlagWaitMode mode, uint64_t ev, uint16_t *mask, CellSpursEventFlagWaitMode mode)";
  } else if (fnid == 0xca4c4600) {
    return "int cellSpursFinalize(CellSpurs *spurs)";
  } else if (fnid == 0x1f402f8f) {
    return "int cellSpursGetInfo(CellSpurs *spurs, CellSpursInfo *info)";
  } else if (fnid == 0x86c864a2) {
    return "int cellSpursGetJobChainId(const CellSpursJobChain *jobChain, CellSpursWorkloadId *workloadId)";
  } else if (fnid == 0x4ceb9694) {
    return "int cellSpursGetJobChainInfo(const CellSpursJobChain *jobChain, CellSpursJobChainInfo *info)";
  } else if (fnid == 0xd86380d8) {
    return "int cellSpursGetJobPipelineInfo(CellSpurs *spurs, sys_spu_thread_t spu_thread, CellSpursJobPipelineInfo *info)";
  } else if (fnid == 0xc56defb5) {
    return "int cellSpursGetNumSpuThread(CellSpurs *spurs, unsigned *nThreads)";
  } else if (fnid == 0x6fcdf6e3) {
    return "int cellSpursGetSpuGuid(const void *pSpuGuidSection, uint64_t *pSpuGuid, const qword *pSpuGuidSection, uint64_t *pSpuGuid)";
  } else if (fnid == 0x39c173fb) {
    return "int cellSpursGetSpuThreadGroupId(CellSpurs *spurs, sys_spu_thread_group_t *group)";
  } else if (fnid == 0x6c960f6d) {
    return "int cellSpursGetSpuThreadId(CellSpurs *spurs, sys_spu_thread_t *thread, unsigned *nThreads)";
  } else if (fnid == 0xe7dd87e1) {
    return "int cellSpursGetTasksetId(const CellSpursTaskset *taskset, CellSpursWorkloadId *workloadId)";
  } else if (fnid == 0x9fcb567b) {
    return "int cellSpursGetTasksetInfo(const CellSpursTaskset *taskset, CellSpursTasksetInfo *info)";
  } else if (fnid == 0xa7f9e716) {
    return "int cellSpursGetWorkloadData(const CellSpurs *spurs, uint64_t *data, uint64_t *data)";
  } else if (fnid == 0xc765b995) {
    return "int cellSpursGetWorkloadFlag(cosnt CellSpurs *spurs, CellSpursWorkloadFlag **flag, uint64_t *flag)";
  } else if (fnid == 0x4e153e3e) {
    return "int cellSpursGetWorkloadInfo(const CellSpurs *spurs, CellSpursWorkloadInfo *info)";
  } else if (fnid == 0x30aa96c4) {
    return "int cellSpursInitializeWithAttribute2(CellSpurs2 *spurs, const CellSpursAttribute *attr)";
  } else if (fnid == 0xbb68d76e) {
    return "int cellSpursJobChainAttributeSetHaltOnError(CellSpursJobChainAttribute *attr)";
  } else if (fnid == 0x2cfccb99) {
    return "int cellSpursJobChainAttributeSetJobTypeMemoryCheck(CellSpursJobChainAttribute *attr)";
  } else if (fnid == 0x9fef70c2) {
    return "int cellSpursJobChainAttributeSetName(CellSpursJobChainAttribute *attr, const char *name)";
  } else if (fnid == 0x161da6a7) {
    return "int cellSpursJobChainGetError(CellSpursJobChain *jobChain, void **cause)";
  } else if (fnid == 0x494613c7) {
    return "int cellSpursJobChainGetSpursAddress(const CellSpursJobChain *jobChain, CellSpurs **spurs)";
  } else if (fnid == 0x5202e53b) {
    return "int cellSpursJobChainSetExceptionEventHandler(CellSpursJobChain *jobChain, void *arg)";
  } else if (fnid == 0x6aa76999) {
    return "int cellSpursJobChainUnsetExceptionEventHandler(CellSpursJobChain *jobChain)";
  } else if (fnid == 0x68aaeba9) {
    return "int cellSpursJobGuardInitialize(const CellSpursJobChain *jobChain, CellSpursJobGuard *jobGuard, uint32_t notifyCount, uint8_t requestSpuCount, uint8_t autoReset, uint64_t eaJobChain, uint64_t eaJobGuard, uint32_t notifyCount, uint32_t requestSpuCount, uint8_t autoReset, unsigned int tag)";
  } else if (fnid == 0xd5d0b256) {
    return "int cellSpursJobGuardNotify(CellSpursJobGuard *jobGuard, uint64_t eaJobGuard)";
  } else if (fnid == 0x00af2519) {
    return "int cellSpursJobGuardReset(CellSpursJobGuard *jobGuard, uint64_t eaJobGuard)";
  } else if (fnid == 0x97a2f6c8) {
    return "int cellSpursJobHeaderSetJobbin2Param(CellSpursJobHeader *header, const void *jobbin2, CellSpursJobHeader *header, uint64_t jobbin2)";
  } else if (fnid == 0xe7b0e69a) {
    return "int cellSpursJobSetMaxGrab(CellSpursJobChain *jobChain, unsigned int maxGrab, uint64_t eaJobChain, unsigned int maxGrab)";
  } else if (fnid == 0xa7c066de) {
    return "int cellSpursJoinJobChain(CellSpursJobChain *jobChain)";
  } else if (fnid == 0xa7a94892) {
    return "int cellSpursJoinTask2(CellSpursTaskset2 *taskset, int *exitCode, uint64_t taskset, int *exitCode)";
  } else if (fnid == 0x1656d49f) {
    return "int cellSpursLFQueueAttachLv2EventQueue(CellSpursLFQueue *ea)";
  } else if (fnid == 0x73e06f91) {
    return "int cellSpursLFQueueDetachLv2EventQueue(CellSpursLFQueue *ea)";
  } else if (fnid == 0xb792ca1a) {
    return "int cellSpursLFQueueGetTasksetAddress(const CellSpursLFQueue *queue, CellSpursTaskset **taskset, uint64_t queue, uint64_t *taskset)";
  } else if (fnid == 0x4cce88a9) {
    return "int cellSpursLookUpTasksetAddress(CellSpurs *spurs, CellSpursTaskset **taskset, uint64_t *taskset)";
  } else if (fnid == 0xe5443be7) {
    return "int cellSpursQueueAttachLv2EventQueue(CellSpursQueue *ea)";
  } else if (fnid == 0x247414d0) {
    return "int cellSpursQueueClear(CellSpursQueue *ea, uint64_t ea)";
  } else if (fnid == 0x35f02287) {
    return "int cellSpursQueueDepth(CellSpursQueue *ea, unsigned int *depth, uint64_t ea, unsigned int *depth)";
  } else if (fnid == 0x039d70b7) {
    return "int cellSpursQueueDetachLv2EventQueue(CellSpursQueue *ea)";
  } else if (fnid == 0xec68442c) {
    return "int cellSpursQueueGetDirection(CellSpursQueue *ea, CellSpursQueueDirection *direction, uint64_t ea, CellSpursQueueDirection *direction)";
  } else if (fnid == 0x369fe03d) {
    return "int cellSpursQueueGetEntrySize(CellSpursQueue *ea, unsigned int *entry_size, uint64_t ea, unsigned int *entry_size)";
  } else if (fnid == 0x2093252b) {
    return "int cellSpursQueueGetTasksetAddress(const CellSpursQueue *queue, CellSpursTaskset **taskset, uint64_t queue, uint64_t *taskset)";
  } else if (fnid == 0x54876603) {
    return "int cellSpursQueueSize(CellSpursQueue *ea, unsigned int *size, uint64_t ea, unsigned int *size)";
  } else if (fnid == 0x75211196) {
    return "int cellSpursReadyCountAdd(CellSpurs *spurs, unsigned int *old, int value, unsigned char *ls, uint64_t eaSpurs, unsigned int *old, int value)";
  } else if (fnid == 0xf1d3552d) {
    return "int cellSpursReadyCountCompareAndSwap(CellSpurs *spurs, unsigned int *old, unsigned int compare, unsigned int swap, unsigned char *ls, uint64_t eaSpurs, unsigned int *old, unsigned int compare, unsigned int swap)";
  } else if (fnid == 0xf843818d) {
    return "int cellSpursReadyCountStore(CellSpurs *spurs, unsigned int value, unsigned char *ls, uint64_t eaSpurs, unsigned value)";
  } else if (fnid == 0x49a3426d) {
    return "int cellSpursReadyCountSwap(CellSpurs *spurs, unsigned int *old, unsigned int swap, unsigned char *ls, uint64_t eaSpurs, unsigned *old, unsigned swap)";
  } else if (fnid == 0x57e4dec3) {
    return "int cellSpursRemoveWorkload(CellSpurs *spurs)";
  } else if (fnid == 0x182d9890) {
    return "int cellSpursRequestIdleSpu(CellSpurs *spurs, unsigned int count, unsigned char *ls, uint64_t eaSpurs, Unsigned int count)";
  } else if (fnid == 0xf31731bb) {
    return "int cellSpursRunJobChain(const CellSpursJobChain *jobChain, uint64_t eaJobChain)";
  } else if (fnid == 0x568b2352) {
    return "int cellSpursSemaphoreGetTasksetAddress(const CellSpursSemaphore *semaphore, CellSpursTaskset **taskset, uint64_t semaphore, uint64_t *taskset)";
  } else if (fnid == 0x1d2bca4b) {
    return "int cellSpursSendWorkloadSignal(CellSpurs *spurs, unsigned char *ls, uint64_t eaSpurs)";
  } else if (fnid == 0xd2e23fa9) {
    return "int cellSpursSetExceptionEventHandler(CellSpurs *spurs, void *arg)";
  } else if (fnid == 0x7517724a) {
    return "int cellSpursSetGlobalExceptionEventHandler(CellSpurs *spurs, void *arg)";
  } else if (fnid == 0x84d2f6d5) {
    return "int cellSpursSetMaxContention(CellSpurs *spurs, unsigned int maxContention, unsigned int maxContention)";
  } else if (fnid == 0x4de203e2) {
    return "int cellSpursSetPreemptionVictimHints(CellSpurs *spurs)";
  } else if (fnid == 0x80a29e27) {
    return "int cellSpursSetPriorities(CellSpurs *spurs, vec_uchar16 priorities)";
  } else if (fnid == 0x738e40e6) {
    return "int cellSpursShutdownJobChain(const CellSpursJobChain *jobChain, uint64_t eaJobChain)";
  } else if (fnid == 0x98d5b343) {
    return "int cellSpursShutdownWorkload(CellSpurs *spurs, uint64_t eaSpurs)";
  } else if (fnid == 0x9197915f) {
    return "int cellSpursTaskGenerateLsPattern(CellSpursTaskLsPattern *lspattern, uint32_t start, uint32_t size, vec_uint4 *lspattern, intptr_t start, int size)";
  } else if (fnid == 0x9034e538) {
    return "int cellSpursTaskGetContextSaveAreaSize(uint32_t* size, const CellSpursTaskLsPattern *lsPattern, uint32_t *size, vec_uint4 lsPattern)";
  } else if (fnid == 0x1d344406) {
    return "int cellSpursTaskGetLoadableSegmentPattern(CellSpursTaskLsPattern *lspattern, const void *eaElf, vec_uint4 *lspattern, uint64_t eaElf, void *buf, uint32_t tag)";
  } else if (fnid == 0x7cb33c2e) {
    return "int cellSpursTaskGetReadOnlyAreaPattern(CellSpursTaskLsPattern *lspattern, const void *eaElf, vec_uint4 *lspattern, uint64_t eaElf, void *buf, uint32_t tag)";
  } else if (fnid == 0x58d58fcf) {
    return "int cellSpursTasksetGetSpursAddress(const CellSpursTaskset *taskset, CellSpurs **spurs)";
  } else if (fnid == 0x2edcff92) {
    return "int cellSpursTasksetSetExceptionEventHandler(CellSpursTaskset *taskset, void *arg)";
  } else if (fnid == 0x94034c95) {
    return "int cellSpursTasksetUnsetExceptionEventHandler(CellSpursTaskset *taskset)";
  } else if (fnid == 0x7b9cbb74) {
    return "void cellSpursTraceFinalize(CellSpurs *spurs)";
  } else if (fnid == 0x569674e3) {
    return "int cellSpursTraceInitialize(CellSpurs *spurs, void *buffer, size_t size, uint32_t mode)";
  } else if (fnid == 0xce853fbf) {
    return "int cellSpursTraceStart(CellSpurs *spurs)";
  } else if (fnid == 0xddc81b5a) {
    return "void cellSpursTraceStop(CellSpurs *spurs)";
  } else if (fnid == 0x838fa4f0) {
    return "int cellSpursTryJoinTask2(CellSpursTaskset2 *taskset, int *exitCode, uint64_t taskset, int *exitCode)";
  } else if (fnid == 0x4c75deb8) {
    return "int cellSpursUnsetExceptionEventHandler(CellSpurs *spurs)";
  } else if (fnid == 0x861237f8) {
    return "int cellSpursUnsetGlobalExceptionEventHandler(CellSpurs *spurs)";
  } else if (fnid == 0x5fd43fe4) {
    return "int cellSpursWaitForWorkloadShutdown(CellSpurs *spurs)";
  } else if (fnid == 0x7e4ea023) {
    return "int cellSpursWakeUp(CellSpurs *spurs)";
  } else if (fnid == 0x4a5eab63) {
    return "int cellSpursWorkloadAttributeSetName(const char *nameClass, const char *nameInstance)";
  } else if (fnid == 0x0eb4bc38) {
    return "int cellSpursWorkloadAttributeSetShutdownCompletionEventHook(void *arg)";
  } else if (fnid == 0xc343ee10) {
    return "int cellSpursGetJobQueueId(const CellSpursJobQueue *pJobQueue, CellSpursWorkloadId *pId, uint64_t eaJobQueue, CellSpursWorkloadId *pId)";
  } else if (fnid == 0x43ddab4f) {
    return "void cellSpursJobQueueAttributeInitialize(CellSpursJobQueueAttribute *attr)";
  } else if (fnid == 0x0582338a) {
    return "int cellSpursJobQueueAttributeSetDoBusyWaiting(CellSpursJobQueueAttribute *attr, bool doBusyWaiting)";
  } else if (fnid == 0xe70f874e) {
    return "int cellSpursJobQueueAttributeSetGrabParameters(CellSpursJobQueueAttribute *attr, unsigned int maxNumJobsOnASpu, unsigned int maxGrab)";
  } else if (fnid == 0xff03cc79) {
    return "int cellSpursJobQueueAttributeSetIsHaltOnError(CellSpursJobQueueAttribute *attr, bool isHaltOnError)";
  } else if (fnid == 0x742cec0d) {
    return "int cellSpursJobQueueAttributeSetIsJobTypeMemoryCheck(CellSpursJobQueueAttribute *attr, bool isJobTypeMemoryCheck)";
  } else if (fnid == 0x5fb9b05d) {
    return "int cellSpursJobQueueAttributeSetMaxGrab(CellSpursJobQueueAttribute *attr, unsigned int maxGrab)";
  } else if (fnid == 0x1686957e) {
    return "int cellSpursJobQueueAttributeSetMaxSizeJobDescriptor(CellSpursJobQueueAttribute *attr, unsigned int maxSizeJobDescriptor)";
  } else if (fnid == 0x0f03f712) {
    return "int cellSpursJobQueueAttributeSetSubmitWithEntryLock(CellSpursJobQueueAttribute *attr, bool submitWithEntryLock)";
  } else if (fnid == 0x29c2acc5) {
    return "int cellSpursJobQueueClose(CellSpursJobQueue *JobQueue, uint64_t eaJobQueue)";
  } else if (fnid == 0x2e775550) {
    return "int cellSpursJobQueueGetError(CellSpursJobQueue *JobQueue, int *exitCode, void **cause)";
  } else if (fnid == 0x840c5239) {
    return "int cellSpursJobQueueGetHandleCount(const CellSpursJobQueue *pJobQueue, uint64_t eaJobQueue)";
  } else if (fnid == 0x5659da82) {
    return "int cellSpursJobQueueGetMaxSizeJobDescriptor(const CellSpursJobQueue *pJobQueue, uint64_t eaJobQueue)";
  } else if (fnid == 0x01bbf2e0) {
    return "uint64_t cellSpursJobQueueGetSpurs(const CellSpursJobQueue *pJobQueue, uint64_t eaJobQueue)";
  } else if (fnid == 0x15934401) {
    return "int cellSpursJobQueueGetSuspendedJobSize(const CellSpursJobHeader *pJob, size_t sizeJobDesc, unsigned int *pSize)";
  } else if (fnid == 0xff7a7bd2) {
    return "int cellSpursJobQueueOpen(CellSpursJobQueue *JobQueue, CellSpursJobQueueHandle *handle, uint64_t eaJobQueue, CellSpursJobQueueHandle *handle)";
  } else if (fnid == 0x934abb00) {
    return "int cellSpursJobQueuePort2AllocateJobDescriptor(CellSpursJobQueuePort2 *eaPort2, size_t sizeDesc, unsigned flag, CellSpursJobHeader **eaAllocatedJobDesc, uint64_t eaPort2, size_t sizeDesc, unsigned dmaTag, unsigned flag, uint64_t *eaAllocatedJobDesc)";
  } else if (fnid == 0xf11fe0f1) {
    return "int cellSpursJobQueuePort2Create(CellSpursJobQueuePort2 *eaPort2, CellSpursJobQueue *eaJobQueue, uint64_t eaPort2, uint64_t eaJobQueue)";
  } else if (fnid == 0xc485d207) {
    return "int cellSpursJobQueuePort2Destroy(CellSpursJobQueuePort2 *eaPort2, uint64_t eaPort2)";
  } else if (fnid == 0x435bff07) {
    return "* cellSpursJobQueuePort2GetJobQueue(CellSpursJobQueuePort2 *eaPort2, uint64_t eaPort2)";
  } else if (fnid == 0xbfea28ab) {
    return "int cellSpursJobQueuePort2PushFlush(CellSpursJobQueuePort2 *eaPort2, unsigned flag, uint64_t eaPort2, unsigned dmaTag, unsigned flag)";
  } else if (fnid == 0xfc526b72) {
    return "int cellSpursJobQueuePort2PushSync(CellSpursJobQueuePort2 *eaPort2, unsigned tagMask, unsigned flag, uint64_t eaPort2, unsigned tagMask, unsigned dmaTag, unsigned flag)";
  } else if (fnid == 0xfacb3ced) {
    return "int cellSpursJobQueuePort2Sync(CellSpursJobQueuePort2 *eaPort2, unsigned flag, uint64_t eaPort2, unsigned flag)";
  } else if (fnid == 0x26fa81b4) {
    return "int cellSpursJobQueuePortFinalize(CellSpursJobQueuePort *pPort, uint64_t eaPort)";
  } else if (fnid == 0x90c88f84) {
    return "* cellSpursJobQueuePortGetJobQueue(CellSpursJobQueuePort *pPort, uint64_t eaPort)";
  } else if (fnid == 0x3d1294fc) {
    return "int cellSpursJobQueuePortInitialize(CellSpursJobQueuePort *pPort, CellSpursJobQueue *pJobQueue, bool isMTSafe, uint64_t eaPort, uint64_t eaJobQueue, unsigned isMTSafe)";
  } else if (fnid == 0xf5de6363) {
    return "int cellSpursJobQueuePortInitializeWithDescriptorBuffer(CellSpursJobQueuePort *pPort, CellSpursJobQueue *pJobQueue, CellSpursJobHeader *pBuffer, size_t sizeDescriptor, unsigned numEntries, bool isMTSafe, uint64_t eaPort, uint64_t eaJobQueue, uint64_t eaBuffer, size_t sizeDescriptor, unsigned numEntries, unsigned isMTSafe)";
  } else if (fnid == 0x634b1502) {
    return "int cellSpursJobQueuePortSync(CellSpursJobQueuePort *pPort, uint64_t eaPort)";
  } else if (fnid == 0x80a0264c) {
    return "int cellSpursJobQueuePortTrySync(CellSpursJobQueuePort *pPort, uint64_t eaPort)";
  } else if (fnid == 0x6c93ea18) {
    return "int cellSpursJobQueueSemaphoreAcquire(CellSpursJobQueueSemaphore *pSemaphore, unsigned int acquireCount, uint64_t eaSemaphore, unsigned int acquireCount)";
  } else if (fnid == 0x677027af) {
    return "int cellSpursJobQueueSemaphoreInitialize(CellSpursJobQueueSemaphore *pSemaphore, CellSpursJobQueue *pJobQueue, uint64_t eaSemaphore, uint64_t eaJobQueue)";
  } else if (fnid == 0x97409f67) {
    return "int cellSpursJobQueueSemaphoreTryAcquire(CellSpursJobQueueSemaphore *pSemaphore, unsigned int acquireCount, uint64_t eaSemaphore, unsigned int acquireCount)";
  } else if (fnid == 0x915455b3) {
    return "int cellSpursJobQueueSendSignal(CellSpursJobQueueWaitingJob *pWaitingJob, uint64_t eaWaitingJob)";
  } else if (fnid == 0x13671514) {
    return "int cellSpursJobQueueSetWaitingMode(CellSpursJobQueue *JobQueue, unsigned mode)";
  } else if (fnid == 0x93248b92) {
    return "int cellSpursJobQueueUnsetExceptionEventHandler(CellSpursJobQueue *jobQueue)";
  } else if (fnid == 0x8ce4cffa) {
    return "int cellSpursJoinJobQueue(CellSpursJobQueue *JobQueue, int *exitCode)";
  } else if (fnid == 0x8c97a96c) {
    return "int cellSpursShutdownJobQueue(CellSpursJobQueue *JobQueue)";
  } else if (fnid == 0xae6eb491) {
    return "int cellSslCertGetIssuerName(const CellSslCert sslCert, const CellSslCertName *certName)";
  } else if (fnid == 0x5e9253ca) {
    return "int cellSslCertGetMd5Fingerprint(const CellSslCert sslCert, const uint8_t *buf, uint32_t *plen)";
  } else if (fnid == 0x766d3ca1) {
    return "int cellSslCertGetNameEntryCount(const CellSslCertName certName, uint32_t *entryCount)";
  } else if (fnid == 0x006c4900) {
    return "int cellSslCertGetNameEntryInfo(const CellSslCertName certName, uint32_t entryNum, const char **oidName, const uint8_t **value, size_t *valueLength, int32_t flag)";
  } else if (fnid == 0x218b64da) {
    return "int cellSslCertGetNotAfter(const CellSslCert sslCert, CellRtcTick *limit)";
  } else if (fnid == 0x31d9ba8d) {
    return "int cellSslCertGetNotBefore(const CellSslCert sslCert, CellRtcTick *begin)";
  } else if (fnid == 0xf8206492) {
    return "int cellSslCertGetPublicKey(const CellSslCert sslCert, const uint8_t **sboData, size_t *sboLength)";
  } else if (fnid == 0x033c4905) {
    return "int cellSslCertGetRsaPublicKeyExponent(const CellSslCert sslCert, const uint8_t **sboData, size_t *sboLength)";
  } else if (fnid == 0x8e505175) {
    return "int cellSslCertGetRsaPublicKeyModulus(const CellSslCert sslCert, const uint8_t **sboData, size_t *sboLength)";
  } else if (fnid == 0x7b689ebc) {
    return "int cellSslCertGetSerialNumber(const CellSslCert sslCert, const uint8_t **sboData, size_t *sboLength)";
  } else if (fnid == 0x32c61bdf) {
    return "int cellSslCertGetSubjectName(const CellSslCert sslCert, const CellSslCertName *certName)";
  } else if (fnid == 0x571afaca) {
    return "int cellSslCertificateLoader(uint64_t flag, char *buffer, size_t size, size_t *required)";
  } else if (fnid == 0x1650aea4) {
    return "int cellSslEnd(void)";
  } else if (fnid == 0xfb02c9d2) {
    return "int cellSslInit(void *pool, size_t poolSize)";
  } else if (fnid == 0xaee1e0c2) {
    return "int32_t cellSubDisplayAudioOutBlocking(int groupId, void* pvData, int samples)";
  } else if (fnid == 0x5468d6b0) {
    return "int32_t cellSubDisplayAudioOutNonBlocking(int groupId, void* pvData, int samples)";
  } else if (fnid == 0x551d80a5) {
    return "int32_t cellSubDisplayEnd(void)";
  } else if (fnid == 0xe2485f79) {
    return "int32_t cellSubDisplayGetPeerList(int groupId, CellSubDisplayPeerInfo* pInfo, int* pNum)";
  } else if (fnid == 0x8a264d71) {
    return "int32_t cellSubDisplayGetPeerNum(int groupId)";
  } else if (fnid == 0x6595ce22) {
    return "int32_t cellSubDisplayGetRequiredMemory(CellSubDisplayParam* pParam)";
  } else if (fnid == 0x938ac642) {
    return "int32_t cellSubDisplayGetVideoBuffer(int groupId, void** ppVideoBuf, size_t* pSize)";
  } else if (fnid == 0xf9a7e8a5) {
    return "int32_t cellSubDisplayInit(CellSubDisplayParam* pParam, sys_memory_container_t container)";
  } else if (fnid == 0xa5bccb47) {
    return "int32_t cellSubDisplayStart(void)";
  } else if (fnid == 0x6d85ddb3) {
    return "int32_t cellSubDisplayStop(void)";
  } else if (fnid == 0x07254fda) {
    return "int cellSyncBarrierInitialize(CellSyncBarrier *barrier, uint16_t total_count, uint64_t barrier, uint16_t total_count, unsigned int tag)";
  } else if (fnid == 0xf06a6415) {
    return "int cellSyncBarrierNotify(CellSyncBarrier *barrier, uint64_t barrier)";
  } else if (fnid == 0x268edd6d) {
    return "int cellSyncBarrierTryNotify(CellSyncBarrier *barrier, uint64_t barrier)";
  } else if (fnid == 0x6c272124) {
    return "int cellSyncBarrierTryWait(CellSyncBarrier *barrier, uint64_t barrier)";
  } else if (fnid == 0x35f21355) {
    return "int cellSyncBarrierWait(CellSyncBarrier *barrier, uint64_t barrier)";
  } else if (fnid == 0x2af0c515) {
    return "int cellSyncLFQueueClear(CellSyncLFQueue *ea, uint64_t ea)";
  } else if (fnid == 0xe18c273c) {
    return "int cellSyncLFQueueDepth(CellSyncLFQueue *ea, unsigned int *depth, uint64_t ea, unsigned int *depth)";
  } else if (fnid == 0xd59aa307) {
    return "int cellSyncLFQueueGetDirection(CellSyncLFQueue *ea, CellSyncLFQueueDirection *direction, uint64_t ea, CellSyncLFQueueDirection *direction)";
  } else if (fnid == 0x0c7cb9f7) {
    return "int cellSyncLFQueueGetEntrySize(CellSyncLFQueue *ea, unsigned int *entry_size, uint64_t ea, unsigned int *entry_size)";
  } else if (fnid == 0xaa355278) {
    return "int cellSyncLFQueueInitialize(CellSyncLFQueue *ea, unsigned int depth, CellSyncQueueDirection direction, void *eaSignal, uint64_t ea, unsigned int depth, CellSyncQueueDirection direction, uint64_t eaSignal)";
  } else if (fnid == 0x167ea63e) {
    return "int cellSyncLFQueueSize(CellSyncLFQueue *ea, unsigned int *size, uint64_t ea, unsigned int *size)";
  } else if (fnid == 0xa9072dee) {
    return "int cellSyncMutexInitialize(CellSyncMutex *mutex, uint64_t mutex, unsigned int tag)";
  } else if (fnid == 0x1bb675c2) {
    return "int cellSyncMutexLock(CellSyncMutex *mutex, uint64_t mutex)";
  } else if (fnid == 0xd06918c4) {
    return "void cellSyncMutexTryLock(CellSyncMutex *mutex, uint64_t mutex)";
  } else if (fnid == 0x91f2b7b0) {
    return "int cellSyncMutexUnlock(CellSyncMutex *mutex, uint64_t mutex)";
  } else if (fnid == 0xa5362e73) {
    return "int cellSyncQueueClear(CellSyncQueue *queue, uint64_t queue)";
  } else if (fnid == 0x3929948d) {
    return "int cellSyncQueueInitialize(CellSyncQueue *queue, void *buffer, uint32_t size, uint32_t depth, uint64_t queue, uint64_t buffer, uint32_t size, uint32_t depth, uint32_t tag)";
  } else if (fnid == 0x48154c9b) {
    return "int cellSyncQueuePeek(CellSyncQueue *queue, void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0x4da6d7e0) {
    return "int cellSyncQueuePop(CellSyncQueue *queue, void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0x5ae841e5) {
    return "int cellSyncQueuePush(CellSyncQueue *queue, const void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0x4da349b2) {
    return "int cellSyncQueueSize(CellSyncQueue *queue, uint64_t queue)";
  } else if (fnid == 0x68af923c) {
    return "int cellSyncQueueTryPeek(CellSyncQueue *queue, void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0xa58df87f) {
    return "int cellSyncQueueTryPop(CellSyncQueue *queue, void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0x705985cd) {
    return "int cellSyncQueueTryPush(CellSyncQueue *queue, const void *buffer, uint64_t queue, void *buffer, unsigned int tag)";
  } else if (fnid == 0xfc48b03f) {
    return "int cellSyncRwmInitialize(CellSyncRwm *rwm, void *buffer, uint32_t buffer_size, uint64_t rwm, uint64_t buffer, uint32_t buffer_size, unsigned int tag)";
  } else if (fnid == 0xcece771f) {
    return "int cellSyncRwmRead(CellSyncRwm *rwm, void *buffer)";
  } else if (fnid == 0xa6669751) {
    return "int cellSyncRwmTryRead(CellSyncRwm *rwm, void *buffer)";
  } else if (fnid == 0xba5bee48) {
    return "int cellSyncRwmTryWrite(CellSyncRwm *rwm, void *buffer, uint64_t rwm, void *buffer, unsigned int tag)";
  } else if (fnid == 0xed773f5f) {
    return "int cellSyncRwmWrite(CellSyncRwm *rwm, void *buffer, uint64_t rwm, void *buffer, unsigned int tag)";
  } else if (fnid == 0x5b1e4d7a) {
    return "int cellSync2CondEstimateBufferSize(const CellSync2CondAttribute* attr, size_t* bufferSize)";
  } else if (fnid == 0x63062249) {
    return "int cellSync2CondFinalize(CellSync2Cond* cond)";
  } else if (fnid == 0x58be9a0f) {
    return "int cellSync2CondInitialize(CellSync2Cond* cond, CellSync2Mutex* mutex, void* buffer, const CellSync2CondAttribute* attr)";
  } else if (fnid == 0x871af804) {
    return "int cellSync2CondSignal(CellSync2Cond* cond, const CellSync2ThreadConfig* config, uint64_t eaCond, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x8aae07c2) {
    return "int cellSync2CondSignalAll(CellSync2Cond* cond, const CellSync2ThreadConfig* config, uint64_t eaCond, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0xbc96d751) {
    return "int cellSync2CondWait(CellSync2Cond* cond, const CellSync2ThreadConfig* config, uint64_t eaCond, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0xd51bfae7) {
    return "int cellSync2MutexEstimateBufferSize(const CellSync2MutexAttribute* attr, size_t* bufferSize)";
  } else if (fnid == 0x27f2d61c) {
    return "int cellSync2MutexFinalize(CellSync2Mutex* mutex)";
  } else if (fnid == 0xeb81a467) {
    return "int cellSync2MutexInitialize(CellSync2Mutex* mutex, void* buffer, const CellSync2MutexAttribute* attr)";
  } else if (fnid == 0xa400d82e) {
    return "int cellSync2MutexLock(CellSync2Mutex* mutex, const CellSync2ThreadConfig* config, uint64_t eaMutex, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0xa69c749c) {
    return "int cellSync2MutexTryLock(CellSync2Mutex* mutex, const CellSync2ThreadConfig* config, uint64_t eaMutex, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x0080fe88) {
    return "int cellSync2MutexUnlock(CellSync2Mutex* mutex, const CellSync2ThreadConfig* config, uint64_t eaMutex, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0xc08cc0f9) {
    return "int cellSync2QueueEstimateBufferSize(const CellSync2QueueAttribute* attr, size_t* bufferSize)";
  } else if (fnid == 0x6af85cdf) {
    return "int cellSync2QueueFinalize(CellSync2Queue* queue)";
  } else if (fnid == 0xf0e1471c) {
    return "int cellSync2QueueGetDepth(CellSync2Queue* queue, unsigned int* depth, uint64_t eaQueue, unsigned int* depth)";
  } else if (fnid == 0x12f0a27d) {
    return "int cellSync2QueueGetSize(CellSync2Queue* queue, unsigned int* size, uint64_t eaQueue, unsigned int* size)";
  } else if (fnid == 0xf125e044) {
    return "int cellSync2QueueInitialize(CellSync2Queue* queue, void* buffer, const CellSync2QueueAttribute* attr)";
  } else if (fnid == 0xd83ab0c9) {
    return "int cellSync2QueuePop(CellSync2Queue* queue, void* buffer, const CellSync2ThreadConfig* config, uint64_t eaQueue, void* buffer, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x7d967d91) {
    return "int cellSync2QueuePush(CellSync2Queue* queue, const void* data, const CellSync2ThreadConfig* config, uint64_t eaQueue, const void* data, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x0c9a0ea9) {
    return "int cellSync2QueueTryPop(CellSync2Queue* queue, void* buffer, const CellSync2ThreadConfig* config, uint64_t eaQueue, void* buffer, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x7fd479fe) {
    return "int cellSync2QueueTryPush(CellSync2Queue* queue, unsigned int numData, const CellSync2ThreadConfig* config, uint64_t eaQueue, const void* data, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0xd1b0d146) {
    return "int cellSync2SemaphoreAcquire(CellSync2Semaphore* semaphore, unsigned int count, const CellSync2ThreadConfig* config, uint64_t eaSemaphore, unsigned int count, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x74c2780f) {
    return "int cellSync2SemaphoreEstimateBufferSize(const CellSync2SemaphoreAttribute* attr, size_t* bufferSize)";
  } else if (fnid == 0x164843a7) {
    return "int cellSync2SemaphoreFinalize(CellSync2Semaphore* semaphore)";
  } else if (fnid == 0x4e2ee031) {
    return "int cellSync2SemaphoreGetCount(CellSync2Semaphore* semaphore, int* count, uint64_t eaSemaphore, int* count)";
  } else if (fnid == 0xc5dee254) {
    return "int cellSync2SemaphoreInitialize(CellSync2Semaphore* semaphore, void* buffer, int initialValue, const CellSync2SemaphoreAttribute* attr)";
  } else if (fnid == 0x0c2983ac) {
    return "int cellSync2SemaphoreRelease(CellSync2Semaphore* semaphore, unsigned int count, const CellSync2ThreadConfig* config, uint64_t eaSemaphore, unsigned int count, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x5e4b0f87) {
    return "int cellSync2SemaphoreTryAcquire(CellSync2Semaphore* semaphore, unsigned int count, const CellSync2ThreadConfig* config, uint64_t eaSemaphore, unsigned int count, const CellSync2ThreadConfig* config, unsigned int dmaTag)";
  } else if (fnid == 0x08db2adf) {
    return "int cellSysconfBtGetDeviceList(CellSysconfBtDeviceList * deviceList)";
  } else if (fnid == 0x96c07adf) {
    return "int cellSysmoduleFinalize(void)";
  } else if (fnid == 0x63ff6ff9) {
    return "int cellSysmoduleInitialize(void)";
  } else if (fnid == 0x5a59e258) {
    return "int cellSysmoduleIsLoaded(uint16_t id)";
  } else if (fnid == 0x32267a31) {
    return "int cellSysmoduleLoadModule(uint16_t id)";
  } else if (fnid == 0xa193143c) {
    return "int cellSysmoduleSetMemcontainer(sys_memory_container_t ct)";
  } else if (fnid == 0x112a5ee9) {
    return "int cellSysmoduleUnloadModule(uint16_t id)";
  } else if (fnid == 0x4692ab35) {
    return "int cellAudioOutConfigure(uint32_t waitForEvent)";
  } else if (fnid == 0xed5d96af) {
    return "int cellAudioOutGetConfiguration(uint32_t audioOut, CellAudioOutConfiguration *config, CellAudioOutOption *option)";
  } else if (fnid == 0x7663e368) {
    return "int cellAudioOutGetDeviceInfo(uint32_t audioOut, uint32_t deviceIndex, CellAudioOutDeviceInfo *info)";
  } else if (fnid == 0xe5e2b09d) {
    return "int cellAudioOutGetNumberOfDevice(uint32_t audioOut)";
  } else if (fnid == 0xc01b4e7c) {
    return "int cellAudioOutGetSoundAvailability(uint32_t audioOut, uint32_t type, uint32_t fs, uint32_t option)";
  } else if (fnid == 0x2beac488) {
    return "int cellAudioOutGetSoundAvailability2(uint32_t audioOut, uint32_t type, uint32_t fs, uint32_t ch, uint32_t option)";
  } else if (fnid == 0xf4e3caa0) {
    return "int cellAudioOutGetState(uint32_t audioOut, uint32_t deviceIndex, CellAudioOutState *state)";
  } else if (fnid == 0xc96e89e9) {
    return "int cellAudioOutSetCopyControl(uint32_t audioOut, uint32_t control)";
  } else if (fnid == 0x62b0f803) {
    return "int cellMsgDialogAbort(void)";
  } else if (fnid == 0x20543730) {
    return "int cellMsgDialogClose(float delayTime)";
  } else if (fnid == 0xf81eca25) {
    return "int cellMsgDialogOpen(unsigned int type, const char *msgString, void *userData, void *extParam)";
  } else if (fnid == 0x7603d3db) {
    return "int cellMsgDialogOpen2(unsigned int type, const char *msgString, void *userData, void *extParam)";
  } else if (fnid == 0x3e22cb4b) {
    return "int cellMsgDialogOpenErrorCode(unsigned int errorCode, void *userData, void *extParam)";
  } else if (fnid == 0x94862702) {
    return "int cellMsgDialogProgressBarInc(unsigned int progressBarIndex, unsigned int delta)";
  } else if (fnid == 0x7bc2c8a8) {
    return "int cellMsgDialogProgressBarReset(unsigned int progressBarIndex)";
  } else if (fnid == 0x9d6af72a) {
    return "int cellMsgDialogProgressBarSetMsg(unsigned int progressBarIndex, const char *msgString)";
  } else if (fnid == 0xb6d84526) {
    return "int cellOskDialogAbort(void)";
  } else if (fnid == 0x7f21c918) {
    return "void cellOskDialogAddSupportLanguage(uint32_t supportLanguage)";
  } else if (fnid == 0x41f20828) {
    return "void cellOskDialogDisableDimmer(void)";
  } else if (fnid == 0x1d99c3ee) {
    return "void cellOskDialogGetInputText(CellOskDialogCallbackReturnParam *OutputInfo)";
  } else if (fnid == 0x35beade0) {
    return "void cellOskDialogGetSize(uint16_t *width, uint16_t *height, CellOskDialogType dialogType)";
  } else if (fnid == 0x7fcfc915) {
    return "int cellOskDialogLoadAsync(sys_memory_container_t container, const CellOskDialogParam *dialogParam, const CellOskDialogInputFieldInfo *inputFieldInfo)";
  } else if (fnid == 0xd3790a86) {
    return "void cellOskDialogSetDeviceMask(uint32_t deviceMask)";
  } else if (fnid == 0xb53c54fa) {
    return "void cellOskDialogSetKeyLayoutOption(uint32_t option)";
  } else if (fnid == 0xf0ec3ccc) {
    return "void cellOskDialogSetLayoutMode(int32_t layoutMode)";
  } else if (fnid == 0x53e39df3) {
    return "void cellOskDialogSetSeparateWindowOption(CellOskDialogSeparateWindowOption *windowOption)";
  } else if (fnid == 0x3d1e1931) {
    return "int cellOskDialogUnloadAsync(CellOskDialogCallbackReturnParam *OutputInfo)";
  } else if (fnid == 0xfbd5c856) {
    return "int cellSaveDataAutoLoad2(const char *dirName, unsigned int errDialog, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x8b7ed64b) {
    return "int cellSaveDataAutoSave2(unsigned int version, const char *dirName, unsigned int errDialog, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xedadd797) {
    return "int cellSaveDataDelete2(sys_memory_container_t container)";
  } else if (fnid == 0xe7fa820b) {
    return "void cellSaveDataEnableOverlay(int enable)";
  } else if (fnid == 0xced17573) {
    return "int cellSaveDataFixedDelete(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x2a8eada2) {
    return "int cellSaveDataFixedLoad2(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x2aae9ef5) {
    return "int cellSaveDataFixedSave2(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x21425307) {
    return "int cellSaveDataListAutoLoad(unsigned int errDialog, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x4dd03a4e) {
    return "int cellSaveDataListAutoSave(unsigned int version, unsigned int errDialog, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x1dfbfdd6) {
    return "int cellSaveDataListLoad2(unsigned int version, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x2de0d663) {
    return "int cellSaveDataListSave2(unsigned int version, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xcdc6aefd) {
    return "int cellSaveDataUserAutoLoad(unsigned int version, const char *dirName, unsigned int errDialog, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x52aac4fa) {
    return "int cellSaveDataUserAutoSave(unsigned int version, const char *dirName, unsigned int errDialog, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x8b8a2f48) {
    return "int cellSaveDataUserFixedDelete(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x6e7264ed) {
    return "int cellSaveDataUserFixedLoad(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x40b34847) {
    return "int cellSaveDataUserFixedSave(CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x248bd1d8) {
    return "int cellSaveDataUserListAutoLoad(unsigned int version, unsigned int errDialog, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x0e091c36) {
    return "int cellSaveDataUserListAutoSave(unsigned int version, unsigned int errDialog, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x39dd8425) {
    return "int cellSaveDataUserListLoad(unsigned int version, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x0f03cfb0) {
    return "int cellSaveDataUserListSave(unsigned int version, CellSaveDataSetList *setList, , sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xabc3cd2c) {
    return "int cellStorageDataExport(unsigned int version, char *srcHddFile, char *dstMediaDir, CellStorageDataSetParam *param, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x918288fb) {
    return "int cellStorageDataImport(unsigned int version, char *srcMediaFile, char *dstHddDir, CellStorageDataSetParam *param, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x27ac51e4) {
    return "int cellStorageDataImportMove(unsigned int version, char *srcMediaFile, char *dstHddDir, CellStorageDataSetParam *param, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x744c1544) {
    return "int cellSysCacheClear(void )";
  } else if (fnid == 0x1e7bff94) {
    return "int cellSysCacheMount(CellSysCacheParam *param)";
  } else if (fnid == 0x76948bfc) {
    return "int cellSysconfAbort(void)";
  } else if (fnid == 0xb2b6cdd0) {
    return "int cellSysconfOpen(unsigned int type, sys_memory_container_t id)";
  } else if (fnid == 0x189a74da) {
    return "int cellSysutilCheckCallback(void)";
  } else if (fnid == 0xcfdd8e87) {
    return "void cellSysutilDisableBgmPlayback(void)";
  } else if (fnid == 0xa36335a5) {
    return "void cellSysutilDisableBgmPlaybackEx(CellSysutilBgmPlaybackExtraParam *param)";
  } else if (fnid == 0x220894e3) {
    return "void cellSysutilEnableBgmPlayback(void)";
  } else if (fnid == 0xac58ad2b) {
    return "void cellSysutilEnableBgmPlaybackEx(CellSysutilBgmPlaybackExtraParam *param)";
  } else if (fnid == 0xa11552f6) {
    return "void cellSysutilGetBgmPlaybackStatus(CellSysutilBgmPlaybackStatus *status)";
  } else if (fnid == 0x6cfd856f) {
    return "void cellSysutilGetBgmPlaybackStatus2(CellSysutilBgmPlaybackStatus2 *status)";
  } else if (fnid == 0x40e895d3) {
    return "int cellSysutilGetSystemParamInt(int id, int *value)";
  } else if (fnid == 0x938013a0) {
    return "int cellSysutilGetSystemParamString(int id, char *buf, unsigned int bufsize)";
  } else if (fnid == 0x9d98afa0) {
    return "int cellSysutilRegisterCallback(int slot, void *userdata)";
  } else if (fnid == 0xf3dbf5a7) {
    return "void cellSysutilSetBgmPlaybackExtraParam(CellSysutilBgmPlaybackExtraParam *param)";
  } else if (fnid == 0x02ff3c1b) {
    return "int cellSysutilUnregisterCallback(int slot)";
  } else if (fnid == 0x0bae8772) {
    return "int cellVideoOutConfigure(uint32_t waitForEvent)";
  } else if (fnid == 0xcfdf24bb) {
    return "int cellVideoOutDebugSetMonitorType(uint32_t monitorType)";
  } else if (fnid == 0x15b0b0cd) {
    return "int cellVideoOutGetConfiguration(uint32_t videoOut, CellVideoOutConfiguration *config, CellVideoOutOption *option)";
  } else if (fnid == 0x1e930eef) {
    return "int cellVideoOutGetDeviceInfo(uint32_t videoOut, uint32_t deviceIndex, CellVideoOutDeviceInfo *info)";
  } else if (fnid == 0x75bbb672) {
    return "int cellVideoOutGetNumberOfDevice(uint32_t videoOut)";
  } else if (fnid == 0xe558748d) {
    return "int cellVideoOutGetResolution(CellVideoOutResolution *resolution)";
  } else if (fnid == 0xa322db75) {
    return "int cellVideoOutGetResolutionAvailability(uint32_t videoOut, uint32_t resolutionId, uint32_t aspect, uint32_t option)";
  } else if (fnid == 0x887572d5) {
    return "int cellVideoOutGetState(CellVideoOutState *state)";
  } else if (fnid == 0x7fb3c6a5) {
    return "int cellWebBrowserConfig2(CellWebBrowserConfig2* const config, int version)";
  } else if (fnid == 0x1f6629e4) {
    return "int cellWebBrowserConfigSetErrorHook2(void* usrdata)";
  } else if (fnid == 0x1a91874b) {
    return "int cellWebBrowserConfigSetFullScreen2(int full)";
  } else if (fnid == 0xe22ed55d) {
    return "int cellWebBrowserConfigSetFunction2(int funcset)";
  } else if (fnid == 0xfe669845) {
    return "int cellWebBrowserConfigSetHeapSize2(int size)";
  } else if (fnid == 0x93c523c6) {
    return "int cellWebBrowserConfigSetNotifyHook2(void* usrdata)";
  } else if (fnid == 0xee7528f3) {
    return "int cellWebBrowserConfigSetRequestHook2(void* usrdata)";
  } else if (fnid == 0xac16777e) {
    return "int cellWebBrowserConfigSetStatusHook2(void* usrdata)";
  } else if (fnid == 0x619b1427) {
    return "int cellWebBrowserConfigSetTabCount2(int tab_count)";
  } else if (fnid == 0xa9a439e0) {
    return "int cellWebBrowserConfigSetUnknownMIMETypeHook2(void* usrdata)";
  } else if (fnid == 0xd7a617f5) {
    return "int cellWebBrowserConfigSetViewCondition2(int cond)";
  } else if (fnid == 0xa9b62ac8) {
    return "int cellWebBrowserConfigSetViewRect2(float resolution_factor)";
  } else if (fnid == 0xa5f12145) {
    return "int cellWebBrowserCreate2(const CellWebBrowserConfig2* const config, const char* url)";
  } else if (fnid == 0xe8dee79c) {
    return "int cellWebBrowserDestroy2(void)";
  } else if (fnid == 0x6d087930) {
    return "int cellWebBrowserEstimate2(const CellWebBrowserConfig2* const config, int* memsize)";
  } else if (fnid == 0x749c9b5f) {
    return "int cellWebBrowserInitialize(sys_memory_container_t mem_handle)";
  } else if (fnid == 0x9fb97b10) {
    return "int cellWebBrowserNavigate2(const char* url)";
  } else if (fnid == 0xc8971db5) {
    return "int cellWebBrowserSetLocalContentsAdditionalTitleID(const char* titleID)";
  } else if (fnid == 0x6dfff31d) {
    return "int cellWebBrowserSetSystemCallbackUsrdata(void* usrdata)";
  } else if (fnid == 0x93ced48d) {
    return "void cellWebBrowserShutdown(void)";
  } else if (fnid == 0x24644561) {
    return "int cellWebBrowserWakeupWithGameExit(const char* url, void* usrdata)";
  } else if (fnid == 0x9e67e0dd) {
    return "int32_t cellSysutilApGetRequiredMemSize(void)";
  } else if (fnid == 0x90c2bb19) {
    return "int32_t cellSysutilApOff(void)";
  } else if (fnid == 0x3343824c) {
    return "int32_t cellSysutilApOn(CellSysutilApParam *param, sys_memory_container_t container)";
  } else if (fnid == 0xb81b9777) {
    return "int cellSysutilAvc2EnumPlayers(int *players_num)";
  } else if (fnid == 0x2f280883) {
    return "int cellSysutilAvc2EstimateMemoryContainerSize(const CellSysutilAvc2InitParam *initparam, uint32_t *size)";
  } else if (fnid == 0x1be2b4e0) {
    return "int cellSysutilAvc2GetAttribute(CellSysutilAvc2Attribute *attr)";
  } else if (fnid == 0x02c5417a) {
    return "int cellSysutilAvc2GetPlayerInfo(const SceNpMatching2RoomMemberId *players_id, *players_info)";
  } else if (fnid == 0x5f3811f8) {
    return "int cellSysutilAvc2GetPlayerVoiceMuting(uint8_t *muting)";
  } else if (fnid == 0xe40e3dfc) {
    return "void cellSysutilAvc2GetScreenShowStatus(uint8_t* visible)";
  } else if (fnid == 0xa9f5b75c) {
    return "int cellSysutilAvc2GetSpeakerMuting(uint8_t *muting)";
  } else if (fnid == 0x0f5a2afb) {
    return "void cellSysutilAvc2GetVideoMuting(const uint8_t* muting)";
  } else if (fnid == 0xdf2ed367) {
    return "int cellSysutilAvc2GetVoiceMuting(uint8_t *muting)";
  } else if (fnid == 0x103d6b46) {
    return "int cellSysutilAvc2GetWindowAttribute(CellSysutilAvc2WindowAttribute *attr)";
  } else if (fnid == 0xfc2873a9) {
    return "void cellSysutilAvc2GetWindowPosition(float* x, float* y, float* z)";
  } else if (fnid == 0x82ced772) {
    return "void cellSysutilAvc2GetWindowShowStatus(uint8_t* visible)";
  } else if (fnid == 0x8a40a618) {
    return "void cellSysutilAvc2GetWindowSize(float* width, float* height)";
  } else if (fnid == 0xb856b63f) {
    return "void cellSysutilAvc2GetWindowString(char* string, uint8_t* len)";
  } else if (fnid == 0x89456724) {
    return "int cellSysutilAvc2InitParam(const uint16_t version, CellSysutilAvc2InitParam *option)";
  } else if (fnid == 0x4c4b9665) {
    return "int cellSysutilAvc2IsCameraAttached(uint8_t *status)";
  } else if (fnid == 0xa26aa437) {
    return "int cellSysutilAvc2IsMicAttached(uint8_t *status)";
  } else if (fnid == 0x02dc41ee) {
    return "int cellSysutilAvc2JoinChat(const SceNpMatching2RoomId *room_id, CellSysutilAvc2EventId *eventId, CellSysutilAvc2EventParam *eventParam)";
  } else if (fnid == 0x712d51d6) {
    return "int cellSysutilAvc2JoinChatRequest(const SceNpMatching2RoomId *room_id)";
  } else if (fnid == 0xbf022284) {
    return "int cellSysutilAvc2LeaveChat(CellSysutilAvc2EventId *eventId, CellSysutilAvc2EventParam *eventParam)";
  } else if (fnid == 0xc6c93d62) {
    return "int cellSysutilAvc2Load(const sys_memory_container_t container, void *user_data, const CellSysutilAvc2InitParam *init_param)";
  } else if (fnid == 0x1d73ab8c) {
    return "int cellSysutilAvc2LoadAsync(const sys_memory_container_t container, void *user_data, const CellSysutilAvc2InitParam *init_param)";
  } else if (fnid == 0x55d7bbfd) {
    return "void cellSysutilAvc2MicRead(void* ptr, uint32_t* size)";
  } else if (fnid == 0xccf0aeff) {
    return "int cellSysutilAvc2SetAttribute(const CellSysutilAvc2Attribute *attr)";
  } else if (fnid == 0x31fc8b92) {
    return "int cellSysutilAvc2SetPlayerVoiceMuting(const uint8_t muting)";
  } else if (fnid == 0xc35ed665) {
    return "int cellSysutilAvc2SetSpeakerMuting(const uint8_t muting)";
  } else if (fnid == 0x207621a8) {
    return "int cellSysutilAvc2SetSpeakerVolumeLevel(const float level)";
  } else if (fnid == 0x8c2f5be3) {
    return "int cellSysutilAvc2SetStreamPriority(const uint8_t priority)";
  } else if (fnid == 0x2fc0ab58) {
    return "void cellSysutilAvc2SetVideoMuting(const uint8_t muting)";
  } else if (fnid == 0x14937714) {
    return "int cellSysutilAvc2SetVoiceMuting(const uint8_t muting)";
  } else if (fnid == 0x7a69ecc1) {
    return "int cellSysutilAvc2SetWindowAttribute(const CellSysutilAvc2WindowAttribute *attr)";
  } else if (fnid == 0x3c8c827c) {
    return "void cellSysutilAvc2SetWindowPosition(const float x, const float y, const float z)";
  } else if (fnid == 0xaee75751) {
    return "void cellSysutilAvc2SetWindowSize(const float width, const float height)";
  } else if (fnid == 0x225142bd) {
    return "void cellSysutilAvc2SetWindowString(const char* string)";
  } else if (fnid == 0x65bf9ea3) {
    return "int cellAudioInGetAvailableDeviceInfo(uint32_t count)";
  } else if (fnid == 0x3d5730ce) {
    return "int cellAudioInGetDeviceInfo(uint32_t deviceNumber, uint32_t deviceIndex, CellAudioInDeviceInfo *info)";
  } else if (fnid == 0xeb6c50fb) {
    return "int cellAudioInSetDeviceMode(uint32_t deviceMode)";
  } else if (fnid == 0xfa6bcc17) {
    return "int cellAudioInUnregisterDevice(uint32_t deviceNumber)";
  } else if (fnid == 0xc3273d9b) {
    return "int cellAudioOutGetAvailableDeviceInfo(uint32_t count)";
  } else if (fnid == 0x18d0ada6) {
    return "int cellAudioOutGetDeviceInfo2(uint32_t deviceNumber, uint32_t deviceIndex, CellAudioOutDeviceInfo2 *info)";
  } else if (fnid == 0xc7087631) {
    return "int cellAudioOutRegisterDevice(uint64_t deviceType, const char *name, CellAudioOutRegistrationOption *option, CellAudioOutDeviceConfiguration *config)";
  } else if (fnid == 0xe4645af8) {
    return "int cellAudioOutSetDeviceMode(uint32_t deviceMode)";
  } else if (fnid == 0x0bddef7d) {
    return "int cellAudioOutUnregisterDevice(uint32_t deviceNumber)";
  } else if (fnid == 0x4ec8c141) {
    return "int cellVideoOutConvertCursorColor(uint32_t videoOut, int displaybuffer_format, float gamma, int source_buffer_format, void *src_addr, uint32_t *dest_addr, int num)";
  } else if (fnid == 0x655a0364) {
    return "int cellVideoOutGetGamma(uint32_t videoOut, float *gamma)";
  } else if (fnid == 0xfaa275a4) {
    return "int cellVideoOutGetScreenSize(uint32_t videoOut, float *screenSize)";
  } else if (fnid == 0xc7020f62) {
    return "int cellVideoOutSetGamma(uint32_t videoOut, float gamma)";
  } else if (fnid == 0x571dc686) {
    return "int cellSysutilGetLicenseArea(void)";
  } else if (fnid == 0x074dbb39) {
    return "int32_t cellUsbdAllocateMemory(void **ptr, size_t size)";
  } else if (fnid == 0xac77eb78) {
    return "void cellUsbdBulkTransfer(int32_t pipe_id, void *buf, int32_t len, CellUsbdDoneCallback done_cb, void *arg)";
  } else if (fnid == 0x9763e962) {
    return "void cellUsbdClosePipe(int32_t pipe_id)";
  } else if (fnid == 0x97cf128e) {
    return "void cellUsbdControlTransfer(int32_t pipe_id, UsbDeviceRequest *dr, void *buf, CellUsbdDoneCallback done_cb, void *arg)";
  } else if (fnid == 0x4e456e81) {
    return "int32_t cellUsbdFreeMemory(void *ptr)";
  } else if (fnid == 0xdb819e03) {
    return "void cellUsbdGetDeviceLocation(int32_t dev_id, unsigned char *location)";
  } else if (fnid == 0xbdbd2428) {
    return "int32_t cellUsbdGetDeviceSpeed(int32_t dev_id, uint8_t *speed)";
  } else if (fnid == 0x5de3af36) {
    return "void cellUsbdGetPrivateData(int32_t dev_id)";
  } else if (fnid == 0xd5263dea) {
    return "int32_t cellUsbdGetThreadPriority(int32_t thread_type)";
  } else if (fnid == 0x7a1b6eab) {
    return "void cellUsbdHSIsochronousTransfer(int32_t result, void *arg, int32_t pipe_id, CellUsbdHSIsochRequest *req, CellUsbdHSIsochDoneCallback done_cb, void *arg)";
  } else if (fnid == 0x0f411262) {
    return "void cellUsbdInterruptTransfer(int32_t pipe_id, void *buf, int32_t len, CellUsbdDoneCallback done_cb, void *arg)";
  } else if (fnid == 0xde58c4c2) {
    return "void cellUsbdIsochronousTransfer(int32_t result, void *arg, int32_t pipe_id, CellUsbdIsochRequest *req, CellUsbdIsochDoneCallback done_cb, void *arg)";
  } else if (fnid == 0x254289ac) {
    return "void cellUsbdOpenPipe(int32_t dev_id, UsbEndpointDescriptor *ed)";
  } else if (fnid == 0x7fe92c54) {
    return "void cellUsbdRegisterExtraLdd(CellUsbdLddOps *lddops, uint16_t id_vendor, uint16_t id_product)";
  } else if (fnid == 0xbd554bcb) {
    return "void cellUsbdRegisterExtraLdd2(CellUsbdLddOps *lddops, uint16_t id_vendor, uint16_t id_product_min, uint16_t id_product_max)";
  } else if (fnid == 0x359befba) {
    return "void cellUsbdRegisterLdd(CellUsbdLddOps *lddops)";
  } else if (fnid == 0x2fb08e1e) {
    return "void cellUsbdScanStaticDescriptor(int32_t dev_id, void *ptr, unsigned char type)";
  } else if (fnid == 0x63bfdb97) {
    return "void cellUsbdSetPrivateData(int32_t dev_id, void *priv)";
  } else if (fnid == 0x5c832bd7) {
    return "int32_t cellUsbdSetThreadPriority2(int32_t event_prio, int32_t usbd_prio, int32_t callback_prio)";
  } else if (fnid == 0x90460081) {
    return "void cellUsbdUnregisterExtraLdd(CellUsbdLddOps *lddops)";
  } else if (fnid == 0x64951ac7) {
    return "void cellUsbdUnregisterLdd(CellUsbdLddOps *lddops)";
  } else if (fnid == 0xabe090e3) {
    return "int cellUsbPspcmBind(int addr)";
  } else if (fnid == 0x17f42197) {
    return "int cellUsbPspcmBindAsync(int addr)";
  } else if (fnid == 0xf20df7fc) {
    return "int cellUsbPspcmCalcPoolSize(const CellUsbPspcmInitParam *pInitParam)";
  } else if (fnid == 0xa4a5ddb4) {
    return "int cellUsbPspcmCancelBind(int addr)";
  } else if (fnid == 0xe76e79ab) {
    return "int cellUsbPspcmCancelWaitData(int chIdx)";
  } else if (fnid == 0xfa07d320) {
    return "int cellUsbPspcmClose(int chIdx)";
  } else if (fnid == 0x0f7b3b6d) {
    return "int cellUsbPspcmEnd(void)";
  } else if (fnid == 0x97670a90) {
    return "int cellUsbPspcmGetAddr(void)";
  } else if (fnid == 0x657fcd36) {
    return "int cellUsbPspcmInit(const CellUsbPspcmInitParam *pInitParam)";
  } else if (fnid == 0xf9883d3b) {
    return "int cellUsbPspcmRecv(int chIdx, uint8_t *buf, size_t size, uint32_t mode)";
  } else if (fnid == 0x02955295) {
    return "int cellUsbPspcmRecvAsync(int chIdx, uint8_t *buf, size_t size, uint32_t mode)";
  } else if (fnid == 0xe3fbf64d) {
    return "int cellUsbPspcmRegister(CellUsbPspcmConnectFunc *pFunc)";
  } else if (fnid == 0xe68a65ac) {
    return "int cellUsbPspcmReset(int chIdx)";
  } else if (fnid == 0x4ef182dd) {
    return "int cellUsbPspcmResetAsync(int chIdx)";
  } else if (fnid == 0x7277d7c3) {
    return "int cellUsbPspcmSend(int chIdx, uint8_t *buf, size_t size, uint32_t mode)";
  } else if (fnid == 0x4af23efa) {
    return "int cellUsbPspcmSendAsync(int chIdx, uint8_t *buf, size_t size, uint32_t mode)";
  } else if (fnid == 0x7ff72b42) {
    return "int cellUsbPspcmUnregister(CellUsbPspcmConnectFunc *pFunc)";
  } else if (fnid == 0xb3516536) {
    return "void cellUserInfoEnableOverlay(int enable)";
  } else if (fnid == 0xc55e338b) {
    return "int cellUserInfoGetList(unsigned int *listNum, CellUserInfoUserList *listBuf, CellSysutilUserId *currentUserId)";
  } else if (fnid == 0x2b761140) {
    return "int cellUserInfoGetStat(CellUserInfoUserStat *stat)";
  } else if (fnid == 0x3097cc1c) {
    return "int cellUserInfoSelectUser_ListType(CellUserInfoTypeSet *setType, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x55123a25) {
    return "int cellUserInfoSelectUser_SetList(CellUserInfoListSet *setList, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0xc15be817) {
    return "int cellVideoExportFinalize(void *userdata)";
  } else if (fnid == 0x81296524) {
    return "int cellVideoExportFromFile(const char *srcHddDir, const char *srcHddFile, CellVideoExportSetParam *param, void *userdata)";
  } else if (fnid == 0x6a24cc70) {
    return "int cellVideoExportInitialize(unsigned int version, sys_memory_container_t container, void *userdata)";
  } else if (fnid == 0x2f457571) {
    return "int cellVideoExportInitialize2(unsigned int version, void *userdata)";
  } else if (fnid == 0x1bb79ff4) {
    return "int cellVideoExportProgress(void *userdata)";
  } else if (fnid == 0x122e0d0f) {
    return "int32_t cellVideoUploadInitialize(const CellVideoUploadParam *pParam, void *userdata&nbsp)";
  } else if (fnid == 0xae6a21d5) {
    return "int cellVoiceConnectIPortToOPort(uint32_t ips, uint32_t ops)";
  } else if (fnid == 0x2a01013e) {
    return "int cellVoiceCreateNotifyEventQueue(sys_event_queue_t *id, sys_ipc_key_t *key)";
  } else if (fnid == 0x2de54871) {
    return "int cellVoiceCreatePort(uint32_t *portId, const CellVoicePortParam *pArg)";
  } else if (fnid == 0x9f70c475) {
    return "int cellVoiceDeletePort(uint32_t portId)";
  } else if (fnid == 0x18d3df30) {
    return "int cellVoiceDisconnectIPortFromOPort(uint32_t ips, uint32_t ops)";
  } else if (fnid == 0xbef53a2b) {
    return "int cellVoiceGetBitRate(uint32_t portId, uint32_t *bitrate)";
  } else if (fnid == 0x474609e2) {
    return "int cellVoiceGetMuteFlag(uint32_t portId, uint16_t *bMuted)";
  } else if (fnid == 0xf629ed67) {
    return "int cellVoiceGetPortAttr(uint32_t portId, void *attrValue)";
  } else if (fnid == 0x54ac3519) {
    return "int cellVoiceGetPortInfo(uint32_t portId, CellVoiceBasePortInfo *pInfo)";
  } else if (fnid == 0xd6811aa7) {
    return "int cellVoiceGetSignalState(uint32_t portId, void *attrValue)";
  } else if (fnid == 0x762dc193) {
    return "int cellVoiceGetVolume(uint32_t portId, float *volume)";
  } else if (fnid == 0xc7cf1182) {
    return "int cellVoiceInit(CellVoiceInitParam *pArg)";
  } else if (fnid == 0xb1a2c38f) {
    return "int cellVoiceInitEx(CellVoiceInitParam *pArg)";
  } else if (fnid == 0x87c71b06) {
    return "int cellVoicePausePort(uint32_t portId)";
  } else if (fnid == 0x36472c57) {
    return "int cellVoiceReadFromOPort(uint32_t ops, void *data, uint32_t *size)";
  } else if (fnid == 0xdd000886) {
    return "int cellVoiceRemoveNotifyEventQueue(sys_ipc_key_t key)";
  } else if (fnid == 0xff0fa43a) {
    return "int cellVoiceResetPort(uint32_t portId)";
  } else if (fnid == 0x7bf17b15) {
    return "int cellVoiceResumePort(uint32_t portId)";
  } else if (fnid == 0x7e60adc6) {
    return "int cellVoiceSetBitRate(uint32_t portId)";
  } else if (fnid == 0xdde35a0c) {
    return "int cellVoiceSetMuteFlag(uint32_t portId, uint16_t bMuted)";
  } else if (fnid == 0xd4d80ea5) {
    return "int cellVoiceSetMuteFlagAll(uint16_t bMuted)";
  } else if (fnid == 0x35d84910) {
    return "int cellVoiceSetNotifyEventQueue(sys_ipc_key_t key, uint64_t source)";
  } else if (fnid == 0x9d0f4af1) {
    return "int cellVoiceSetPortAttr(uint32_t portId, void *attrValue)";
  } else if (fnid == 0xd5ae37d8) {
    return "int cellVoiceSetVolume(uint32_t portId, float volume)";
  } else if (fnid == 0x94d51f92) {
    return "int cellVoiceStartEx(CellVoiceStartParam *pArg)";
  } else if (fnid == 0x2f24fea3) {
    return "int cellVoiceUpdatePort(uint32_t portId, const CellVoicePortParam *pArg)";
  } else if (fnid == 0x3dad26e7) {
    return "int cellVoiceWriteToIPort(uint32_t ips, const void *data, uint32_t *size)";
  } else if (fnid == 0x30f0b5ab) {
    return "int cellVoiceWriteToIPortEx(uint32_t ips, const void *data, uint32_t *size, uint32_t numFrameLost)";
  } else if (fnid == 0xabb8cc3d) {
    return "int32_t cellVpostExec(const void *inPicBuff, const CellVpostCtrlParam *ctrlParam, void *outPicBuff, CellVpostPictureInfo *picInfo)";
  } else if (fnid == 0xcd33f3e2) {
    return "int32_t cellVpostOpen(const CellVpostCfgParam *cfgParam, const CellVpostResource *resource, CellVpostHandle *handle)";
  } else if (fnid == 0x40524325) {
    return "int32_t cellVpostOpenEx(const CellVpostCfgParam *cfgParam, const CellVpostResourceEx *resource, CellVpostHandle *handle)";
  } else if (fnid == 0x95e788c3) {
    return "int32_t cellVpostQueryAttr(const CellVpostCfgParam *cfgParam, CellVpostAttr *attr)";
  } else if (fnid == 0xafa99ead) {
    return "int32_t cellGemCalibrate(uint32_t gem_num)";
  } else if (fnid == 0x9b9714a4) {
    return "int32_t cellGemClearStatusFlags(int gem_num, uint64_t mask)";
  } else if (fnid == 0x6dce048c) {
    return "int32_t cellGemConvertVideoStart(const void *video_frame)";
  } else if (fnid == 0x4219de31) {
    return "int32_t cellGemEnableCameraPitchAngleCorrection(int flag)";
  } else if (fnid == 0x1a2518a2) {
    return "int32_t cellGemEnableMagnetometer(uint32_t gem_num, int flag)";
  } else if (fnid == 0x6fc4c791) {
    return "int32_t cellGemFilterState(uint32_t gem_num, uint32_t flag)";
  } else if (fnid == 0xce6d7791) {
    return "int32_t cellGemForceRGB(uint32_t gem_num, float r, float g, float b)";
  } else if (fnid == 0x6a5b7048) {
    return "int32_t cellGemGetAccelerometerPositionInDevice(uint32_t gem_num, vec_float4 *pos)";
  } else if (fnid == 0x2d2c2764) {
    return "int32_t cellGemGetAllTrackableHues(unsigned char *hues)";
  } else if (fnid == 0x8befac67) {
    return "int32_t cellGemGetCameraState(CellGemCameraState *gem_camera_state)";
  } else if (fnid == 0x02eb41bb) {
    return "int32_t cellGemGetEnvironmentLightingColor(float *r, float *g, float *b)";
  } else if (fnid == 0xb8ef56a6) {
    return "int32_t cellGemGetHuePixels(const void *camera_frame, unsigned int hue, unsigned char *pixels)";
  } else if (fnid == 0x92cc4b34) {
    return "int32_t cellGemGetImageState(uint32_t gem_num, CellGemImageState *gem_image_state)";
  } else if (fnid == 0xd37b127a) {
    return "int32_t cellGemGetInertialState(uint32_t gem_num, uint32_t flag, system_time_t timestamp, CellGemInertialState *gem_inertial_state)";
  } else if (fnid == 0x9e1dff96) {
    return "int32_t cellGemGetInfo(CellGemInfo *info)";
  } else if (fnid == 0x2e0a170d) {
    return "int32_t cellGemGetMemorySize(int max_connect)";
  } else if (fnid == 0x1b30cc22) {
    return "int32_t cellGemGetRGB(uint32_t gem_num, float *r, float *g, float *b)";
  } else if (fnid == 0x6db6b007) {
    return "int32_t cellGemGetRumble(uint32_t gem_num, unsigned char *rumble)";
  } else if (fnid == 0x6441d38d) {
    return "int32_t cellGemGetState(uint32_t gem_num, uint32_t flag, system_time_t time_parameter, CellGemState *gem_state)";
  } else if (fnid == 0xfee33481) {
    return "int32_t cellGemGetStatusFlags(int gem_num, uint64_t *flags)";
  } else if (fnid == 0x18ea899a) {
    return "int32_t cellGemGetTrackerHue(uint32_t gem_num, unsigned int *hue)";
  } else if (fnid == 0xc7622586) {
    return "int32_t cellGemHSVtoRGB(float h, float s, float v, float *r, float *g, float *b)";
  } else if (fnid == 0x13ea7c64) {
    return "int32_t cellGemInit(const CellGemAttribute *attr)";
  } else if (fnid == 0xe3e4f0d6) {
    return "int32_t cellGemInvalidateCalibration(int32_t gem_num)";
  } else if (fnid == 0xfb5887f9) {
    return "int32_t cellGemIsTrackableHue(unsigned int hue)";
  } else if (fnid == 0xa03ef587) {
    return "int32_t cellGemPrepareCamera(int max_exposure, float image_quality)";
  } else if (fnid == 0xc07896f9) {
    return "int32_t cellGemPrepareVideoConvert(const CellGemVideoConvertAttribute *attr)";
  } else if (fnid == 0xde54e2fc) {
    return "int32_t cellGemReset(uint32_t gem_num)";
  } else if (fnid == 0x49609306) {
    return "int32_t cellGemSetRumble(uint32_t gem_num, unsigned char rumble)";
  } else if (fnid == 0x77e08704) {
    return "int32_t cellGemSetYaw(uint32_t gem_num, vec_float4 z_direction)";
  } else if (fnid == 0x928ac5f8) {
    return "int32_t cellGemTrackHues(const unsigned int *req_hues, unsigned int *res_hues)";
  } else if (fnid == 0x0ecd2261) {
    return "int32_t cellGemUpdateStart(const void *camera_frame, system_time_t timestamp)";
  } else if (fnid == 0x1f6328d8) {
    return "int32_t cellGemWriteExternalPort(uint32_t gem_num)";
  } else if (fnid == 0x2bf4ddd2) {
    return "int32_t cellVdecDecodeAu(const CellVdecAuInfo *auInfo)";
  } else if (fnid == 0x17c702b9) {
    return "int32_t cellVdecGetPicItem(const CellVdecPicItem **picItem)";
  } else if (fnid == 0x807c861a) {
    return "int32_t cellVdecGetPicture(void *outBuff)";
  } else if (fnid == 0xb6bbcd5d) {
    return "int32_t cellVdecOpen(const CellVdecType *type, const CellVdecResource *resource, const CellVdecCb *cb, CellVdecHandle *handle)";
  } else if (fnid == 0x0053e2d8) {
    return "int32_t cellVdecOpenEx(const CellVdecTypeEx *type, const CellVdecResourceEx *resource, const CellVdecCb *cb, CellVdecHandle *handle)";
  } else if (fnid == 0xff6f6ebe) {
    return "int32_t cellVdecQueryAttr(const CellVdecType *type, CellVdecAttr *attr)";
  } else if (fnid == 0xc982a84a) {
    return "int32_t cellVdecQueryAttrEx(const CellVdecTypeEx *type, CellVdecAttr *attr)";
  } else if (fnid == 0x48b3774f) {
    return "_sce_np_sysutil_recv_packet(int, cxml::Document&, cxml::Element&)";
  } else if (fnid == 0x25b8bd56) {
    return "_sce_np_sysutil_send_packet(int, cxml::Document&)";
  } else if (fnid == 0x9ba3e97f) {
    return "_sce_np_sysutil_cxml_set_npid(cxml::Document&, cxml::Element&, char const*, SceNpId const*)";
  } else if (fnid == 0xad12e5c9) {
    return "_sce_np_sysutil_send_packet_sub(int, cxml::Document&)";
  } else if (fnid == 0xfd61dff5) {
    return "_sce_np_sysutil_cxml_prepare_doc(sysutil_cxmlutil::FixedMemory*, cxml::Document&, char const*, cxml::Element&, char const*, int)";
  } else if (fnid == 0x1fa740db) {
    return "_sce_np_sysutil_send_empty_packet(int, sysutil_cxmlutil::FixedMemory*, char const*, char const*)";
  } else if (fnid == 0x2c5ad7b4) {
    return "_sce_np_sysutil_recv_packet_fixedmem(int, sysutil_cxmlutil::FixedMemory*, cxml::Document&, cxml::Element&)";
  } else if (fnid == 0xadcc5ada) {
    return "sce_np_matching_set_matching2_running(bool)";
  } else if (fnid == 0x4299a92c) {
    return "_sce_np_sysutil_recv_packet_fixedmem_sub(int, sysutil_cxmlutil::FixedMemory*, cxml::Document&, cxml::Element&)";
  } else if (fnid == 0x481ce0e8) {
    return "int sceNpBasicAbortGui(void)";
  } else if (fnid == 0x1ae8a549) {
    return "int sceNpBasicAddBlockListEntry(const SceNpId *npid)";
  } else if (fnid == 0x27c69eba) {
    return "int sceNpBasicAddFriend(const SceNpId *contact, const char *body, sys_memory_container_t containerId)";
  } else if (fnid == 0x168a3117) {
    return "int sceNpBasicAddPlayersHistory(const SceNpId *npid, const char *description)";
  } else if (fnid == 0xbcdbb2ab) {
    return "int sceNpBasicAddPlayersHistoryAsync(const SceNpId *npids, size_t count, const char *description, uint32_t *reqId)";
  } else if (fnid == 0xf2b3338a) {
    return "int sceNpBasicGetBlockListEntry(uint32_t index, SceNpId *npid)";
  } else if (fnid == 0x73931bd0) {
    return "int sceNpBasicGetBlockListEntryCount(uint32_t *count)";
  } else if (fnid == 0x4d9c615d) {
    return "int sceNpBasicGetClanMessageEntry(uint32_t index, SceNpUserInfo *from)";
  } else if (fnid == 0xbf607ec6) {
    return "int sceNpBasicGetClanMessageEntryCount(uint32_t *count)";
  } else if (fnid == 0xe035f7d6) {
    return "int sceNpBasicGetEvent(int *event, SceNpUserInfo *from, void *data, size_t *size)";
  } else if (fnid == 0x04372385) {
    return "int sceNpBasicGetFriendListEntry(uint32_t index, SceNpId *npid)";
  } else if (fnid == 0xafef640d) {
    return "int sceNpBasicGetFriendListEntryCount(uint32_t *count)";
  } else if (fnid == 0x32c78a6a) {
    return "int sceNpBasicGetFriendPresenceByIndex(uint32_t index, SceNpUserInfo *user, SceNpBasicPresenceDetails *pres, uint32_t options)";
  } else if (fnid == 0x6453b27b) {
    return "int sceNpBasicGetFriendPresenceByIndex2(uint32_t index, SceNpUserInfo *user, SceNpBasicPresenceDetails2 *pres, uint32_t options)";
  } else if (fnid == 0xfd39ae13) {
    return "int sceNpBasicGetFriendPresenceByNpId(const SceNpId *npid, SceNpBasicPresenceDetails *pres, uint32_t options)";
  } else if (fnid == 0x260caedd) {
    return "int sceNpBasicGetFriendPresenceByNpId2(const SceNpId *npid, SceNpBasicPresenceDetails2 *pres, uint32_t options)";
  } else if (fnid == 0x05af1cb8) {
    return "int sceNpBasicGetMatchingInvitationEntry(uint32_t index, SceNpUserInfo *from)";
  } else if (fnid == 0xaf505def) {
    return "int sceNpBasicGetMatchingInvitationEntryCount(uint32_t *count)";
  } else if (fnid == 0x5d543bbe) {
    return "int sceNpBasicGetMessageAttachmentEntry(uint32_t index, SceNpUserInfo *from)";
  } else if (fnid == 0x9153bdf4) {
    return "int sceNpBasicGetMessageAttachmentEntryCount(uint32_t *count)";
  } else if (fnid == 0x30d1cbde) {
    return "int sceNpBasicGetMessageEntry(uint32_t index, SceNpUserInfo *from)";
  } else if (fnid == 0xecd503de) {
    return "int sceNpBasicGetMessageEntryCount(uint32_t *count)";
  } else if (fnid == 0xbab91fc9) {
    return "int sceNpBasicGetPlayersHistoryEntry(uint32_t options, uint32_t index, SceNpId *npid)";
  } else if (fnid == 0xa15f35fe) {
    return "int sceNpBasicGetPlayersHistoryEntryCount(uint32_t options, uint32_t *count)";
  } else if (fnid == 0xb5cb2d56) {
    return "int sceNpBasicRecvMessageAttachment(sys_memory_container_t containerId)";
  } else if (fnid == 0x64a704cc) {
    return "int sceNpBasicRecvMessageAttachmentLoad(void *buffer, size_t *size)";
  } else if (fnid == 0x806960ab) {
    return "int sceNpBasicRecvMessageCustom(SceNpBasicMessageMainType mainType, SceNpBasicMessageRecvOptions recvOptions, sys_memory_container_t containerId)";
  } else if (fnid == 0x4026eac5) {
    return "int sceNpBasicRegisterContextSensitiveHandler(const SceNpCommunicationId *context, void *arg)";
  } else if (fnid == 0xbcc09fe7) {
    return "int sceNpBasicRegisterHandler(const SceNpCommunicationId *context, void *arg)";
  } else if (fnid == 0xec0a1fbf) {
    return "int sceNpBasicSendMessage(const SceNpId *to, const void *data, size_t size)";
  } else if (fnid == 0x43b989f5) {
    return "int sceNpBasicSendMessageAttachment(const SceNpId *to, const char *subject, const char *body, const void *data, size_t size, sys_memory_container_t containerId)";
  } else if (fnid == 0x01fbbc9b) {
    return "int sceNpBasicSendMessageGui(const SceNpBasicMessageDetails *msg, sys_memory_container_t containerId)";
  } else if (fnid == 0x3f0808aa) {
    return "int sceNpBasicSetPresence(const void *data, size_t size)";
  } else if (fnid == 0xbe81c71c) {
    return "int sceNpBasicSetPresenceDetails(const SceNpBasicPresenceDetails *pres, uint32_t options)";
  } else if (fnid == 0x5e849303) {
    return "int sceNpBasicSetPresenceDetails2(const SceNpBasicPresenceDetails2 *pres, uint32_t options)";
  } else if (fnid == 0xacb9ee8e) {
    return "int sceNpBasicUnregisterHandler(void)";
  } else if (fnid == 0xf9732ac8) {
    return "int sceNpCustomMenuActionSetActivation(const SceNpCustomMenuIndexArray *array, uint64_t options)";
  } else if (fnid == 0x45f8f3aa) {
    return "int sceNpCustomMenuRegisterActions(const SceNpCustomMenu *menu, void *userArg, uin64_t options)";
  } else if (fnid == 0x9458f464) {
    return "int sceNpCustomMenuRegisterExceptionList(const SceNpCustomMenuActionExceptions *items, size_t numItems, uint64_t options)";
  } else if (fnid == 0xf283c143) {
    return "int sceNpDrmExecuteGamePurchase(void)";
  } else if (fnid == 0xcf51864b) {
    return "int sceNpDrmGetTimelimit(const char *path, uint64_t *time_remain)";
  } else if (fnid == 0xad218faf) {
    return "int sceNpDrmIsAvailable(const SceNpDrmKey *k_licensee, const char *path)";
  } else if (fnid == 0xf042b14f) {
    return "int sceNpDrmIsAvailable2(const SceNpDrmKey *k_licensee, const char *path)";
  } else if (fnid == 0xaa16695f) {
    return "int sceNpDrmProcessExitSpawn(const SceNpDrmKey *k_licensee, const char *path, sys_addr_t data, size_t data_size, int prio, uint64_t flags)";
  } else if (fnid == 0xe6c8f3f9) {
    return "int sceNpDrmProcessExitSpawn2(const SceNpDrmKey *k_licensee, const char *path, sys_addr_t data, size_t data_size, int prio, uint64_t flags)";
  } else if (fnid == 0x2ecd48ed) {
    return "int sceNpDrmVerifyUpgradeLicense(const char *content_id)";
  } else if (fnid == 0xbe0e3ee2) {
    return "int sceNpDrmVerifyUpgradeLicense2(const char *content_id)";
  } else if (fnid == 0xf0a9182b) {
    return "int sceNpFriendlist(void *userArg, sys_memory_container_t containerId)";
  } else if (fnid == 0xf59e1da8) {
    return "int sceNpFriendlistAbortGui(void)";
  } else if (fnid == 0xd7fb1fa6) {
    return "int sceNpFriendlistCustom(SceNpFriendlistCustomOptions options, void *userArg, sys_memory_container_t containerId)";
  } else if (fnid == 0xbd28fdbf) {
    return "int sceNpInit(size_t poolsize, void *poolptr)";
  } else if (fnid == 0x3d1760dc) {
    return "int sceNpLookupAbortTransaction(int32_t transId)";
  } else if (fnid == 0xb6017827) {
    return "int sceNpLookupAvatarImage(int32_t transId, const SceNpAvatarUrl *avatarUrl, SceNpAvatarImage *avatarImage, void *option)";
  } else if (fnid == 0xbf9eea93) {
    return "int sceNpLookupAvatarImageAsync(int32_t transId, const SceNpAvatarUrl *avatarUrl, SceNpAvatarImage *avatarImage, int32_t prio, void *option)";
  } else if (fnid == 0xce81c7f0) {
    return "int sceNpLookupCreateTitleCtx(const SceNpCommunicationId *communicationId, const SceNpId *selfNpId)";
  } else if (fnid == 0xea2e9ffc) {
    return "int sceNpLookupCreateTransactionCtx(int32_t titleCtxId)";
  } else if (fnid == 0x5de61626) {
    return "int sceNpLookupDestroyTitleCtx(int32_t titleCtxId)";
  } else if (fnid == 0xfb87cf5e) {
    return "int sceNpLookupDestroyTransactionCtx(int32_t transId)";
  } else if (fnid == 0x166dcc11) {
    return "int sceNpLookupNpId(int32_t transId, const SceNpOnlineId *onlineId, SceNpId *npId, void *option)";
  } else if (fnid == 0xd12e40ae) {
    return "int sceNpLookupNpIdAsync(int32_t transId, SceNpOnlineId *onlineId, SceNpId *npId, int32_t prio, void *option)";
  } else if (fnid == 0x71e5af7e) {
    return "int sceNpLookupSetTimeout(int32_t ctxId, usecond_t timeout)";
  } else if (fnid == 0xca39c4b2) {
    return "int sceNpLookupTitleSmallStorage(int32_t transId, void *data, size_t maxSize, size_t *contentLength, void *option)";
  } else if (fnid == 0x860b1756) {
    return "int sceNpLookupTitleSmallStorageAsync(int32_t transId, void *data, size_t maxSize, size_t *contentLength, int32_t prio, void *option)";
  } else if (fnid == 0xdfd63b62) {
    return "int32_t sceNpLookupUserProfile(int32_t transId, const SceNpId *npId, SceNpUserInfo *userInfo, *aboutMe, SceNpMyLanguages *languages, SceNpCountryCode *countryCode, SceNpAvatarImage *avatarImage, void *option)";
  } else if (fnid == 0xff0a2378) {
    return "int32_t sceNpLookupUserProfileAsync(int32_t transId, const SceNpId *npId, SceNpUserInfo *userInfo, *aboutMe, SceNpMyLanguages *languages, SceNpCountryCode *countryCode, SceNpAvatarImage *avatarImage, int32_t prio, void *option)";
  } else if (fnid == 0x2fccbfe0) {
    return "int32_t sceNpLookupUserProfileWithAvatarSize(int32_t transId, int32_t avatarSizeType, const SceNpId *npId, SceNpUserInfo *userInfo, *aboutMe, SceNpMyLanguages *languages, SceNpCountryCode *countryCode, void *avatarImageData, size_t avatarImageDataMaxSize, size_t *avatarImageDataSize, void *option)";
  } else if (fnid == 0x1fdb3ec2) {
    return "int32_t sceNpLookupUserProfileWithAvatarSizeAsync(int32_t transId, int32_t avatarSizeType, const SceNpId *npId, SceNpUserInfo *userInfo, *aboutMe, SceNpMyLanguages *languages, SceNpCountryCode *countryCode, void *avatarImageData, size_t avatarImageDataMaxSize, size_t *avatarImageDataSize, int32_t prio, void *option)";
  } else if (fnid == 0x168fcece) {
    return "int sceNpManagerGetAccountAge(int *age)";
  } else if (fnid == 0xb1e0718b) {
    return "int sceNpManagerGetAccountRegion(SceNpCountryCode *countryCode, int *language)";
  } else if (fnid == 0x36d0c2c5) {
    return "int sceNpManagerGetAvatarUrl(SceNpAvatarUrl *avatarUrl)";
  } else if (fnid == 0x4b9efb7a) {
    return "void sceNpManagerGetCachedInfo(struct SceNpManagerCacheParam *param)";
  } else if (fnid == 0xeb7a3d84) {
    return "int sceNpManagerGetChatRestrictionFlag(int *isRestricted)";
  } else if (fnid == 0x6ee62ed2) {
    return "int sceNpManagerGetContentRatingFlag(int *isRestricted, int *age)";
  } else if (fnid == 0xb66d1c46) {
    return "int sceNpManagerGetEntitlementIdList(SceNpEntitlementId *entIdList, size_t entIdListNum)";
  } else if (fnid == 0x32200389) {
    return "int sceNpManagerGetMyLanguages(SceNpMyLanguages *myLanguages)";
  } else if (fnid == 0xbdc07fd5) {
    return "int sceNpManagerGetNetworkTime(CellRtcTick *pTick)";
  } else if (fnid == 0xfe37a7f4) {
    return "int sceNpManagerGetNpId(SceNpId *npId)";
  } else if (fnid == 0xbe07c708) {
    return "int sceNpManagerGetOnlineId(SceNpOnlineId *onlineId)";
  } else if (fnid == 0xf42c0df8) {
    return "int sceNpManagerGetOnlineName(SceNpOnlineName *onlineName)";
  } else if (fnid == 0xa7bff757) {
    return "int sceNpManagerGetStatus(int *state)";
  } else if (fnid == 0x0968aa36) {
    return "int sceNpManagerGetTicket(void *buffer, size_t *bufferSize)";
  } else if (fnid == 0x58fa4fcd) {
    return "int sceNpManagerGetTicketParam(int paramId)";
  } else if (fnid == 0xe7dcd3b4) {
    return "int sceNpManagerRegisterCallback(void *arg)";
  } else if (fnid == 0x7e2fef28) {
    return "int sceNpManagerRequestTicket(const SceNpId *npId, const char *serviceId, const void *cookie, size_t cookieSize, const char *entitlementId, unsigned int consumedCount)";
  } else if (fnid == 0x8297f1ec) {
    return "int sceNpManagerRequestTicket2(const SceNpId *npId, const SceNpTicketVersion *version, const char *serviceId, const void *cookie, size_t cookieSize, const char *entitlementId, unsigned int consumedCount)";
  } else if (fnid == 0x442381f7) {
    return "void sceNpManagerSubSignin(void *cb_arg, int flag)";
  } else if (fnid == 0x000e53cc) {
    return "sceNpManagerSubSignout(SceNpId *npId)";
  } else if (fnid == 0x52a6b523) {
    return "int sceNpManagerUnregisterCallback(void)";
  } else if (fnid == 0x2f2c6b3e) {
    return "int sceNpProfileAbortGui(void)";
  } else if (fnid == 0xceeebc7a) {
    return "int sceNpProfileCallGui(const SceNpId *npid, void *userArg, uin64_t options)";
  } else if (fnid == 0xee5b20d9) {
    return "int sceNpScoreAbortTransaction(int32_t transId)";
  } else if (fnid == 0x7deb244c) {
    return "int32_t sceNpScoreCensorComment(int32_t transId, const void *comment, void *option)";
  } else if (fnid == 0x7be47e61) {
    return "int sceNpScoreCensorCommentAsync(int32_t transId, const void *comment, int32_t prio, void *option)";
  } else if (fnid == 0xb9f93bbb) {
    return "int sceNpScoreCreateTitleCtx(const SceNpCommunicationId *communicationId, const SceNpCommunicationPassphrase *passphrase, const SceNpId *selfNpId)";
  } else if (fnid == 0x6f5e8143) {
    return "int sceNpScoreCreateTransactionCtx(int32_t titleCtxId)";
  } else if (fnid == 0x259113b8) {
    return "int sceNpScoreDestroyTitleCtx(int32_t titleCtxId)";
  } else if (fnid == 0xc5f4cf82) {
    return "int sceNpScoreDestroyTransactionCtx(int32_t transId)";
  } else if (fnid == 0xf4e0f607) {
    return "int sceNpScoreGetBoardInfo(int32_t transId, SceNpScoreBoardInfo *boardInfo, void *option)";
  } else if (fnid == 0xddce7d15) {
    return "int sceNpScoreGetBoardInfoAsync(int32_t transId, SceNpScoreBoardInfo *boardInfo, int32_t prio, void *option)";
  } else if (fnid == 0x741fbf24) {
    return "int sceNpScoreGetClanMemberGameData(int32_t transId, const SceNpId *npId, size_t *totalSize, size_t recvSize, void *data, void *option)";
  } else if (fnid == 0xbef887e5) {
    return "int sceNpScoreGetClanMemberGameDataAsync(int32_t transId, const SceNpId *npId, size_t *totalSize, size_t recvSize, void *data, int32_t prio, void *option)";
  } else if (fnid == 0xded17c26) {
    return "int sceNpScoreGetClansMembersRankingByNpId(int32_t transId, const SceNpId *idArray, size_t idArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, SceNpScoreClansMemberDescription *descriptArray, size_t descriptArraySize, size_t arrayNum, SceNpScoreClanBasicInfo *clanInfo, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0xe8a67160) {
    return "int sceNpScoreGetClansMembersRankingByNpIdAsync(int32_t transId, const SceNpId *idArray, size_t idArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, SceNpScoreClansMemberDescription *descriptArray, size_t descriptArraySize, size_t arrayNum, SceNpScoreClanBasicInfo *clanInfo, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0x6d4adc3b) {
    return "void sceNpScoreGetClansMembersRankingByRange(int32_t transId, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, SceNpScoreClansMemberDescription *descriptArray, size_t descriptArraySize, size_t arrayNum, SceNpScoreClanBasicInfo *clanInfo, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0x4d5e0670) {
    return "void sceNpScoreGetClansMembersRankingByRangeAsync(int32_t transId, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, SceNpScoreClansMemberDescription *descriptArray, size_t descriptArraySize, size_t arrayNum, SceNpScoreClanBasicInfo *clanInfo, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0x2a76895a) {
    return "void sceNpScoreGetClansRankingByClanId(int32_t transId, const SceNpClanId *clanIdArray, size_t clanIdArraySize, SceNpScoreClanIdRankData *rankArray, size_t rankArraySize, void *reserved1, size_t reservedSize1, void *reserved2, size_t reservedSize2, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0x227f8763) {
    return "void sceNpScoreGetClansRankingByClanIdAsync(int32_t transId, const SceNpClanId *clanIdArray, size_t clanIdArraySize, SceNpScoreClanIdRankData *rankArray, size_t rankArraySize, void *reserved1, size_t reservedSize1, void *reserved2, size_t reservedSize2, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0xb082003b) {
    return "void sceNpScoreGetClansRankingByRange(int32_t transId, SceNpScoreClanIdRankData *rankArray, size_t rankArraySize, void *reserved1, size_t reservedSize1, void *reserved2, size_t reservedSize2, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0x7b7e9137) {
    return "void sceNpScoreGetClansRankingByRangeAsync(int32_t transId, SceNpScoreClanIdRankData *rankArray, size_t rankArraySize, void *reserved1, size_t reservedSize1, void *reserved2, size_t reservedSize2, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0x3b02418d) {
    return "int sceNpScoreGetGameData(int32_t transId, const SceNpId *npId, size_t *totalSize, size_t recvSize, void *data, void *option)";
  } else if (fnid == 0xdb2e4dc2) {
    return "int sceNpScoreGetGameDataAsync(int32_t transId, const SceNpId *npId, size_t *totalSize, size_t recvSize, void *data, int32_t prio, void *option)";
  } else if (fnid == 0x05d65dff) {
    return "int sceNpScoreGetRankingByNpId(int32_t transId, const SceNpId *npIdArray, size_t npIdArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0x3db7914d) {
    return "int sceNpScoreGetRankingByNpIdAsync(int32_t transId, const SceNpId *npIdArray, size_t npIdArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0xc3a991ee) {
    return "int sceNpScoreGetRankingByNpIdPcId(int32_t transId, const SceNpScoreNpIdPcId *idArray, size_t idArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0xc4b6cd8f) {
    return "int sceNpScoreGetRankingByNpIdPcIdAsync(int32_t transId, const SceNpScoreNpIdPcId *idArray, size_t idArraySize, SceNpScorePlayerRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0xfbc82301) {
    return "int sceNpScoreGetRankingByRange(int32_t transId, SceNpScoreRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, Size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, void *option)";
  } else if (fnid == 0x21206642) {
    return "int sceNpScoreGetRankingByRangeAsync(int32_t transId, SceNpScoreRankData *rankArray, size_t rankArraySize, SceNpScoreComment *commentArray, size_t commentArraySize, SceNpScoreGameInfo *infoArray, size_t infoArraySize, size_t arrayNum, CellRtcTick *lastSortDate, SceNpScoreRankNumber *totalRecord, int32_t prio, void *option)";
  } else if (fnid == 0x04ca5e6a) {
    return "int sceNpScoreRecordGameData(int32_t transId, size_t totalSize, size_t sendSize, const void *data, void *option)";
  } else if (fnid == 0xf76847c2) {
    return "int sceNpScoreRecordGameDataAsync(int32_t transId, size_t totalSize, size_t sendSize, const void *data, int32_t prio, void *option)";
  } else if (fnid == 0x1672170e) {
    return "int32_t sceNpScoreRecordScore(int32_t transId, const SceNpScoreComment *scoreComment, const SceNpScoreGameInfo *gameInfo, SceNpScoreRankNumber *tmpRank, void *option)";
  } else if (fnid == 0xf0b1e399) {
    return "int sceNpScoreRecordScoreAsync(int32_t transId, const SceNpScoreComment *scoreComment, const SceNpScoreGameInfo *gameInfo, SceNpScoreRankNumber *tmpRank, int32_t prio, void *option)";
  } else if (fnid == 0xf1b77918) {
    return "int32_t sceNpScoreSanitizeComment(int32_t transId, const char *comment, char *sanitizedComment, void *option)";
  } else if (fnid == 0x2cd2a1af) {
    return "int sceNpScoreSanitizeCommentAsync(int32_t transId, const char *comment, char *sanitizedComment, int32_t prio, void *option)";
  } else if (fnid == 0x2706eaa1) {
    return "int sceNpScoreSetPlayerCharacterId(int32_t ctxId)";
  } else if (fnid == 0x29dd45dc) {
    return "int sceNpScoreSetTimeout(int32_t ctxId, usecond_t timeout)";
  } else if (fnid == 0x60897c38) {
    return "int sceNpSignalingActivateConnection(uint32_t ctx_id, SceNpId *npId, uint32_t *conn_id)";
  } else if (fnid == 0x50b86d94) {
    return "int sceNpSignalingAddExtendedHandler(uint32_t ctx_id, void *arg)";
  } else if (fnid == 0x64dbb89d) {
    return "int sceNpSignalingCancelPeerNetInfo(uint32_t ctx_id, uint32_t req_id)";
  } else if (fnid == 0x6356082e) {
    return "int sceNpSignalingCreateCtx(SceNpId *npId, void *arg, uint32_t *ctx_id)";
  } else if (fnid == 0xfd0eb5ae) {
    return "int sceNpSignalingDeactivateConnection(uint32_t ctx_id, uint32_t conn_id)";
  } else if (fnid == 0xa8cf8451) {
    return "int sceNpSignalingDestroyCtx(uint32_t ctx_id)";
  } else if (fnid == 0xe853d388) {
    return "int sceNpSignalingGetConnectionFromNpId(uint32_t ctx_id, SceNpId *npId, uint32_t *conn_id)";
  } else if (fnid == 0x34ce82a0) {
    return "int sceNpSignalingGetConnectionFromPeerAddress(uint32_t ctx_id, struct in_addr peer_addr, in_port_t peer_port, uint32_t *conn_id)";
  } else if (fnid == 0x155de760) {
    return "int sceNpSignalingGetConnectionInfo(uint32_t ctx_id, uint32_t conn_id, int code, SceNpSignalingConnectionInfo *info)";
  } else if (fnid == 0xca0a2d04) {
    return "int sceNpSignalingGetConnectionStatus(uint32_t ctx_id, uint32_t conn_id, int *conn_status, struct in_addr *peer_addr, in_port_t *peer_port)";
  } else if (fnid == 0x2687a127) {
    return "int sceNpSignalingGetCtxOpt(uint32_t ctx_id, int optname, int *optval)";
  } else if (fnid == 0x9ad7fbd1) {
    return "int sceNpSignalingGetLocalNetInfo(uint32_t ctx_id, SceNpSignalingNetInfo *info)";
  } else if (fnid == 0x75eb50cb) {
    return "int sceNpSignalingGetPeerNetInfo(uint32_t ctx_id, SceNpId *npId, uint32_t *req_id)";
  } else if (fnid == 0xd0958814) {
    return "int sceNpSignalingGetPeerNetInfoResult(uint32_t ctx_id, uint32_t req_id, SceNpSignalingNetInfo *info)";
  } else if (fnid == 0x276c72b2) {
    return "int sceNpSignalingSetCtxOpt(uint32_t ctx_id, int optname, int optval)";
  } else if (fnid == 0x95c7bba3) {
    return "int sceNpSignalingTerminateConnection(uint32_t ctx_id, uint32_t conn_id)";
  } else if (fnid == 0x4885aa18) {
    return "int sceNpTerm(void)";
  } else if (fnid == 0xd208f91d) {
    return "int sceNpUtilCmpNpId(SceNpId *npid1, SceNpId *npid2)";
  } else if (fnid == 0xf5ff5f31) {
    return "int sceNpUtilCmpNpIdInOrder(SceNpId *npid1, SceNpId *npid2, int *order)";
  } else if (fnid == 0x41251f74) {
    return "int sceNp2Init(size_t poolsize, void *poolptr)";
  } else if (fnid == 0xaadb7c12) {
    return "int sceNp2Term(void)";
  } else if (fnid == 0xaa6c2c43) {
    return "sceNpMatching2ClearEventData(eventKey)";
  } else if (fnid == 0x6ba4c668) {
    return "sceNpMatching2ContextStartAsync(uint32_t timeout)";
  } else if (fnid == 0x9cbce3f2) {
    return "sceNpMatching2CreateContext(const SceNpId *npId, const SceNpCommunicationId *commId, const SceNpCommunicationPassphrase *passPhrase, SceNpMatching2ContextId *ctxId, int option)";
  } else if (fnid == 0xe7a3bc7a) {
    return "sceNpMatching2CreateJoinRoom(const SceNpMatching2CreateJoinRoomRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x16b3e5a4) {
    return "sceNpMatching2CreateServerContext(const SceNpMatching2CreateServerContextRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xc6b63b7e) {
    return "sceNpMatching2DeleteServerContext(const SceNpMatching2DeleteServerContextRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x62d446ac) {
    return "sceNpMatching2GetCbQueueInfo(SceNpMatching2CbQueueInfo *queueInfo)";
  } else if (fnid == 0x12034412) {
    return "sceNpMatching2GetClanLobbyId(SceNpMatching2LobbyId *lobbyId)";
  } else if (fnid == 0x3c00c9d4) {
    return "sceNpMatching2GetEventData(eventKey, *buf, bufLen)";
  } else if (fnid == 0xefbd9357) {
    return "sceNpMatching2GetLobbyInfoList(const SceNpMatching2GetLobbyInfoListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x129663d0) {
    return "sceNpMatching2GetLobbyMemberDataInternal(const SceNpMatching2GetLobbyMemberDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x0b2218a3) {
    return "sceNpMatching2GetLobbyMemberDataInternalList(const SceNpMatching2GetLobbyMemberDataInternalListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xeffe5a16) {
    return "sceNpMatching2GetLobbyMemberIdListLocal(SceNpMatching2LobbyMemberId *memberId, uint32_t memberIdNum, SceNpMatching2LobbyMemberId *me)";
  } else if (fnid == 0x196a06f9) {
    return "sceNpMatching2GetMemoryInfo(SceNpMatching2MemoryInfo *memInfo)";
  } else if (fnid == 0xe4ac32ca) {
    return "sceNpMatching2GetRoomDataExternalList(const SceNpMatching2GetRoomDataExternalListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x8b209ca2) {
    return "sceNpMatching2GetRoomDataInternal(const SceNpMatching2GetRoomDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x2c5b7fc9) {
    return "sceNpMatching2GetRoomMemberDataExternalList(const SceNpMatching2GetRoomMemberDataExternalListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xb0c51412) {
    return "sceNpMatching2GetRoomMemberDataInternal(const SceNpMatching2GetRoomMemberDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x58a04247) {
    return "sceNpMatching2GetRoomMemberDataInternalLocal(const SceNpMatching2AttributeId *attrId, uint32_t attrIdNum, SceNpMatching2RoomMemberDataInternal *member, *buf, bufLen)";
  } else if (fnid == 0x490124fd) {
    return "sceNpMatching2GetRoomMemberIdListLocal(int sortMethod, SceNpMatching2RoomMemberId *memberId, uint32_t memberIdNum)";
  } else if (fnid == 0xde6d308b) {
    return "sceNpMatching2GetRoomPasswordLocal(bool *withPassword, SceNpMatching2SessionPassword *roomPassword)";
  } else if (fnid == 0x3cc27344) {
    return "sceNpMatching2GetRoomSlotInfoLocal(SceNpMatching2RoomSlotInfo *roomSlotInfo)";
  } else if (fnid == 0x8e5cfe9f) {
    return "sceNpMatching2GetServerIdListLocal(SceNpMatching2ServerId *serverId, uint32_t serverIdNum)";
  } else if (fnid == 0x3457c0db) {
    return "sceNpMatching2GetServerInfo(const SceNpMatching2GetServerInfoRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xa2b01449) {
    return "sceNpMatching2GetSignalingOptParamLocal(SceNpMatching2SignalingOptParam *signalingOptParam)";
  } else if (fnid == 0xac98b03a) {
    return "sceNpMatching2GetUserInfoList(const SceNpMatching2GetUserInfoListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x05bf2fbd) {
    return "sceNpMatching2GetWorldInfoList(const SceNpMatching2GetWorldInfoListRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x9344d41f) {
    return "sceNpMatching2GrantRoomOwner(const SceNpMatching2GrantRoomOwnerRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x3f62c759) {
    return "sceNpMatching2Init(size_t stackSize, int priority)";
  } else if (fnid == 0xf4babd3f) {
    return "sceNpMatching2Init2(size_t stackSize, int priority, SceNpMatching2UtilityInitParam *param)";
  } else if (fnid == 0x29e78389) {
    return "sceNpMatching2JoinLobby(const SceNpMatching2JoinLobbyRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xba578d19) {
    return "sceNpMatching2JoinProhibitiveRoom(const SceNpMatching2JoinProhibitiveRoomRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x5721e711) {
    return "sceNpMatching2JoinRoom(const SceNpMatching2JoinRoomRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x66f19527) {
    return "sceNpMatching2KickoutRoomMember(const SceNpMatching2KickoutRoomMemberRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x02065e3d) {
    return "sceNpMatching2LeaveLobby(const SceNpMatching2LeaveLobbyRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x1f372697) {
    return "sceNpMatching2LeaveRoom(const SceNpMatching2LeaveRoomRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x748029a2) {
    return "sceNpMatching2RegisterContextCallback(void *cbFuncArg)";
  } else if (fnid == 0x0884fc95) {
    return "sceNpMatching2RegisterLobbyEventCallback(void *cbFuncArg)";
  } else if (fnid == 0x03a2f42a) {
    return "sceNpMatching2RegisterLobbyMessageCallback(void *cbFuncArg)";
  } else if (fnid == 0xdcb6b27d) {
    return "sceNpMatching2RegisterRoomEventCallback(void *cbFuncArg)";
  } else if (fnid == 0xfee11e72) {
    return "sceNpMatching2RegisterRoomMessageCallback(void *cbFuncArg)";
  } else if (fnid == 0xa9e6103e) {
    return "sceNpMatching2RegisterSignalingCallback(void *cbFuncArg)";
  } else if (fnid == 0x0d22867f) {
    return "sceNpMatching2SearchRoom(const SceNpMatching2SearchRoomRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x3f3bd413) {
    return "sceNpMatching2SendLobbyChatMessage(const SceNpMatching2SendLobbyChatMessageRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xefff8779) {
    return "sceNpMatching2SendLobbyInvitation(const SceNpMatching2SendLobbyInvitationRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x7bf6e152) {
    return "sceNpMatching2SendRoomChatMessage(const SceNpMatching2SendRoomChatMessageRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x28cad8b3) {
    return "sceNpMatching2SendRoomMessage(const SceNpMatching2SendRoomMessageRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xdb87b088) {
    return "sceNpMatching2SetDefaultRequestOptParam(const SceNpMatching2RequestOptParam *optParam)";
  } else if (fnid == 0xfa0583c6) {
    return "sceNpMatching2SetLobbyMemberDataInternal(const SceNpMatching2SetLobbyMemberDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x215b0d75) {
    return "sceNpMatching2SetRoomDataExternal(const SceNpMatching2SetRoomDataExternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x817d1090) {
    return "sceNpMatching2SetRoomDataInternal(const SceNpMatching2SetRoomDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xb851aacf) {
    return "sceNpMatching2SetRoomMemberDataInternal(const SceNpMatching2SetRoomMemberDataInternalRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x6fcd84c1) {
    return "sceNpMatching2SetSignalingOptParam(const SceNpMatching2SetSignalingOptParamRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x1022e6d6) {
    return "sceNpMatching2SetUserInfo(const SceNpMatching2SetUserInfoRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0x26ae9ff8) {
    return "void sceNpMatching2SignalingGetConnectionInfo(int code, SceNpSignalingConnectionInfo *connInfo)";
  } else if (fnid == 0x0ebe4c6b) {
    return "void sceNpMatching2SignalingGetConnectionStatus(int *connStatus, struct in_addr *peerAddr, in_port_t *peerPort)";
  } else if (fnid == 0xe9946648) {
    return "sceNpMatching2SignalingGetCtxOpt(int optname, int *optval)";
  } else if (fnid == 0x8d3f8d49) {
    return "sceNpMatching2SignalingGetPingInfo(const SceNpMatching2SignalingGetPingInfoRequest *reqParam, const SceNpMatching2RequestOptParam *optParam, SceNpMatching2RequestId *assignedReqId)";
  } else if (fnid == 0xbf014813) {
    return "sceNpMatching2SignalingSetCtxOpt(int optname, int optval)";
  } else if (fnid == 0x2fe0da7d) {
    return "sceNpMatching2Term(void)";
  } else if (fnid == 0x23009d07) {
    return "sceNpMatching2Term2(void)";
  } else if (fnid == 0x8e930999) {
    return "void sceNpUtilBuildCdnUrl(const char *url, char *buf, size_t bufSize, size_t *required, void *option)";
  } else if (fnid == 0x4d06aef7) {
    return "int sceNpClansAddBlacklistEntry(const SceNpId *npid)";
  } else if (fnid == 0x726dffd5) {
    return "int sceNpClansCancelInvitation(const SceNpId *npid)";
  } else if (fnid == 0x9cac2085) {
    return "int sceNpClansChangeMemberRole(const SceNpId *npid)";
  } else if (fnid == 0xa6a31a38) {
    return "int sceNpClansCreateClan(const char *name, const char *tag, SceNpClanId *clanId)";
  } else if (fnid == 0x9a72232d) {
    return "int sceNpClansCreateRequest(SceNpClansRequestHandle *handle, uint64_t flags)";
  } else if (fnid == 0x38dadf1f) {
    return "int sceNpClansGetAutoAcceptStatus(bool *enable)";
  } else if (fnid == 0x56bc5a7c) {
    return "int sceNpClansGetBlacklist(const SceNpClansPagingRequest *paging, SceNpClansBlacklistEntry *bl, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x487de998) {
    return "int sceNpClansGetClanInfo(SceNpClansClanInfo *info)";
  } else if (fnid == 0xca4181b4) {
    return "int sceNpClansGetClanList(const SceNpClansPagingRequest *paging, SceNpClansEntry *clanList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x672399a8) {
    return "int sceNpClansGetClanListByNpId(const SceNpClansPagingRequest *paging, const SceNpId *npid, SceNpClansEntry *clanList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x20472da0) {
    return "int sceNpClansGetMemberInfo(const SceNpId *npid, SceNpClansMemberEntry *memInfo)";
  } else if (fnid == 0x856ff5c0) {
    return "int sceNpClansGetMemberList(const SceNpClansPagingRequest *paging, SceNpClansMemberEntry *memList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x9b820047) {
    return "int sceNpClansInit(const SceNpCommunicationId *commId, const SceNpCommunicationPassphrase *passphrase, void *pool, size_t poolSize, uint32_t flags)";
  } else if (fnid == 0xaa7912b5) {
    return "int sceNpClansKickMember(const SceNpId *npid, const SceNpClansMessage *message)";
  } else if (fnid == 0xada45b84) {
    return "int sceNpClansPostAnnouncement(const SceNpClansMessage *message, const SceNpClansMessageData *data, uint32_t duration, SceNpClansMessageId *mId)";
  } else if (fnid == 0x83d65529) {
    return "int sceNpClansPostChallenge(const SceNpClansMessage *message, const SceNpClansMessageData *data, uint32_t duration, SceNpClansMessageId *mId)";
  } else if (fnid == 0x5bff9da1) {
    return "int sceNpClansRemoveBlacklistEntry(const SceNpId *npid)";
  } else if (fnid == 0x727aa7f8) {
    return "int sceNpClansRetrieveAnnouncements(const SceNpClansPagingRequest *paging, SceNpClansMessageEntry *mList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x0df25834) {
    return "int sceNpClansRetrieveChallenges(const SceNpClansPagingRequest *paging, SceNpClansMessageEntry *mList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x8e785b97) {
    return "int sceNpClansRetrievePostedChallenges(const SceNpClansPagingRequest *paging, SceNpClansMessageEntry *mList, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0xace0cfba) {
    return "int sceNpClansSearchByName(const SceNpClansPagingRequest *paging, const SceNpClansSearchableName *search, SceNpClansClanBasicInfo *results, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0x1221a1bf) {
    return "int sceNpClansSearchByProfile(const SceNpClansPagingRequest *paging, const SceNpClansSearchableProfile *search, SceNpClansClanBasicInfo *results, SceNpClansPagingResult *pageResult)";
  } else if (fnid == 0xbc05ef31) {
    return "int sceNpClansSendInvitation(const SceNpId *npid, const SceNpClansMessage *message)";
  } else if (fnid == 0x095e12c6) {
    return "int sceNpClansSendInvitationResponse(const SceNpClansMessage *message, bool accept)";
  } else if (fnid == 0x59743b2b) {
    return "int sceNpClansSendMembershipRequest(const SceNpClansMessage *message)";
  } else if (fnid == 0x942dbdc4) {
    return "int sceNpClansSendMembershipResponse(const SceNpId *npid, const SceNpClansMessage *message, bool allow)";
  } else if (fnid == 0x42332cb7) {
    return "int sceNpClansTerm(void)";
  } else if (fnid == 0x5da94854) {
    return "int sceNpClansUpdateAutoAcceptStatus(bool enable)";
  } else if (fnid == 0x09f9e1a9) {
    return "int sceNpClansUpdateClanInfo(const SceNpClansUpdatableClanInfo *info)";
  } else if (fnid == 0xf4a2d52b) {
    return "int sceNpClansUpdateMemberInfo(const SceNpClansUpdatableMemberInfo *info)";
  } else if (fnid == 0x8df0057f) {
    return "int sceNpCommerce2AbortReq(uint32_t req_id)";
  } else if (fnid == 0xd9fdcec2) {
    return "int sceNpCommerce2CreateCtx(uint32_t version, const SceNpId *npId, void *arg, uint32_t *ctx_id)";
  } else if (fnid == 0x62023e98) {
    return "int sceNpCommerce2CreateSessionAbort(uint32_t ctx_id)";
  } else if (fnid == 0x91f8843d) {
    return "int sceNpCommerce2CreateSessionFinish(uint32_t ctx_id, SceNpCommerce2SessionInfo *sessionInfo)";
  } else if (fnid == 0xcc18cd2c) {
    return "int sceNpCommerce2CreateSessionStart(uint32_t ctx_id)";
  } else if (fnid == 0x6f67ea80) {
    return "int sceNpCommerce2DestroyCtx(uint32_t ctx_id)";
  } else if (fnid == 0x9d9cb96b) {
    return "int sceNpCommerce2DestroyGetCategoryContentsResult(SceNpCommerce2GetCategoryContentsResult *result)";
  } else if (fnid == 0xf6139b58) {
    return "int sceNpCommerce2DestroyGetProductInfoListResult(SceNpCommerce2GetProductInfoListResult *result)";
  } else if (fnid == 0xef8eafcd) {
    return "int sceNpCommerce2DestroyGetProductInfoResult(SceNpCommerce2GetProductInfoResult *result)";
  } else if (fnid == 0x2a910f05) {
    return "int sceNpCommerce2DestroyReq(uint32_t req_id)";
  } else if (fnid == 0x104551a6) {
    return "int sceNpCommerce2DoCheckoutStartAsync(uint32_t ctx_id, uint32_t sku_num, sys_memory_container_t container)";
  } else if (fnid == 0x410d42be) {
    return "int sceNpCommerce2DoDlListFinishAsync(uint32_t ctx_id)";
  } else if (fnid == 0x6ca9efd4) {
    return "int sceNpCommerce2DoDlListStartAsync(uint32_t ctx_id, const char *service_id, uint32_t sku_num, sys_memory_container_t container)";
  } else if (fnid == 0xb23e3bd1) {
    return "int sceNpCommerce2DoProductBrowseFinishAsync(uint32_t ctx_id)";
  } else if (fnid == 0x9825a0fc) {
    return "int sceNpCommerce2DoProductBrowseStartAsync(uint32_t ctx_id, const char *product_id, sys_memory_container_t container, const SceNpCommerce2ProductBrowseParam *param)";
  } else if (fnid == 0xa9f945b3) {
    return "int sceNpCommerce2DoProductCodeFinishAsync(uint32_t ctx_id)";
  } else if (fnid == 0xde7ab33d) {
    return "int sceNpCommerce2DoProductCodeStartAsync(uint32_t ctx_id, sys_memory_container_t container, const SceNpCommerce2ProductCodeParam *param)";
  } else if (fnid == 0xeef51be0) {
    return "int sceNpCommerce2ExecuteStoreBrowse(int targetType, const char *targetId, int userdata)";
  } else if (fnid == 0x3d627d81) {
    return "int sceNpCommerce2GetBGDLAvailability(bool *bgdlAvailability)";
  } else if (fnid == 0x7370d8d0) {
    return "int sceNpCommerce2GetCategoryContentsCreateReq(uint32_t ctx_id, uint32_t *req_id)";
  } else if (fnid == 0xca0ea996) {
    return "int sceNpCommerce2GetCategoryContentsGetResult(uint32_t req_id, void *buf, size_t buf_size, size_t *fill_size)";
  } else if (fnid == 0x371a2edd) {
    return "int sceNpCommerce2GetCategoryContentsStart(uint32_t req_id, const char *categoryId, uint32_t startPosition, uint32_t maxCountOfResults)";
  } else if (fnid == 0xbd49eab2) {
    return "int sceNpCommerce2GetCategoryInfo(const SceNpCommerce2GetCategoryContentsResult *result, SceNpCommerce2CategoryInfo *categoryInfo)";
  } else if (fnid == 0xfc216890) {
    return "int sceNpCommerce2GetCategoryInfoFromContentInfo(const SceNpCommerce2ContentInfo *contentInfo, SceNpCommerce2CategoryInfo *categoryInfo)";
  } else if (fnid == 0x972ab46c) {
    return "int sceNpCommerce2GetContentInfo(const SceNpCommerce2GetCategoryContentsResult *result, unsigned int index, SceNpCommerce2ContentInfo *contentInfo)";
  } else if (fnid == 0x150fdca3) {
    return "int sceNpCommerce2GetContentRatingDescriptor(const SceNpCommerce2ContentRatingInfo *contentRatingInfo, unsigned int index, SceNpCommerce2ContentRatingDescriptor *contentRatingDescriptor)";
  } else if (fnid == 0xac78c1f3) {
    return "int sceNpCommerce2GetContentRatingInfoFromCategoryInfo(const SceNpCommerce2CategoryInfo *categoryInfo, SceNpCommerce2ContentRatingInfo *contentRatingInfo)";
  } else if (fnid == 0xec324c8f) {
    return "int sceNpCommerce2GetContentRatingInfoFromGameProductInfo(const SceNpCommerce2GameProductInfo *gameProductInfo, SceNpCommerce2ContentRatingInfo *contentRatingInfo)";
  } else if (fnid == 0xef645654) {
    return "int sceNpCommerce2GetGameProductInfo(const SceNpCommerce2GetProductInfoResult *result, SceNpCommerce2GameProductInfo *gameProductInfo)";
  } else if (fnid == 0xe51a4944) {
    return "int sceNpCommerce2GetGameProductInfoFromContentInfo(const SceNpCommerce2ContentInfo *contentInfo, SceNpCommerce2GameProductInfo *gameProductInfo)";
  } else if (fnid == 0xd9956ce7) {
    return "int sceNpCommerce2GetGameProductInfoFromGetProductInfoListResult(const SceNpCommerce2GetProductInfoListResult *result, unsigned int index, SceNpCommerce2GameProductInfo *gameProductInfo)";
  } else if (fnid == 0xdb19194c) {
    return "int sceNpCommerce2GetGameSkuInfoFromGameProductInfo(const SceNpCommerce2GameProductInfo *gameProductInfo, uint32_t index, SceNpCommerce2GameSkuInfo *gameSkuInfo)";
  } else if (fnid == 0xda8e322d) {
    return "int sceNpCommerce2GetPrice(uint32_t ctx_id, char *buf, size_t buflen, uint32_t price)";
  } else if (fnid == 0xa975ebb4) {
    return "int sceNpCommerce2GetProductInfoCreateReq(uint32_t ctx_id, uint32_t *req_id)";
  } else if (fnid == 0xbf5f58ea) {
    return "int sceNpCommerce2GetProductInfoGetResult(uint32_t req_id, void *buf, size_t buf_size, size_t *fill_size)";
  } else if (fnid == 0xe1e7b5ac) {
    return "int sceNpCommerce2GetProductInfoListCreateReq(uint32_t ctx_id, uint32_t *req_id)";
  } else if (fnid == 0x146618df) {
    return "int sceNpCommerce2GetProductInfoListGetResult(uint32_t req_id, void *buf, size_t buf_size, size_t *fill_size)";
  } else if (fnid == 0x9cde07cc) {
    return "int sceNpCommerce2GetProductInfoListStart(uint32_t req_id, uint32_t productNum)";
  } else if (fnid == 0x8f46325b) {
    return "int sceNpCommerce2GetProductInfoStart(uint32_t req_id, const char *categoryId, const char *productId)";
  } else if (fnid == 0x1fa1b312) {
    return "int sceNpCommerce2GetStoreBrowseUserdata(int *userdata)";
  } else if (fnid == 0x3539d233) {
    return "int sceNpCommerce2Init(void)";
  } else if (fnid == 0xd8a473a3) {
    return "int sceNpCommerce2InitGetCategoryContentsResult(SceNpCommerce2GetCategoryContentsResult *result, void *data, size_t data_size)";
  } else if (fnid == 0xe0f90e44) {
    return "int sceNpCommerce2InitGetProductInfoListResult(SceNpCommerce2GetProductInfoListResult *result, void *data, size_t data_size)";
  } else if (fnid == 0xf798f5e3) {
    return "int sceNpCommerce2InitGetProductInfoResult(SceNpCommerce2GetProductInfoResult *result, void *data, size_t data_size)";
  } else if (fnid == 0xa5a863fe) {
    return "int sceNpCommerce2SetBGDLAvailability(bool bgdlAvailability)";
  } else if (fnid == 0x4d4a094c) {
    return "int sceNpCommerce2Term(void)";
  } else if (fnid == 0xe3bf9a28) {
    return "int sceNpTrophyCreateContext(SceNpTrophyContext *context, const SceNpCommunicationId *commId, const SceNpCommunicationSignature *commSign, uint64_t options)";
  } else if (fnid == 0x1c25470d) {
    return "int sceNpTrophyCreateHandle(SceNpTrophyHandle *handle)";
  } else if (fnid == 0xff299e03) {
    return "int sceNpTrophyGetGameIcon(void *buffer, size_t *size)";
  } else if (fnid == 0x49d18217) {
    return "int sceNpTrophyGetGameInfo(SceNpTrophyGameDetails *details, SceNpTrophyGameData *data)";
  } else if (fnid == 0x079f0e87) {
    return "int sceNpTrophyGetGameProgress(int32_t *percentage)";
  } else if (fnid == 0x370136fe) {
    return "int sceNpTrophyGetRequiredDiskSpace(uint64_t *reqspace, uint64_t options)";
  } else if (fnid == 0xbaedf689) {
    return "int sceNpTrophyGetTrophyIcon(void *buffer, size_t *size)";
  } else if (fnid == 0xfce6d30a) {
    return "int sceNpTrophyGetTrophyInfo(SceNpTrophyDetails *details, SceNpTrophyData *data)";
  } else if (fnid == 0xb3ac3478) {
    return "int sceNpTrophyGetTrophyUnlockState(SceNpTrophyFlagArray *flags, size_t *count)";
  } else if (fnid == 0x39567781) {
    return "int sceNpTrophyInit(void *pool, size_t poolSize, sys_memory_container_t containerId, uint64_t options)";
  } else if (fnid == 0x1197b52c) {
    return "int sceNpTrophyRegisterContext(void *arg, uint64_t options)";
  } else if (fnid == 0x27deda93) {
    return "int sceNpTrophySetSoundLevel(uint32_t level, uint64_t options)";
  } else if (fnid == 0xa7fabf4d) {
    return "int sceNpTrophyTerm(void)";
  } else if (fnid == 0x8ceedd21) {
    return "int sceNpTrophyUnlockTrophy(SceNpTrophyId *platinumId)";
  } else if (fnid == 0x325c6284) {
    return "int sceNpTusAbortTransaction(int32_t transId)";
  } else if (fnid == 0x7caf58ee) {
    return "int sceNpTusCreateTitleCtx(const SceNpCommunicationId *communicationId, const SceNpCommunicationPassphrase *passphrase, const SceNpId *selfNpId)";
  } else if (fnid == 0x1904435e) {
    return "int sceNpTusCreateTransactionCtx(int32_t titleCtxId)";
  } else if (fnid == 0x2e162a62) {
    return "int sceNpTusDestroyTitleCtx(int32_t titleCtxId)";
  } else if (fnid == 0x44eca8b4) {
    return "int sceNpTusDestroyTransactionCtx(int32_t transId)";
  } else if (fnid == 0x8f87a06b) {
    return "int sceNpTusInit(int32_t prio)";
  } else if (fnid == 0x59432970) {
    return "int sceNpTusSetTimeout(int32_t ctxId, usecond_t timeout)";
  } else if (fnid == 0xc99ee313) {
    return "void sceNpUtilBandwidthTestAbort(void)";
  } else if (fnid == 0xc880f37d) {
    return "void sceNpUtilBandwidthTestGetStatus(void)";
  } else if (fnid == 0xc2ced2b7) {
    return "void sceNpUtilBandwidthTestInitStart(int prio, size_t stack)";
  } else if (fnid == 0x432b3cbf) {
    return "void sceNpUtilBandwidthTestShutdown(struct SceNpUtilBandwidthTestResult *result)";
  } else if (fnid == 0x7a0329a1) {
    return "CellFsErrno cellFsAllocateFileAreaWithoutZeroFill(const char *path, const uint64_t size)";
  } else if (fnid == 0x99406d0b) {
    return "CellFsErrno cellFsChmod(const char *path)";
  } else if (fnid == 0x2cb51f0d) {
    return "CellFsErrno cellFsClose(int fd)";
  } else if (fnid == 0xff42dcc3) {
    return "CellFsErrno cellFsClosedir(int fd)";
  } else if (fnid == 0xcb588dba) {
    return "CellFsErrno cellFsFGetBlockSize(uint64_t *sector_size, uint64_t *block_size)";
  } else if (fnid == 0xef3efa34) {
    return "CellFsErrno cellFsFstat(int fd, CellFsStat *sb)";
  } else if (fnid == 0x967a162b) {
    return "CellFsErrno cellFsFsync(int fd)";
  } else if (fnid == 0x0e2939e5) {
    return "CellFsErrno cellFsFtruncate(int fd, uint64_t size)";
  } else if (fnid == 0x1a108ab7) {
    return "CellFsErrno cellFsGetBlockSize(uint64_t *sector_size, uint64_t *block_size)";
  } else if (fnid == 0x9b882495) {
    return "CellFsErrno cellFsGetDirectoryEntries(int fd, CellFsDirectoryEntry *entries, uint32_t entries_size, uint32_t *data_count)";
  } else if (fnid == 0xaa3b4bcd) {
    return "CellFsErrno cellFsGetFreeSize(uint32_t *block_size, uint64_t *free_block_count)";
  } else if (fnid == 0xa397d042) {
    return "CellFsErrno cellFsLseek(int fd, int64_t offset, int whence, uint64_t *pos)";
  } else if (fnid == 0xba901fe6) {
    return "CellFsErrno cellFsMkdir(const char *path)";
  } else if (fnid == 0x718bf5f8) {
    return "CellFsErrno cellFsOpen(const char *path, int flags, int *fd, void *arg, uint64_t size)";
  } else if (fnid == 0x3f61245c) {
    return "CellFsErrno cellFsOpendir(const char *path, int *fd)";
  } else if (fnid == 0x4d5ff8e2) {
    return "CellFsErrno cellFsRead(int fd, void *buf, uint64_t nbytes, uint64_t *nread)";
  } else if (fnid == 0x5c74903d) {
    return "CellFsErrno cellFsReaddir(int fd, CellFsDirent *dir, uint64_t *nread)";
  } else if (fnid == 0x0d5b4a14) {
    return "CellFsErrno cellFsReadWithOffset(int fd, uint64_t offset, void *buf, uint64_t buffer_size, uint64_t *nread)";
  } else if (fnid == 0xf12eecc8) {
    return "CellFsErrno cellFsRename(const char *from, const char *to)";
  } else if (fnid == 0x2796fdf3) {
    return "CellFsErrno cellFsRmdir(const char *path)";
  } else if (fnid == 0xb1840b53) {
    return "CellFsErrno cellFsSdataOpen(const char *path, int flags, int *fd, const void *arg, uint64_t size)";
  } else if (fnid == 0x6d3bb15b) {
    return "CellFsErrno cellFsSdataOpenByFd(int mself_fd, int flags, int *sdata_fd, uint64_t offset, const void *arg, uint64_t size)";
  } else if (fnid == 0x02671310) {
    return "CellFsErrno cellFsSetDefaultContainer(sys_memory_container_t id, size_t total_limit)";
  } else if (fnid == 0x3140f6e1) {
    return "CellFsErrno cellFsSetIoBuffer(int fd, size_t buffer_size, int page_type, sys_memory_container_t id)";
  } else if (fnid == 0x75f16dc5) {
    return "CellFsErrno cellFsSetIoBufferFromDefaultContainer(int fd, size_t buffer_size, int page_type)";
  } else if (fnid == 0x7de6dced) {
    return "CellFsErrno cellFsStat(const char *path, CellFsStat *sb)";
  } else if (fnid == 0x27800c6b) {
    return "CellFsErrno cellFsStRead(int fd, char *buf, uint64_t size, uint64_t *rsize)";
  } else if (fnid == 0xd73938df) {
    return "CellFsErrno cellFsStReadFinish(int fd)";
  } else if (fnid == 0x190912f6) {
    return "CellFsErrno cellFsStReadGetCurrentAddr(int fd, char **addr, uint64_t *size)";
  } else if (fnid == 0xbd273a88) {
    return "CellFsErrno cellFsStReadGetRegid(int fd, uint64_t *regid)";
  } else if (fnid == 0xb3afee8b) {
    return "CellFsErrno cellFsStReadGetRingBuf(int fd, CellFsRingBuffer *ringbuf)";
  } else if (fnid == 0xcf34969c) {
    return "CellFsErrno cellFsStReadGetStatus(int fd, uint64_t *status)";
  } else if (fnid == 0x2664c8ae) {
    return "CellFsErrno cellFsStReadInit(int fd, const CellFsRingBuffer *ringbuf)";
  } else if (fnid == 0x81f33783) {
    return "CellFsErrno cellFsStReadPutCurrentAddr(int fd, char *addr, uint64_t size)";
  } else if (fnid == 0x8df28ff9) {
    return "CellFsErrno cellFsStReadStart(int fd, uint64_t offset, uint64_t size)";
  } else if (fnid == 0xf8e5d9a0) {
    return "CellFsErrno cellFsStReadStop(int fd)";
  } else if (fnid == 0x8f71c5b2) {
    return "CellFsErrno cellFsStReadWait(int fd, uint64_t size)";
  } else if (fnid == 0x866f6aec) {
    return "CellFsErrno cellFsStReadWaitCallback(int fd, uint64_t size)";
  } else if (fnid == 0xc9dc3ac5) {
    return "CellFsErrno cellFsTruncate(const char *path, uint64_t size)";
  } else if (fnid == 0x7f4677a8) {
    return "CellFsErrno cellFsUnlink(const char *path)";
  } else if (fnid == 0xbef554a4) {
    return "CellFsErrno cellFsUtime(const char *path, const CellFsUtimbuf *timep)";
  } else if (fnid == 0xecdcf2ab) {
    return "CellFsErrno cellFsWrite(int fd, const void *buf, uint64_t nbytes, uint64_t *nwrite)";
  } else if (fnid == 0x8cb722d5) {
    return "CellFsErrno cellFsWriteWithOffset(int fd, uint64_t offset, const void *buf, uint64_t data_size, uint64_t *nwrite)";
  } else if (fnid == 0x2073b7f6) {
    return "int32_t cellKbClearBuf(uint32_t port_no)";
  } else if (fnid == 0x4ab1fa77) {
    return "uint16_t cellKbCnvRawCode(uint32_t arrange, uint32_t mkey, uint32_t led, uint16_t rawcode)";
  } else if (fnid == 0xbfce3285) {
    return "int32_t cellKbEnd(void)";
  } else if (fnid == 0x1f71ecbe) {
    return "int32_t cellKbGetConfiguration(uint32_t port_no, CellKbConfig *config)";
  } else if (fnid == 0x2f1774d5) {
    return "int32_t cellKbGetInfo(CellKbInfo *info)";
  } else if (fnid == 0x433f6ec0) {
    return "int32_t cellKbInit(uint32_t max_connect)";
  } else if (fnid == 0xff0a21b7) {
    return "int32_t cellKbRead(uint32_t port_no, CellKbData *data)";
  } else if (fnid == 0xa5f85e4d) {
    return "int32_t cellKbSetCodeType(uint32_t port_no, uint32_t type)";
  } else if (fnid == 0x3f72c56e) {
    return "int32_t cellKbSetLEDStatus(uint32_t port_no, uint8_t led)";
  } else if (fnid == 0xdeefdfa7) {
    return "int32_t cellKbSetReadMode(uint32_t port_no, uitn32_t rmode)";
  } else if (fnid == 0x3ef66b95) {
    return "int32_t cellMouseClearBuf(uint32_t port_no)";
  } else if (fnid == 0xe10183ce) {
    return "int32_t cellMouseEnd(void)";
  } else if (fnid == 0x3138e632) {
    return "int32_t cellMouseGetData(uint32_t port_no, CellMouseData *data)";
  } else if (fnid == 0x6bd131f0) {
    return "int32_t cellMouseGetDataList(uint32_t port_no, CellMouseDataList *data)";
  } else if (fnid == 0x5baf30fb) {
    return "int32_t cellMouseGetInfo(CellMouseInfo *info)";
  } else if (fnid == 0x21a62e9b) {
    return "int32_t cellMouseGetTabletDataList(uint32_t port_no, CellMouseTabletDataList *data)";
  } else if (fnid == 0x4d0b3b1f) {
    return "int32_t cellMouseInfoTabletMode(uint32_t port_no, CellMouseInfoTablet *info)";
  } else if (fnid == 0xc9030138) {
    return "int32_t cellMouseInit(uint32_t max_connect)";
  } else if (fnid == 0x2d16da4f) {
    return "int32_t cellMouseSetTabletMode(uint32_t port_no, uint32_t mode)";
  } else if (fnid == 0x0d5f2c14) {
    return "int32_t cellPadClearBuf(uint32_t port_no)";
  } else if (fnid == 0xcf3051f7) {
    return "int32_t cellPadDbgGetData(uint32_t port_no, CellPadData *data)";
  } else if (fnid == 0x4d9b75d5) {
    return "int32_t cellPadEnd(void)";
  } else if (fnid == 0x8b72cda1) {
    return "int32_t cellPadGetData(uint32_t port_no, CellPadData *data)";
  } else if (fnid == 0x6bc09c61) {
    return "int32_t cellPadGetDataExtra(uint32_t port_no, uint32_t *device_type, CellPadData *data)";
  } else if (fnid == 0xa703a51d) {
    return "int32_t cellPadGetInfo2(CellPadInfo2 *info)";
  } else if (fnid == 0x1cf98800) {
    return "int cellPadInit(uint32_t max_connect)";
  } else if (fnid == 0x8b8231e5) {
    return "int32_t cellPadLddGetPortNo(int32_t handle)";
  } else if (fnid == 0xe442faa8) {
    return "int32_t cellPadLddUnregisterController(int32_t handle)";
  } else if (fnid == 0x8a00f264) {
    return "int32_t cellPadPeriphGetData(uint32_t port_no, CellPadPeriphData *data)";
  } else if (fnid == 0x4cc9b68d) {
    return "int32_t cellPadPeriphGetInfo(CellPadPeriphInfo *info)";
  } else if (fnid == 0xc01d9f97) {
    return "void printf(const char *pText)";
  } else if (fnid == 0x717b2502) {
    return "void stat(const opattr_t *pAttr, const char *pPath, stat_t *pStatus)";
  } else if (fnid == 0xef110b6b) {
    return "void unlink(const opattr_t *pAttr, const char *pPath)";
  } else if (fnid == 0xb79012ba) {
    return "void modff(floatInVec *i)";
  } else if (fnid == 0xb7dcbfdd) {
    return "__Setgloballocale";
  } else if (fnid == 0x045e124a) {
    return "operator {delete[](void*)}";
  } else if (fnid == 0x868531a3) {
    return "operator {delete[](void*,} unsigned int)";
  } else if (fnid == 0x4b1ad744) {
    return "operator {delete[](void*,} unsigned int, std::nothrow_t const&)";
  } else if (fnid == 0xbd35830b) {
    return "operator {delete[](void*,} unsigned int, void*)";
  } else if (fnid == 0x5298ef8e) {
    return "operator {delete[](void*,} std::nothrow_t const&)";
  } else if (fnid == 0x5438d7d8) {
    return "operator {delete[](void*,} void*)";
  } else if (fnid == 0xd84b3689) {
    return "operator delete(void*)";
  } else if (fnid == 0x31a81476) {
    return "operator delete(void*, unsigned int)";
  } else if (fnid == 0x67edde2f) {
    return "operator delete(void*, unsigned int, std::nothrow_t const&)";
  } else if (fnid == 0xe7d8449e) {
    return "operator delete(void*, unsigned int, void*)";
  } else if (fnid == 0xad382a99) {
    return "operator delete(void*, std::nothrow_t const&)";
  } else if (fnid == 0x94c49383) {
    return "operator delete(void*, void*)";
  } else if (fnid == 0xf58e83a5) {
    return "operator {new[](unsigned} int)";
  } else if (fnid == 0x96bc2578) {
    return "operator {new[](unsigned} int, unsigned int)";
  } else if (fnid == 0x2c241d13) {
    return "operator {new[](unsigned} int, unsigned int, std::nothrow_t const&)";
  } else if (fnid == 0x2356ef16) {
    return "operator {new[](unsigned} int, std::nothrow_t const&)";
  } else if (fnid == 0x83bca135) {
    return "std::logic_error::what() const";
  } else if (fnid == 0x883e1f16) {
    return "std::logic_error::_Doraise() const";
  } else if (fnid == 0x683ca70a) {
    return "std::_String_base::_Xlen() const";
  } else if (fnid == 0xc7931798) {
    return "std::_String_base::_Xran() const";
  } else if (fnid == 0x0ba5483c) {
    return "std::codecvt_base::do_encoding() const";
  } else if (fnid == 0x3e18602a) {
    return "std::codecvt_base::do_max_length() const";
  } else if (fnid == 0x16df5ecb) {
    return "std::codecvt_base::do_always_noconv() const";
  } else if (fnid == 0xe75f6e21) {
    return "std::length_error::_Doraise() const";
  } else if (fnid == 0xf1c86c92) {
    return "std::out_of_range::_Doraise() const";
  } else if (fnid == 0x5333bdc9) {
    return "std::runtime_error::what() const";
  } else if (fnid == 0x77c1d3a9) {
    return "std::runtime_error::_Doraise() const";
  } else if (fnid == 0xd05ea37c) {
    return "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::operator*() const";
  } else if (fnid == 0xf83e8d95) {
    return "std::ctype<char>::do_tolower(char) const";
  } else if (fnid == 0xa8f64fdb) {
    return "std::ctype<char>::do_tolower(char*, char const*) const";
  } else if (fnid == 0x6dbbb9de) {
    return "std::ctype<char>::do_toupper(char) const";
  } else if (fnid == 0xd9a12c5e) {
    return "std::ctype<char>::do_toupper(char*, char const*) const";
  } else if (fnid == 0x61f55c30) {
    return "std::ctype<char>::do_widen(char) const";
  } else if (fnid == 0x5adf9060) {
    return "std::ctype<char>::do_widen(char const*, char const*, char*) const";
  } else if (fnid == 0x91959ed6) {
    return "std::ctype<char>::do_narrow(char, char) const";
  } else if (fnid == 0xa957adcc) {
    return "std::ctype<char>::do_narrow(char const*, char const*, char, char*) const";
  } else if (fnid == 0x128cd621) {
    return "std::ctype<wchar_t>::do_scan_is(short, wchar_t const*, wchar_t const*) const";
  } else if (fnid == 0x9ec88ae6) {
    return "std::ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const";
  } else if (fnid == 0x9ef60bf3) {
    return "std::ctype<wchar_t>::do_tolower(wchar_t) const";
  } else if (fnid == 0xbf9c3609) {
    return "std::ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const";
  } else if (fnid == 0x7008e209) {
    return "std::ctype<wchar_t>::do_toupper(wchar_t) const";
  } else if (fnid == 0xef6f90d8) {
    return "std::ctype<wchar_t>::do_scan_not(short, wchar_t const*, wchar_t const*) const";
  } else if (fnid == 0x26e8e1cf) {
    return "std::ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, short*) const";
  } else if (fnid == 0x229a0963) {
    return "std::ctype<wchar_t>::do_is(short, wchar_t) const";
  } else if (fnid == 0x884b021b) {
    return "std::ctype<wchar_t>::_Dowiden(char) const";
  } else if (fnid == 0xa37c3e51) {
    return "std::ctype<wchar_t>::do_widen(char) const";
  } else if (fnid == 0xa35033e8) {
    return "std::ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const";
  } else if (fnid == 0x34b63588) {
    return "std::ctype<wchar_t>::_Donarrow(wchar_t, char) const";
  } else if (fnid == 0xdf1e09e1) {
    return "std::ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const";
  } else if (fnid == 0x14e3faa5) {
    return "std::ctype<wchar_t>::do_narrow(wchar_t, char) const";
  } else if (fnid == 0x0091a3fd) {
    return "std::locale::_Getfacet(unsigned int) const";
  } else if (fnid == 0xa74e5a27) {
    return "std::locale::operator==(std::locale const&) const";
  } else if (fnid == 0x2b05b95a) {
    return "std::_Mpunct<char>::do_grouping() const";
  } else if (fnid == 0x696b47f2) {
    return "std::_Mpunct<char>::do_neg_format() const";
  } else if (fnid == 0x753c71db) {
    return "std::_Mpunct<char>::do_pos_format() const";
  } else if (fnid == 0xe528a368) {
    return "std::_Mpunct<char>::do_curr_symbol() const";
  } else if (fnid == 0x2adccb1a) {
    return "std::_Mpunct<char>::do_frac_digits() const";
  } else if (fnid == 0x7142ad20) {
    return "std::_Mpunct<char>::do_decimal_point() const";
  } else if (fnid == 0xcc79f55d) {
    return "std::_Mpunct<char>::do_negative_sign() const";
  } else if (fnid == 0x9b5358f9) {
    return "std::_Mpunct<char>::do_positive_sign() const";
  } else if (fnid == 0x6c19db26) {
    return "std::_Mpunct<char>::do_thousands_sep() const";
  } else if (fnid == 0x75a0617c) {
    return "std::_Mpunct<wchar_t>::do_grouping() const";
  } else if (fnid == 0x1b6a7482) {
    return "std::_Mpunct<wchar_t>::do_neg_format() const";
  } else if (fnid == 0x268c3ea5) {
    return "std::_Mpunct<wchar_t>::do_pos_format() const";
  } else if (fnid == 0x5102ac61) {
    return "std::_Mpunct<wchar_t>::do_curr_symbol() const";
  } else if (fnid == 0x3933645f) {
    return "std::_Mpunct<wchar_t>::do_frac_digits() const";
  } else if (fnid == 0x040c18ff) {
    return "std::_Mpunct<wchar_t>::do_decimal_point() const";
  } else if (fnid == 0x17dd0a4e) {
    return "std::_Mpunct<wchar_t>::do_negative_sign() const";
  } else if (fnid == 0x06bc5b51) {
    return "std::_Mpunct<wchar_t>::do_positive_sign() const";
  } else if (fnid == 0x9891bf45) {
    return "std::_Mpunct<wchar_t>::do_thousands_sep() const";
  } else if (fnid == 0x550255f7) {
    return "std::codecvt<char, char, std::_Mbstatet>::do_unshift(std::_Mbstatet&, char*, char*, char*&) const";
  } else if (fnid == 0xfc563813) {
    return "std::codecvt<char, char, std::_Mbstatet>::do_in(std::_Mbstatet&, char const*, char const*, char const*&, char*, char*, char*&) const";
  } else if (fnid == 0x9f528cd3) {
    return "std::codecvt<char, char, std::_Mbstatet>::do_out(std::_Mbstatet&, char const*, char const*, char const*&, char*, char*, char*&) const";
  } else if (fnid == 0x29c11f46) {
    return "std::codecvt<char, char, std::_Mbstatet>::do_length(std::_Mbstatet const&, char const*, char const*, unsigned int) const";
  } else if (fnid == 0x2354ec0a) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_unshift(std::_Mbstatet&, char*, char*, char*&) const";
  } else if (fnid == 0x09e73a2a) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_encoding() const";
  } else if (fnid == 0xd76b2e07) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_max_length() const";
  } else if (fnid == 0x2cf8ea50) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_always_noconv() const";
  } else if (fnid == 0xf01deff8) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_in(std::_Mbstatet&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const";
  } else if (fnid == 0xa700bc7d) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_out(std::_Mbstatet&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const";
  } else if (fnid == 0x67948307) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::do_length(std::_Mbstatet const&, char const*, char const*, unsigned int) const";
  } else if (fnid == 0x5656ccff) {
    return "std::collate<char>::do_compare(char const*, char const*, char const*, char const*) const";
  } else if (fnid == 0xb3f05af3) {
    return "std::collate<char>::do_transform(char const*, char const*) const";
  } else if (fnid == 0x05903101) {
    return "std::collate<char>::do_hash(char const*, char const*) const";
  } else if (fnid == 0xbc5ad91c) {
    return "std::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const";
  } else if (fnid == 0x33e04d8e) {
    return "std::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const";
  } else if (fnid == 0x0bc08c57) {
    return "std::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const";
  } else if (fnid == 0x2ac890f4) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, bool&) const";
  } else if (fnid == 0x2c6ce396) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, double&) const";
  } else if (fnid == 0x4827e6be) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long double&) const";
  } else if (fnid == 0x5a3ad4bd) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, float&) const";
  } else if (fnid == 0xd5c5ee3d) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned int&) const";
  } else if (fnid == 0x4a799510) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long&) const";
  } else if (fnid == 0xa9e5bb16) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned long&) const";
  } else if (fnid == 0x643e67f4) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, void*&) const";
  } else if (fnid == 0x6437a975) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned short&) const";
  } else if (fnid == 0x67c09257) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long long&) const";
  } else if (fnid == 0xac6c23c0) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned long long&) const";
  } else if (fnid == 0x207b56fa) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getffld(char*, std::istreambuf_iterator<char, std::char_traits<char> >&, std::istreambuf_iterator<char, std::char_traits<char> >&, std::locale const&) const";
  } else if (fnid == 0x23ef7642) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getifld(char*, std::istreambuf_iterator<char, std::char_traits<char> >&, std::istreambuf_iterator<char, std::char_traits<char> >&, std::_Iosb<int>::_Fmtflags, std::locale const&) const";
  } else if (fnid == 0xfff6ef55) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, bool&) const";
  } else if (fnid == 0x59c77266) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, double&) const";
  } else if (fnid == 0x56fac416) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long double&) const";
  } else if (fnid == 0xf2b9ab86) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, float&) const";
  } else if (fnid == 0x9268d6e7) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned int&) const";
  } else if (fnid == 0x3f9cb259) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long&) const";
  } else if (fnid == 0xad6dbac2) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned long&) const";
  } else if (fnid == 0x2e2b80c8) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, void*&) const";
  } else if (fnid == 0x1474ac53) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned short&) const";
  } else if (fnid == 0x01aa0cef) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, long long&) const";
  } else if (fnid == 0xfefd7d3a) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, unsigned long long&) const";
  } else if (fnid == 0x2670b433) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getffld(char*, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::locale const&) const";
  } else if (fnid == 0xce6705c3) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getifld(char*, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::_Iosb<int>::_Fmtflags, std::locale const&) const";
  } else if (fnid == 0x21659e45) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_Fput(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char const*, unsigned int, unsigned int, unsigned int, unsigned int)";
  } else if (fnid == 0x2af79bd6) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_Iput(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char*, unsigned int) const";
  } else if (fnid == 0xab211d97) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, bool) const";
  } else if (fnid == 0x3fc2324d) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const";
  } else if (fnid == 0x258359df) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const";
  } else if (fnid == 0x00cf44f7) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const";
  } else if (fnid == 0x3937f2f8) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const";
  } else if (fnid == 0x0339259c) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, void const*) const";
  } else if (fnid == 0xb1550b3c) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const";
  } else if (fnid == 0x3bda45a7) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const";
  } else if (fnid == 0x61a23009) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Fput(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char const*, unsigned int, unsigned int, unsigned int, unsigned int)";
  } else if (fnid == 0x629b8531) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Iput(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char*, unsigned int) const";
  } else if (fnid == 0xb8ec13a5) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, bool) const";
  } else if (fnid == 0xf30d3407) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, double) const";
  } else if (fnid == 0xd2f9d93d) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long double) const";
  } else if (fnid == 0x823759d3) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const";
  } else if (fnid == 0xd4838fbd) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const";
  } else if (fnid == 0x020b22f3) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, void const*) const";
  } else if (fnid == 0x8a85d688) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const";
  } else if (fnid == 0x7da7fdb1) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const";
  } else if (fnid == 0x85b3c6da) {
    return "std::_Locinfo::_Getcvt() const";
  } else if (fnid == 0xf1543f02) {
    return "std::_Locinfo::_Getcoll() const";
  } else if (fnid == 0x8d4e266b) {
    return "std::_Locinfo::_Getctype() const";
  } else if (fnid == 0x6c8dc459) {
    return "std::bad_cast::what() const";
  } else if (fnid == 0x48d101ef) {
    return "std::ios_base::failure::_Doraise() const";
  } else if (fnid == 0x95082493) {
    return "std::messages<char>::do_get(int, int, int, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const";
  } else if (fnid == 0x113a515f) {
    return "std::messages<char>::do_open(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const";
  } else if (fnid == 0x63a2b2cc) {
    return "std::messages<char>::do_close(int) const";
  } else if (fnid == 0x6463d9ea) {
    return "std::messages<wchar_t>::do_get(int, int, int, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const";
  } else if (fnid == 0x8c2e6d06) {
    return "std::messages<wchar_t>::do_open(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const";
  } else if (fnid == 0xcbe74ad3) {
    return "std::messages<wchar_t>::do_close(int) const";
  } else if (fnid == 0x30195cf5) {
    return "std::numpunct<char>::do_grouping() const";
  } else if (fnid == 0x1a7f963c) {
    return "std::numpunct<char>::do_truename() const";
  } else if (fnid == 0xb1d696f7) {
    return "std::numpunct<char>::do_falsename() const";
  } else if (fnid == 0x18628537) {
    return "std::numpunct<char>::do_decimal_point() const";
  } else if (fnid == 0x29c90b94) {
    return "std::numpunct<char>::do_thousands_sep() const";
  } else if (fnid == 0x4e5cd916) {
    return "std::numpunct<wchar_t>::do_grouping() const";
  } else if (fnid == 0xe82a422d) {
    return "std::numpunct<wchar_t>::do_truename() const";
  } else if (fnid == 0x49d9ddaf) {
    return "std::numpunct<wchar_t>::do_falsename() const";
  } else if (fnid == 0x9c40d1f9) {
    return "std::numpunct<wchar_t>::do_decimal_point() const";
  } else if (fnid == 0x08e1865c) {
    return "std::numpunct<wchar_t>::do_thousands_sep() const";
  } else if (fnid == 0x0d644dca) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0xbd140e12) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x38783beb) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0xef62751c) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_date_order() const";
  } else if (fnid == 0x67fbabf0) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x002c338b) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x1bccd2ca) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getint(std::istreambuf_iterator<char, std::char_traits<char> >&, std::istreambuf_iterator<char, std::char_traits<char> >&, int, int, int&) const";
  } else if (fnid == 0x708cf940) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x23a87483) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0xebd4b51d) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x61248c80) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_date_order() const";
  } else if (fnid == 0x9dcb4bcb) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0xc7d0ee0c) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Iosb<int>::_Iostate&, std::tm*) const";
  } else if (fnid == 0x01409785) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getint(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, int, int, int&) const";
  } else if (fnid == 0xd1ee6195) {
    return "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::tm const*, char, char) const";
  } else if (fnid == 0xe9d7a4ae) {
    return "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::tm const*, char, char) const";
  } else if (fnid == 0x96634e42) {
    return "std::bad_alloc::what() const";
  } else if (fnid == 0xe54f1fe0) {
    return "std::bad_alloc::_Doraise() const";
  } else if (fnid == 0x50b34c09) {
    return "std::exception::what() const";
  } else if (fnid == 0x2d8be7e8) {
    return "std::exception::_Raise() const";
  } else if (fnid == 0x5e1f2d37) {
    return "std::exception::_Doraise() const";
  } else if (fnid == 0xd6ee1090) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Iosb<int>::_Iostate&, long double&) const";
  } else if (fnid == 0x12de5772) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Iosb<int>::_Iostate&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const";
  } else if (fnid == 0x9dbbe07d) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getmfld(std::istreambuf_iterator<char, std::char_traits<char> >&, std::istreambuf_iterator<char, std::char_traits<char> >&, bool, std::ios_base&) const";
  } else if (fnid == 0x49da8c5f) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Iosb<int>::_Iostate&, long double&) const";
  } else if (fnid == 0xc6f18e84) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Iosb<int>::_Iostate&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const";
  } else if (fnid == 0x4148e091) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getmfld(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, bool, std::ios_base&) const";
  } else if (fnid == 0xb326f699) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const";
  } else if (fnid == 0xb4352488) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const";
  } else if (fnid == 0x273be056) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_Putmfld(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, bool, std::basic_string<char, std::char_traits<char>, std::allocator<char> >) const";
  } else if (fnid == 0x635166c3) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const";
  } else if (fnid == 0xa464c70a) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const";
  } else if (fnid == 0x7ebad3f0) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Putmfld(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, bool, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const";
  } else if (fnid == 0x4e34cf83) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Grow(unsigned int, bool)";
  } else if (fnid == 0xc4c7993b) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Tidy(bool, unsigned int)";
  } else if (fnid == 0x9d6a8167) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(unsigned int, unsigned int)";
  } else if (fnid == 0x10dc3f6c) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(unsigned int, wchar_t)";
  } else if (fnid == 0x871506ea) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned int, unsigned int)";
  } else if (fnid == 0x79a415f8) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned int, unsigned int, wchar_t)";
  } else if (fnid == 0x64ce0374) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned int, unsigned int, wchar_t const*, unsigned int)";
  } else if (fnid == 0xcd33ed4f) {
    return "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string()";
  } else if (fnid == 0x336e904e) {
    return "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0x5560c79e) {
    return "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0xb0e7c2f3) {
    return "std::basic_istream<char, std::char_traits<char> >::~basic_istream()";
  } else if (fnid == 0x9cfc0eaf) {
    return "std::basic_istream<char, std::char_traits<char> >::~basic_istream()";
  } else if (fnid == 0x736c5f22) {
    return "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()";
  } else if (fnid == 0x6f1945fc) {
    return "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()";
  } else if (fnid == 0x668b31c6) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Grow(unsigned int, bool)";
  } else if (fnid == 0x31b3e5cc) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Tidy(bool, unsigned int)";
  } else if (fnid == 0xdd8b1d47) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned int, unsigned int)";
  } else if (fnid == 0xa9116516) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned int, char)";
  } else if (fnid == 0x6929318d) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, unsigned int)";
  } else if (fnid == 0x6b913d53) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned int, unsigned int, char)";
  } else if (fnid == 0x22777290) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned int, unsigned int, char const*, unsigned int)";
  } else if (fnid == 0x75975eb4) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*)";
  } else if (fnid == 0x9e741d47) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)";
  } else if (fnid == 0x5127dcd1) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()";
  } else if (fnid == 0x86c66cfc) {
    return "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()";
  } else if (fnid == 0xaea59ceb) {
    return "std::ctype_base::~ctype_base()";
  } else if (fnid == 0x18a38254) {
    return "std::ctype_base::~ctype_base()";
  } else if (fnid == 0xf1cff87d) {
    return "std::ctype_base::~ctype_base()";
  } else if (fnid == 0x522b0457) {
    return "std::istrstream::~istrstream()";
  } else if (fnid == 0xf127e816) {
    return "std::istrstream::~istrstream()";
  } else if (fnid == 0x9aa7a8b3) {
    return "std::istrstream::~istrstream()";
  } else if (fnid == 0x7a180518) {
    return "std::money_base::~money_base()";
  } else if (fnid == 0xab5832fd) {
    return "std::money_base::~money_base()";
  } else if (fnid == 0x9afa5d71) {
    return "std::money_base::~money_base()";
  } else if (fnid == 0x7fe08910) {
    return "std::moneypunct<char, false>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x7c391411) {
    return "std::moneypunct<char, false>::~moneypunct()";
  } else if (fnid == 0x1374b8c8) {
    return "std::moneypunct<char, false>::~moneypunct()";
  } else if (fnid == 0xb0c185b7) {
    return "std::moneypunct<char, true>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x45010630) {
    return "std::moneypunct<char, true>::~moneypunct()";
  } else if (fnid == 0xb509ab64) {
    return "std::moneypunct<char, true>::~moneypunct()";
  } else if (fnid == 0x7d23aa12) {
    return "std::moneypunct<wchar_t, false>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x20f7e066) {
    return "std::moneypunct<wchar_t, false>::~moneypunct()";
  } else if (fnid == 0x34edd72b) {
    return "std::moneypunct<wchar_t, false>::~moneypunct()";
  } else if (fnid == 0xd5244a29) {
    return "std::moneypunct<wchar_t, true>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xcf9b4d80) {
    return "std::moneypunct<wchar_t, true>::~moneypunct()";
  } else if (fnid == 0xa5306edb) {
    return "std::moneypunct<wchar_t, true>::~moneypunct()";
  } else if (fnid == 0x8729f617) {
    return "std::ostrstream::ostrstream(char*, int, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x4bc193c7) {
    return "std::ostrstream::ostrstream(char*, int, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x764ceaa4) {
    return "std::ostrstream::~ostrstream()";
  } else if (fnid == 0xd73321ed) {
    return "std::ostrstream::~ostrstream()";
  } else if (fnid == 0x0bcc1910) {
    return "std::ostrstream::~ostrstream()";
  } else if (fnid == 0x114e9178) {
    return "std::logic_error::~logic_error()";
  } else if (fnid == 0xbb4599c5) {
    return "std::logic_error::~logic_error()";
  } else if (fnid == 0x39775ce9) {
    return "std::logic_error::~logic_error()";
  } else if (fnid == 0xad6d839f) {
    return "std::codecvt_base::~codecvt_base()";
  } else if (fnid == 0x01f81190) {
    return "std::codecvt_base::~codecvt_base()";
  } else if (fnid == 0xfeb4107c) {
    return "std::codecvt_base::~codecvt_base()";
  } else if (fnid == 0x0d4290d2) {
    return "std::length_error::~length_error()";
  } else if (fnid == 0x4aec14d5) {
    return "std::length_error::~length_error()";
  } else if (fnid == 0x42c40b2f) {
    return "std::out_of_range::~out_of_range()";
  } else if (fnid == 0x604fec95) {
    return "std::out_of_range::~out_of_range()";
  } else if (fnid == 0xd830252c) {
    return "std::strstreambuf::_Init(int, char*, char*, int)";
  } else if (fnid == 0x2f29da90) {
    return "std::strstreambuf::_Tidy()";
  } else if (fnid == 0xb87c4b43) {
    return "std::strstreambuf::freeze(bool)";
  } else if (fnid == 0x4ef0eb8e) {
    return "std::strstreambuf::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x1f3a9ada) {
    return "std::strstreambuf::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xc862f7c8) {
    return "std::strstreambuf::overflow(int)";
  } else if (fnid == 0x6d483b7a) {
    return "std::strstreambuf::pbackfail(int)";
  } else if (fnid == 0xd78efcc3) {
    return "std::strstreambuf::underflow()";
  } else if (fnid == 0x1c8083c5) {
    return "std::strstreambuf::~strstreambuf()";
  } else if (fnid == 0xf001a741) {
    return "std::strstreambuf::~strstreambuf()";
  } else if (fnid == 0xba85ce08) {
    return "std::strstreambuf::~strstreambuf()";
  } else if (fnid == 0x2eb5c13a) {
    return "std::basic_filebuf<char, std::char_traits<char> >::sync()";
  } else if (fnid == 0xdb5eae26) {
    return "std::basic_filebuf<char, std::char_traits<char> >::_Init(std::_Filet*, std::basic_filebuf<char, std::char_traits<char> >::_Initfl)";
  } else if (fnid == 0x4520d6a2) {
    return "std::basic_filebuf<char, std::char_traits<char> >::_Lock()";
  } else if (fnid == 0x4761783a) {
    return "std::basic_filebuf<char, std::char_traits<char> >::imbue(std::locale const&)";
  } else if (fnid == 0x608abbb5) {
    return "std::basic_filebuf<char, std::char_traits<char> >::uflow()";
  } else if (fnid == 0x409409af) {
    return "std::basic_filebuf<char, std::char_traits<char> >::setbuf(char*, int)";
  } else if (fnid == 0x3eeb7167) {
    return "std::basic_filebuf<char, std::char_traits<char> >::_Unlock()";
  } else if (fnid == 0xf73f6afc) {
    return "std::basic_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x460e5cb7) {
    return "std::basic_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xad3777a2) {
    return "std::basic_filebuf<char, std::char_traits<char> >::overflow(int)";
  } else if (fnid == 0x3f6a6e68) {
    return "std::basic_filebuf<char, std::char_traits<char> >::_Endwrite()";
  } else if (fnid == 0xa2fd0ec5) {
    return "std::basic_filebuf<char, std::char_traits<char> >::pbackfail(int)";
  } else if (fnid == 0xdc981b5f) {
    return "std::basic_filebuf<char, std::char_traits<char> >::underflow()";
  } else if (fnid == 0x5ca98e4a) {
    return "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()";
  } else if (fnid == 0x8c6b8d39) {
    return "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()";
  } else if (fnid == 0xee853baf) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::sync()";
  } else if (fnid == 0xc6e09225) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Init(std::_Filet*, std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Initfl)";
  } else if (fnid == 0x8044f596) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Lock()";
  } else if (fnid == 0xb80ca215) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)";
  } else if (fnid == 0xf67a7e17) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::uflow()";
  } else if (fnid == 0x4b5a8abc) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, int)";
  } else if (fnid == 0xa1c6fc55) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Unlock()";
  } else if (fnid == 0xf9ff46a1) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xb6a4d760) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x8341b529) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(int)";
  } else if (fnid == 0xa94be0fa) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_Endwrite()";
  } else if (fnid == 0x0e147a9d) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(int)";
  } else if (fnid == 0x2954d64d) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow()";
  } else if (fnid == 0xe206c08f) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()";
  } else if (fnid == 0x6e61426d) {
    return "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()";
  } else if (fnid == 0x0e9a5554) {
    return "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()";
  } else if (fnid == 0x9f959451) {
    return "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()";
  } else if (fnid == 0xf7ba51fd) {
    return "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()";
  } else if (fnid == 0x5c15972f) {
    return "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()";
  } else if (fnid == 0x9111ec36) {
    return "std::messages_base::~messages_base()";
  } else if (fnid == 0x9facb533) {
    return "std::messages_base::~messages_base()";
  } else if (fnid == 0x0f930fdd) {
    return "std::messages_base::~messages_base()";
  } else if (fnid == 0x52330fbd) {
    return "std::runtime_error::~runtime_error()";
  } else if (fnid == 0x10231873) {
    return "std::runtime_error::~runtime_error()";
  } else if (fnid == 0x0ff264b9) {
    return "std::basic_streambuf<char, std::char_traits<char> >::sync()";
  } else if (fnid == 0x00c3975e) {
    return "std::basic_streambuf<char, std::char_traits<char> >::_Lock()";
  } else if (fnid == 0xc79278ec) {
    return "std::basic_streambuf<char, std::char_traits<char> >::imbue(std::locale const&)";
  } else if (fnid == 0x97911f5f) {
    return "std::basic_streambuf<char, std::char_traits<char> >::uflow()";
  } else if (fnid == 0x709ab035) {
    return "std::basic_streambuf<char, std::char_traits<char> >::setbuf(char*, int)";
  } else if (fnid == 0x4daf3fcf) {
    return "std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, int)";
  } else if (fnid == 0xadc2263b) {
    return "std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, int)";
  } else if (fnid == 0x85ba062f) {
    return "std::basic_streambuf<char, std::char_traits<char> >::_Unlock()";
  } else if (fnid == 0x143048bf) {
    return "std::basic_streambuf<char, std::char_traits<char> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x6c386f54) {
    return "std::basic_streambuf<char, std::char_traits<char> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xb9a2282d) {
    return "std::basic_streambuf<char, std::char_traits<char> >::overflow(int)";
  } else if (fnid == 0xeb76301c) {
    return "std::basic_streambuf<char, std::char_traits<char> >::pbackfail(int)";
  } else if (fnid == 0xcdafdf19) {
    return "std::basic_streambuf<char, std::char_traits<char> >::showmanyc()";
  } else if (fnid == 0x2d489b47) {
    return "std::basic_streambuf<char, std::char_traits<char> >::underflow()";
  } else if (fnid == 0xa79c4516) {
    return "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()";
  } else if (fnid == 0x055c1462) {
    return "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()";
  } else if (fnid == 0x1527fe95) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sync()";
  } else if (fnid == 0x085bff4f) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::_Lock()";
  } else if (fnid == 0xe5e1dcbc) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)";
  } else if (fnid == 0x94fa1f5b) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::uflow()";
  } else if (fnid == 0x7b5fce95) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, int)";
  } else if (fnid == 0xb1ac1fa3) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, int)";
  } else if (fnid == 0x76e846b2) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, int)";
  } else if (fnid == 0x57ef52f0) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::_Unlock()";
  } else if (fnid == 0x5a898327) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Iosb<int>::_Seekdir, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x6fe060a0) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<std::_Mbstatet>, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xd9d8af82) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::overflow(int)";
  } else if (fnid == 0xdab0a910) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(int)";
  } else if (fnid == 0x55481e6f) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::showmanyc()";
  } else if (fnid == 0x1f2e9f4e) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::underflow()";
  } else if (fnid == 0x2b88f26e) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()";
  } else if (fnid == 0x4fde96de) {
    return "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()";
  } else if (fnid == 0x03217f6f) {
    return "std::istreambuf_iterator<char, std::char_traits<char> >::_Peek()";
  } else if (fnid == 0x5b71b85d) {
    return "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::_Inc()";
  } else if (fnid == 0x93c638e9) {
    return "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::_Peek()";
  } else if (fnid == 0xbd58ea5a) {
    return "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::operator=(wchar_t)";
  } else if (fnid == 0xf05df017) {
    return "std::ctype<char>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x581fc95b) {
    return "std::ctype<char>::~ctype()";
  } else if (fnid == 0x6e4a84c1) {
    return "std::ctype<char>::~ctype()";
  } else if (fnid == 0x58fad1c1) {
    return "std::ctype<wchar_t>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xe8691be5) {
    return "std::ctype<wchar_t>::~ctype()";
  } else if (fnid == 0xdc4d7540) {
    return "std::ctype<wchar_t>::~ctype()";
  } else if (fnid == 0x577c2695) {
    return "std::_Mutex::_Lock()";
  } else if (fnid == 0xd356aefd) {
    return "std::_Mutex::_Unlock()";
  } else if (fnid == 0x75824de0) {
    return "std::_Mutex::_Mutex()";
  } else if (fnid == 0xce653b6c) {
    return "std::_Mutex::_Mutex()";
  } else if (fnid == 0x1c3f1c4f) {
    return "std::_Mutex::~_Mutex()";
  } else if (fnid == 0xda1b159a) {
    return "std::_Mutex::~_Mutex()";
  } else if (fnid == 0x8fa764f3) {
    return "std::_Winit::_Winit()";
  } else if (fnid == 0x767a4e70) {
    return "std::_Winit::_Winit()";
  } else if (fnid == 0xc612a38e) {
    return "std::_Winit::~_Winit()";
  } else if (fnid == 0xcb7d00a4) {
    return "std::_Winit::~_Winit()";
  } else if (fnid == 0x20a02b6d) {
    return "std::locale::id::operator unsigned int()";
  } else if (fnid == 0x61119152) {
    return "std::locale::_Init()";
  } else if (fnid == 0x7e7ac30e) {
    return "std::locale::empty()";
  } else if (fnid == 0x6cb1a335) {
    return "std::locale::facet::_Decref()";
  } else if (fnid == 0xda1088ce) {
    return "std::locale::facet::_Incref()";
  } else if (fnid == 0xe2b2ac5a) {
    return "std::locale::facet::_Register()";
  } else if (fnid == 0x1ee13e83) {
    return "std::locale::facet::~facet()";
  } else if (fnid == 0x6863452e) {
    return "std::locale::facet::~facet()";
  } else if (fnid == 0x83cba890) {
    return "std::locale::facet::~facet()";
  } else if (fnid == 0xdaf3996f) {
    return "std::locale::global(std::locale const&)";
  } else if (fnid == 0x7b1db41e) {
    return "std::locale::_Addfac(std::locale::facet*, unsigned int, unsigned int)";
  } else if (fnid == 0xaa520d9f) {
    return "std::locale::_Locimp::_Addfac(std::locale::facet*, unsigned int)";
  } else if (fnid == 0xf584de56) {
    return "std::locale::_Locimp::_Makeloc(std::_Locinfo const&, int, std::locale::_Locimp*, std::locale const*)";
  } else if (fnid == 0x5a6e4e50) {
    return "std::locale::_Locimp::_Makewloc(std::_Locinfo const&, int, std::locale::_Locimp*, std::locale const*)";
  } else if (fnid == 0x9c486668) {
    return "std::locale::_Locimp::_Makexloc(std::_Locinfo const&, int, std::locale::_Locimp*, std::locale const*)";
  } else if (fnid == 0x904dbd32) {
    return "std::locale::_Locimp::_Locimp(bool)";
  } else if (fnid == 0x2070a73d) {
    return "std::locale::_Locimp::_Locimp(std::locale::_Locimp const&)";
  } else if (fnid == 0xcac83a05) {
    return "std::locale::_Locimp::_Locimp(bool)";
  } else if (fnid == 0xb74f7b8f) {
    return "std::locale::_Locimp::_Locimp(std::locale::_Locimp const&)";
  } else if (fnid == 0x002e18d8) {
    return "std::locale::_Locimp::~_Locimp()";
  } else if (fnid == 0x07a3bd16) {
    return "std::locale::_Locimp::~_Locimp()";
  } else if (fnid == 0x95b43c9d) {
    return "std::locale::_Locimp::~_Locimp()";
  } else if (fnid == 0xc6ea0fd0) {
    return "std::locale::classic()";
  } else if (fnid == 0x01d9b3f5) {
    return "std::locale::locale(char const*, int)";
  } else if (fnid == 0x03cca12f) {
    return "std::locale::locale(std::locale const&, char const*, int)";
  } else if (fnid == 0x2ff8d101) {
    return "std::locale::locale(std::locale const&, std::locale const&, int)";
  } else if (fnid == 0x660882e8) {
    return "std::locale::locale()";
  } else if (fnid == 0x3d32a7f4) {
    return "std::locale::locale(char const*, int)";
  } else if (fnid == 0x563fd2be) {
    return "std::locale::locale(std::locale const&, char const*, int)";
  } else if (fnid == 0x01c4ef01) {
    return "std::locale::locale(std::locale const&, std::locale const&, int)";
  } else if (fnid == 0x5a5a9107) {
    return "std::locale::locale()";
  } else if (fnid == 0x1692ae0c) {
    return "std::locale::~locale()";
  } else if (fnid == 0x05a9cef6) {
    return "std::_Mpunct<char>::_Init(std::_Locinfo const&)";
  } else if (fnid == 0x1c8405dc) {
    return "std::_Mpunct<char>::_Mpunct(unsigned int, bool)";
  } else if (fnid == 0x30e297ea) {
    return "std::_Mpunct<char>::_Mpunct(std::_Locinfo const&, unsigned int, bool)";
  } else if (fnid == 0x47aab531) {
    return "std::_Mpunct<char>::~_Mpunct()";
  } else if (fnid == 0xf7845d1c) {
    return "std::_Mpunct<char>::~_Mpunct()";
  } else if (fnid == 0xe177fd02) {
    return "std::_Mpunct<char>::~_Mpunct()";
  } else if (fnid == 0x81027e75) {
    return "std::_Mpunct<wchar_t>::_Init(std::_Locinfo const&)";
  } else if (fnid == 0x9a449047) {
    return "std::_Mpunct<wchar_t>::_Mpunct(unsigned int, bool)";
  } else if (fnid == 0x62f52bb0) {
    return "std::_Mpunct<wchar_t>::_Mpunct(std::_Locinfo const&, unsigned int, bool)";
  } else if (fnid == 0x4cdab0ba) {
    return "std::_Mpunct<wchar_t>::~_Mpunct()";
  } else if (fnid == 0xc06a4cd8) {
    return "std::_Mpunct<wchar_t>::~_Mpunct()";
  } else if (fnid == 0xe8c15f8a) {
    return "std::_Mpunct<wchar_t>::~_Mpunct()";
  } else if (fnid == 0x6051c802) {
    return "std::codecvt<char, char, std::_Mbstatet>::~codecvt()";
  } else if (fnid == 0xf51dc289) {
    return "std::codecvt<char, char, std::_Mbstatet>::~codecvt()";
  } else if (fnid == 0xae7d042f) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x76db6974) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::~codecvt()";
  } else if (fnid == 0x0e9698af) {
    return "std::codecvt<wchar_t, char, std::_Mbstatet>::~codecvt()";
  } else if (fnid == 0x4ec89bf8) {
    return "std::collate<char>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x7cdbda48) {
    return "std::collate<char>::~collate()";
  } else if (fnid == 0x36e7826a) {
    return "std::collate<char>::~collate()";
  } else if (fnid == 0xabd92bcc) {
    return "std::collate<wchar_t>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x7882e64e) {
    return "std::collate<wchar_t>::~collate()";
  } else if (fnid == 0xf5825c7d) {
    return "std::collate<wchar_t>::~collate()";
  } else if (fnid == 0x854bc7c7) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()";
  } else if (fnid == 0xa562099c) {
    return "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()";
  } else if (fnid == 0xccf14bd5) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xb6a7ba7a) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()";
  } else if (fnid == 0x3da21a90) {
    return "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()";
  } else if (fnid == 0x46034d2e) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()";
  } else if (fnid == 0x76de9b0f) {
    return "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()";
  } else if (fnid == 0xfc825dda) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x667d741b) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()";
  } else if (fnid == 0x197fc348) {
    return "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()";
  } else if (fnid == 0x8a665143) {
    return "std::_Locinfo::_Addcats(int, char const*)";
  } else if (fnid == 0x2e84ebb3) {
    return "std::_Locinfo::_Locinfo(int, char const*)";
  } else if (fnid == 0x605131d5) {
    return "std::_Locinfo::_Locinfo(char const*)";
  } else if (fnid == 0x9fd2eea9) {
    return "std::_Locinfo::_Locinfo(int, char const*)";
  } else if (fnid == 0xd4ba5b31) {
    return "std::_Locinfo::_Locinfo(char const*)";
  } else if (fnid == 0x5119680b) {
    return "std::_Locinfo::~_Locinfo()";
  } else if (fnid == 0x47e5c318) {
    return "std::_Locinfo::~_Locinfo()";
  } else if (fnid == 0xf53021e0) {
    return "std::bad_cast::bad_cast()";
  } else if (fnid == 0xb33ef042) {
    return "std::bad_cast::~bad_cast()";
  } else if (fnid == 0xe3edd790) {
    return "std::bad_cast::~bad_cast()";
  } else if (fnid == 0x1989f59c) {
    return "std::ios_base::register_callback(void (*)(std::ios_base::event, std::ios_base&, int), int)";
  } else if (fnid == 0x4bda379a) {
    return "std::ios_base::Init::Init()";
  } else if (fnid == 0xce8c6abc) {
    return "std::ios_base::Init::Init()";
  } else if (fnid == 0x186bcc94) {
    return "std::ios_base::Init::~Init()";
  } else if (fnid == 0x294779fb) {
    return "std::ios_base::Init::~Init()";
  } else if (fnid == 0x3697bbd3) {
    return "std::ios_base::_Init()";
  } else if (fnid == 0x5949408e) {
    return "std::ios_base::_Tidy()";
  } else if (fnid == 0x4952490e) {
    return "std::ios_base::clear(std::_Iosb<int>::_Iostate, bool)";
  } else if (fnid == 0x2a16469d) {
    return "std::ios_base::imbue(std::locale const&)";
  } else if (fnid == 0xc5977986) {
    return "std::ios_base::_Addstd()";
  } else if (fnid == 0xdc0c889c) {
    return "std::ios_base::copyfmt(std::ios_base const&)";
  } else if (fnid == 0x1a4f2fa6) {
    return "std::ios_base::failure::~failure()";
  } else if (fnid == 0x4bee7ba9) {
    return "std::ios_base::failure::~failure()";
  } else if (fnid == 0xc013acd8) {
    return "std::ios_base::_Callfns(std::ios_base::event)";
  } else if (fnid == 0xaae64804) {
    return "std::ios_base::_Findarr(int)";
  } else if (fnid == 0x6daed882) {
    return "std::ios_base::~ios_base()";
  } else if (fnid == 0xdefe3230) {
    return "std::ios_base::~ios_base()";
  } else if (fnid == 0xd8b23008) {
    return "std::ios_base::~ios_base()";
  } else if (fnid == 0xa433147a) {
    return "std::messages<char>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xa22d5dda) {
    return "std::messages<char>::~messages()";
  } else if (fnid == 0xd8aeb94a) {
    return "std::messages<char>::~messages()";
  } else if (fnid == 0x66fcc6f4) {
    return "std::messages<wchar_t>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xe6547e35) {
    return "std::messages<wchar_t>::~messages()";
  } else if (fnid == 0xc22cebd8) {
    return "std::messages<wchar_t>::~messages()";
  } else if (fnid == 0xbd316983) {
    return "std::numpunct<char>::_Init(std::_Locinfo const&)";
  } else if (fnid == 0x30ce43d4) {
    return "std::numpunct<char>::~numpunct()";
  } else if (fnid == 0x984ce3d7) {
    return "std::numpunct<char>::~numpunct()";
  } else if (fnid == 0xc53ab1c0) {
    return "std::numpunct<wchar_t>::_Init(std::_Locinfo const&)";
  } else if (fnid == 0x0490855d) {
    return "std::numpunct<wchar_t>::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x49f7d434) {
    return "std::numpunct<wchar_t>::~numpunct()";
  } else if (fnid == 0x66f39adb) {
    return "std::numpunct<wchar_t>::~numpunct()";
  } else if (fnid == 0x9a194306) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Init(std::_Locinfo const&)";
  } else if (fnid == 0xa90c4ff2) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x1b9b3b5c) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()";
  } else if (fnid == 0x033c18f4) {
    return "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()";
  } else if (fnid == 0x02e40598) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Init(std::_Locinfo const&)";
  } else if (fnid == 0x718977c5) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x493212da) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()";
  } else if (fnid == 0x62d6bf82) {
    return "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()";
  } else if (fnid == 0x332f8409) {
    return "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xe667985a) {
    return "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()";
  } else if (fnid == 0xd7bc220d) {
    return "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()";
  } else if (fnid == 0x3286b855) {
    return "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x900d1fa4) {
    return "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()";
  } else if (fnid == 0xb4a8791f) {
    return "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()";
  } else if (fnid == 0x816aebc3) {
    return "std::bad_alloc::~bad_alloc()";
  } else if (fnid == 0x56d3d4f0) {
    return "std::bad_alloc::~bad_alloc()";
  } else if (fnid == 0x3ad12959) {
    return "std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*, bool)";
  } else if (fnid == 0xf00401d2) {
    return "std::basic_ios<char, std::char_traits<char> >::~basic_ios()";
  } else if (fnid == 0x867956a4) {
    return "std::basic_ios<char, std::char_traits<char> >::~basic_ios()";
  } else if (fnid == 0x8bfd4395) {
    return "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, bool)";
  } else if (fnid == 0xc3d24eb3) {
    return "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()";
  } else if (fnid == 0xba0b6300) {
    return "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()";
  } else if (fnid == 0xb8836b50) {
    return "std::exception::_Set_raise_handler(void (*)(std::exception const&))";
  } else if (fnid == 0x87b1f5eb) {
    return "std::exception::~exception()";
  } else if (fnid == 0x316b7a34) {
    return "std::exception::~exception()";
  } else if (fnid == 0x1a00f889) {
    return "std::exception::~exception()";
  } else if (fnid == 0x1b266c3d) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x6adc320a) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()";
  } else if (fnid == 0x360f8a4f) {
    return "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()";
  } else if (fnid == 0xabdc2b49) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xe196beab) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()";
  } else if (fnid == 0x0e744ef5) {
    return "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()";
  } else if (fnid == 0x7ff35597) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0xd7d92e51) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()";
  } else if (fnid == 0xdc65ab00) {
    return "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()";
  } else if (fnid == 0x6500d2d5) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_Getcat(std::locale::facet const**)";
  } else if (fnid == 0x8006c4ec) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()";
  } else if (fnid == 0xd93d52b1) {
    return "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()";
  } else if (fnid == 0xfb36c588) {
    return "std::strstream::strstream(char*, int, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0x55b3ebf2) {
    return "std::strstream::strstream(char*, int, std::_Iosb<int>::_Openmode)";
  } else if (fnid == 0xbda26024) {
    return "std::strstream::~strstream()";
  } else if (fnid == 0x643235cf) {
    return "std::strstream::~strstream()";
  } else if (fnid == 0xa3f5c3b2) {
    return "std::strstream::~strstream()";
  } else if (fnid == 0xda5469b3) {
    return "std::time_base::~time_base()";
  } else if (fnid == 0x4cb35e7d) {
    return "std::time_base::~time_base()";
  } else if (fnid == 0xc41d676d) {
    return "std::time_base::~time_base()";
  } else if (fnid == 0x83b2cc6f) {
    return "operator new(unsigned int)";
  } else if (fnid == 0xed3da02b) {
    return "operator new(unsigned int, unsigned int)";
  } else if (fnid == 0xb53fa02e) {
    return "operator new(unsigned int, unsigned int, std::nothrow_t const&)";
  } else if (fnid == 0xbb712718) {
    return "operator new(unsigned int, std::nothrow_t const&)";
  } else if (fnid == 0x8cda1f3b) {
    return "int std::_Getloctxt<char, std::istreambuf_iterator<char, std::char_traits<char> > >(std::istreambuf_iterator<char, std::char_traits<char> >&, std::istreambuf_iterator<char, std::char_traits<char> >&, unsigned int, char const*)";
  } else if (fnid == 0x5e55ab8c) {
    return "int std::_Getloctxt<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >&, unsigned int, wchar_t const*)";
  } else if (fnid == 0xd1b043b7) {
    return "wchar_t std::_Maklocchr<wchar_t>(char, wchar_t*, std::_Cvtvec const&)";
  } else if (fnid == 0x05ec37c8) {
    return "wchar_t* std::_Maklocstr<wchar_t>(char const*, wchar_t*, std::_Cvtvec const&)";
  } else if (fnid == 0x8c3afd4c) {
    return "std::unexpected()";
  } else if (fnid == 0xd38f4018) {
    return "char std::_Maklocbyte<wchar_t>(wchar_t, std::_Cvtvec const&)";
  } else if (fnid == 0x53693d40) {
    return "std::setiosflags(std::_Iosb<int>::_Fmtflags)";
  } else if (fnid == 0x84023c03) {
    return "std::setprecision(int)";
  } else if (fnid == 0x1b6ad260) {
    return "std::resetiosflags(std::_Iosb<int>::_Fmtflags)";
  } else if (fnid == 0xcb82e0dc) {
    return "std::set_terminate(void (*)())";
  } else if (fnid == 0x4aff73cc) {
    return "std::_Debug_message(char const*, char const*)";
  } else if (fnid == 0x91b0e37e) {
    return "std::set_unexpected(void (*)())";
  } else if (fnid == 0x6a6b90c9) {
    return "std::set_new_handler(void (*)())";
  } else if (fnid == 0xbaa15803) {
    return "std::setw(int)";
  } else if (fnid == 0x9cb73ee0) {
    return "std::_Throw(std::exception const&)";
  } else if (fnid == 0x78a142d0) {
    return "std::_Fiopen(char const*, std::_Iosb<int>::_Openmode, int)";
  } else if (fnid == 0x5015b8d3) {
    return "std::_Fiopen(wchar_t const*, std::_Iosb<int>::_Openmode, int)";
  } else if (fnid == 0x6b493669) {
    return "std::setbase(int)";
  } else if (fnid == 0x64ed868e) {
    return "std::terminate()";
  } else if (fnid == 0x417f47af) {
    return "std::moneypunct<char, false> const& std::use_facet<std::moneypunct<char, false> >(std::locale const&)";
  } else if (fnid == 0x2d50650f) {
    return "std::moneypunct<char, true> const& std::use_facet<std::moneypunct<char, true> >(std::locale const&)";
  } else if (fnid == 0xa8ece2e0) {
    return "std::moneypunct<wchar_t, false> const& std::use_facet<std::moneypunct<wchar_t, false> >(std::locale const&)";
  } else if (fnid == 0xdf7edb4d) {
    return "std::moneypunct<wchar_t, true> const& std::use_facet<std::moneypunct<wchar_t, true> >(std::locale const&)";
  } else if (fnid == 0x1cf6785d) {
    return "std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)";
  } else if (fnid == 0x411b923e) {
    return "std::numpunct<char> const& std::use_facet<std::numpunct<char> >(std::locale const&)";
  } else if (fnid == 0x1d43fb44) {
    return "std::numpunct<wchar_t> const& std::use_facet<std::numpunct<wchar_t> >(std::locale const&)";
  } else if (fnid == 0x3bac19dc) {
    return "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0xa4f6a919) {
    return "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0xef959a6d) {
    return "non-virtual thunk to std::strstream::~strstream()";
  } else if (fnid == 0x74a39b4f) {
    return "non-virtual thunk to std::strstream::~strstream()";
  } else if (fnid == 0xfe468b7a) {
    return "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0x928fbe36) {
    return "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()";
  } else if (fnid == 0x65f19631) {
    return "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()";
  } else if (fnid == 0x281f9107) {
    return "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()";
  } else if (fnid == 0xffaf3218) {
    return "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()";
  } else if (fnid == 0x79ad3575) {
    return "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()";
  } else if (fnid == 0xece969c0) {
    return "virtual thunk to std::istrstream::~istrstream()";
  } else if (fnid == 0x6e0bf85d) {
    return "virtual thunk to std::istrstream::~istrstream()";
  } else if (fnid == 0x88052736) {
    return "virtual thunk to std::ostrstream::~ostrstream()";
  } else if (fnid == 0xa1de25c2) {
    return "virtual thunk to std::ostrstream::~ostrstream()";
  } else if (fnid == 0x5ed4fb7a) {
    return "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()";
  } else if (fnid == 0x3783acfa) {
    return "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()";
  } else if (fnid == 0x903afa37) {
    return "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()";
  } else if (fnid == 0x07b6c924) {
    return "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()";
  } else if (fnid == 0x19c901ce) {
    return "virtual thunk to std::strstream::~strstream()";
  } else if (fnid == 0x2daa5a42) {
    return "virtual thunk to std::strstream::~strstream()";
  } else if (fnid == 0xf254768c) {
    return "int sys_dbg_disable_floating_point_enabled_exception(sys_ppu_thread_t id, uint64_t flags, uint64_t opt1, uint64_t opt2)";
  } else if (fnid == 0x3147c6ca) {
    return "int sys_dbg_enable_floating_point_enabled_exception(sys_ppu_thread_t id, uint64_t flags, uint64_t opt1, uint64_t opt2)";
  } else if (fnid == 0xc0eb9266) {
    return "int sys_dbg_finalize_ppu_exception_handler(void)";
  } else if (fnid == 0xbb0ae221) {
    return "int sys_dbg_get_address_from_dabr(uint64_t* addr, uint64_t* ctrl_flag)";
  } else if (fnid == 0x63bd413e) {
    return "int sys_dbg_get_cond_information(sys_cond_t id, sys_dbg_cond_information_t* info)";
  } else if (fnid == 0xb9da87d3) {
    return "int sys_dbg_get_coredump_params(sys_dbg_coredump_parameter_t* param)";
  } else if (fnid == 0xdf856979) {
    return "int sys_dbg_get_event_flag_information(sys_event_flag_t id, sys_dbg_event_flag_information_t* info)";
  } else if (fnid == 0x381ae33e) {
    return "int sys_dbg_get_event_queue_information(sys_event_queue_t id, sys_dbg_event_queue_information_t* info)";
  } else if (fnid == 0x7bdadb01) {
    return "int sys_dbg_get_lwcond_information(sys_lwcond_pseudo_id_t id, sys_dbg_lwcond_information_t* info)";
  } else if (fnid == 0xcb377e36) {
    return "int sys_dbg_get_lwmutex_information(sys_lwmutex_pseudo_id_t id, sys_dbg_lwmutex_information_t* info)";
  } else if (fnid == 0x50453aa8) {
    return "int sys_dbg_get_mutex_information(sys_mutex_t id, sys_dbg_mutex_information_t* info)";
  } else if (fnid == 0x113b0bea) {
    return "int sys_dbg_get_ppu_thread_ids(sys_ppu_thread_t* ids, uint64_t* ids_num, uint64_t* all_ids_num)";
  } else if (fnid == 0x4b55f456) {
    return "int sys_dbg_get_ppu_thread_name(sys_ppu_thread_t id, char* name)";
  } else if (fnid == 0x6b413178) {
    return "int sys_dbg_get_ppu_thread_status(sys_ppu_thread_t id, sys_dbg_ppu_thread_status_t* status)";
  } else if (fnid == 0x9794bb53) {
    return "int sys_dbg_get_rwlock_information(sys_rwlock_t id, sys_dbg_rwlock_information_t* info)";
  } else if (fnid == 0xa2d6cbd2) {
    return "int sys_dbg_get_semaphore_information(sys_semaphore_t id, sys_dbg_semaphore_information_t* info)";
  } else if (fnid == 0x08ef08a9) {
    return "int sys_dbg_get_spu_thread_group_ids(sys_spu_thread_group_t* ids, uint64_t* ids_num, uint64_t* all_ids_num)";
  } else if (fnid == 0xbd69e584) {
    return "int sys_dbg_get_spu_thread_group_name(sys_spu_thread_group_t id, char* name)";
  } else if (fnid == 0x9ddb9dc3) {
    return "int sys_dbg_get_spu_thread_group_status(sys_spu_thread_group_t id, sys_dbg_spu_thread_group_status_t* status)";
  } else if (fnid == 0x1860f909) {
    return "int sys_dbg_get_spu_thread_ids(sys_spu_thread_group_t group_id, sys_spu_thread_t* ids, uint64_t* ids_num, uint64_t* all_ids_num)";
  } else if (fnid == 0x3e5eed36) {
    return "int sys_dbg_get_spu_thread_name(sys_spu_thread_t id, char* name)";
  } else if (fnid == 0xc353353a) {
    return "int sys_dbg_initialize_ppu_exception_handler(int prio)";
  } else if (fnid == 0x590a276e) {
    return "int sys_dbg_mat_get_condition(sys_addr_t addr, uint64_t *condition_p)";
  } else if (fnid == 0x24a3d413) {
    return "int sys_dbg_mat_set_condition(sys_addr_t addr, uint64_t condition)";
  } else if (fnid == 0xc5eef17f) {
    return "int sys_dbg_read_ppu_thread_context(sys_ppu_thread_t id, sys_dbg_ppu_thread_context_t* ppu_context)";
  } else if (fnid == 0x266c2bd3) {
    return "int sys_dbg_read_spu_thread_context2(sys_spu_thread_t id, sys_dbg_spu_thread_context2_t* spu_context)";
  } else if (fnid == 0x22916f45) {
    return "int sys_dbg_register_ppu_exception_handler(uint64_t ctrl_flags)";
  } else if (fnid == 0xdb14b37b) {
    return "int sys_dbg_set_address_to_dabr(uint64_t addr, uint64_t ctrl_flag)";
  } else if (fnid == 0xab475d53) {
    return "int sys_dbg_set_mask_to_ppu_exception_handler(uint64_t mask, uint64_t flags)";
  } else if (fnid == 0x06a840f5) {
    return "int sys_dbg_set_stacksize_ppu_exception_handler(size_t stacksize)";
  } else if (fnid == 0xd830062a) {
    return "int sys_dbg_signal_to_coredump_handler(uint64_t data1, uint64_t data2, uint64_t data3)";
  } else if (fnid == 0x4ded9f6c) {
    return "int sys_dbg_signal_to_ppu_exception_handler(uint64_t flags)";
  } else if (fnid == 0xc6d7ec13) {
    return "int sys_dbg_unregister_ppu_exception_handler(void)";
  } else if (fnid == 0x580f8203) {
    return "int sys_dbg_vm_get_page_information(sys_vm_page_information_t *pageinfo)";
  } else if (fnid == 0xc94f6939) {
    return "int accept(int s, struct_sockaddr *addr, socklen_t *paddrlen)";
  } else if (fnid == 0xb0a59804) {
    return "int bind(int s, const struct_sockaddr *addr, socklen_t addrlen)";
  } else if (fnid == 0x64f66d35) {
    return "int connect(int s, const struct_sockaddr *addr, socklen_t addrlen)";
  } else if (fnid == 0xf7ac8941) {
    return "void gethostbyaddr(const char *addr, socklen_t len, int type)";
  } else if (fnid == 0x71f4c717) {
    return "void gethostbyname(const char *name)";
  } else if (fnid == 0xf9ec2db6) {
    return "int getpeername(int s, struct_sockaddr *addr, socklen_t *paddrlen)";
  } else if (fnid == 0x13efe7f5) {
    return "int getsockname(int s, struct_sockaddr *addr, socklen_t *paddrlen)";
  } else if (fnid == 0x5a045bd1) {
    return "int getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)";
  } else if (fnid == 0xdabbc2c0) {
    return "in_addr_t inet_addr(const char *cp)";
  } else if (fnid == 0xa9a079e0) {
    return "int inet_aton(const char *cp, struct_in_addr *addr)";
  } else if (fnid == 0xb4152c74) {
    return "void inet_makeaddr(in_addr_t net, in_addr_t host)";
  } else if (fnid == 0x506ad863) {
    return "in_addr_t inet_network(const char *cp)";
  } else if (fnid == 0xc98a3146) {
    return "void inet_ntop(int af, const void *src, char *dst, socklen_t size)";
  } else if (fnid == 0x8af3825e) {
    return "int inet_pton(int af, const char *src, void *dst)";
  } else if (fnid == 0x28e208bb) {
    return "int listen(int s, int backlog)";
  } else if (fnid == 0xfba04f37) {
    return "ssize_t recv(int s, void *buf, size_t len, int flags)";
  } else if (fnid == 0x1f953b9f) {
    return "ssize_t recvfrom(int s, void *buf, size_t len, int flags, struct_sockaddr *addr, socklen_t *paddrlen)";
  } else if (fnid == 0xc9d09c34) {
    return "ssize_t recvmsg(int s, struct_msghdr *msg, int flags)";
  } else if (fnid == 0xdc751b40) {
    return "ssize_t send(int s, const void *buf, size_t len, int flags)";
  } else if (fnid == 0xad09481b) {
    return "ssize_t sendmsg(int s, const struct_msghdr *msg, int flags)";
  } else if (fnid == 0x9647570b) {
    return "ssize_t sendto(int s, const void *buf, size_t len, int flags, const struct_sockaddr *addr, socklen_t addrlen)";
  } else if (fnid == 0x88f03575) {
    return "int setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)";
  } else if (fnid == 0xa50777c6) {
    return "int shutdown(int s, int how)";
  } else if (fnid == 0x9c056962) {
    return "int socket(int family, int type, int protocol)";
  } else if (fnid == 0x6db6e8cd) {
    return "int socketclose(int s)";
  } else if (fnid == 0x051ee3ee) {
    return "int socketpoll(struct_pollfd *fds, int nfds, int ms)";
  } else if (fnid == 0x3f09e20a) {
    return "int socketselect(int nfds, struct_fd_set *readfds, struct_fd_set *writefds, struct_fd_set *exceptfds, struct_timeval *timeout)";
  } else if (fnid == 0x8ccf05ed) {
    return "int sys_net_abort_resolver(sys_net_thread_id_t tid, int flags)";
  } else if (fnid == 0x8d1b77fb) {
    return "int sys_net_abort_socket(int s, int flags)";
  } else if (fnid == 0x44328aa2) {
    return "int sys_net_close_dump(int id, int *pflags)";
  } else if (fnid == 0xb68d5625) {
    return "int sys_net_finalize_network(void)";
  } else if (fnid == 0xfdb8f926) {
    return "int sys_net_free_thread_context(sys_net_thread_id_t tid, int flags)";
  } else if (fnid == 0x1d14d6e4) {
    return "int sys_net_get_lib_name_server(struct_in_addr *primary, struct_in_addr *secondary)";
  } else if (fnid == 0x368823c0) {
    return "int sys_net_get_netemu_test_param(sys_net_test_param_t *param)";
  } else if (fnid == 0x3b27c780) {
    return "int sys_net_get_sockinfo(int s, sys_net_sockinfo_t *p, int n)";
  } else if (fnid == 0xa765d029) {
    return "int sys_net_get_sockinfo_ex(int s, sys_net_sockinfo_ex_t *p, int n, int flags)";
  } else if (fnid == 0x05bd4438) {
    return "int sys_net_get_udpp2p_test_param(sys_net_udpp2p_test_param_t *param)";
  } else if (fnid == 0x27fb339d) {
    return "int sys_net_if_ctl(int if_id, int code, void *ptr, int len)";
  } else if (fnid == 0x139a9e9b) {
    return "int sys_net_initialize_network_ex(sys_net_initialize_parameter_t *param)";
  } else if (fnid == 0xab447704) {
    return "int sys_net_open_dump(int len, int flags)";
  } else if (fnid == 0x89c9917c) {
    return "int sys_net_read_dump(int id, void *buf, int len, int *pflags)";
  } else if (fnid == 0x9a318259) {
    return "int sys_net_set_lib_name_server(struct_in_addr *primary, struct_in_addr *secondary)";
  } else if (fnid == 0xe2434507) {
    return "int sys_net_set_netemu_test_param(sys_net_test_param_t *param)";
  } else if (fnid == 0x7687d48c) {
    return "int sys_net_set_resolver_configurations(int retrans, int retry, int flags)";
  } else if (fnid == 0x10b81ed6) {
    return "int sys_net_set_udpp2p_test_param(sys_net_udpp2p_test_param_t *param)";
  } else if (fnid == 0xb48636c4) {
    return "int sys_net_show_ifconfig(void)";
  } else if (fnid == 0x5420e419) {
    return "int sys_net_show_nameserver(void)";
  } else if (fnid == 0x79b61646) {
    return "int sys_net_show_route(void)";
  } else if (fnid == 0x71a8472a) {
    return "int sys_get_random_number(void* addr, uint64_t size)";
  } else if (fnid == 0x4a071d98) {
    return "int sys_interrupt_thread_disestablish(sys_interrupt_thread_handle_t ih)";
  } else if (fnid == 0xda0eb71a) {
    return "int sys_lwcond_create(sys_lwcond_t *lwcond, sys_lwmutex_t *lwmutex, sys_lwcond_attribute_t *attr)";
  } else if (fnid == 0x1c9a942c) {
    return "int sys_lwcond_destroy(sys_lwcond_t *lwcond)";
  } else if (fnid == 0xef87a695) {
    return "int sys_lwcond_signal(sys_lwcond_t *lwcond)";
  } else if (fnid == 0xe9a1bd84) {
    return "int sys_lwcond_signal_all(sys_lwcond_t *lwcond)";
  } else if (fnid == 0x52aadadf) {
    return "int sys_lwcond_signal_to(sys_lwcond_t *lwcond, sys_ppu_thread_t ppu_thread_id)";
  } else if (fnid == 0x2a6d9d51) {
    return "int sys_lwcond_wait(lwcond_t *lwcond, usecond_t timeout)";
  } else if (fnid == 0x2f85c0ef) {
    return "int sys_lwmutex_create(sys_lwmutex_t *lwmutex, sys_lwmutex_attribute_t *attr)";
  } else if (fnid == 0xc3476d0c) {
    return "int sys_lwmutex_destroy(sys_lwmutex_t *lwmutex)";
  } else if (fnid == 0x1573dc3f) {
    return "int sys_lwmutex_lock(sys_lwmutex_t *lwmutex, usecond_t timeout)";
  } else if (fnid == 0xaeb78725) {
    return "int sys_lwmutex_trylock(sys_lwmutex_t *lwmutex)";
  } else if (fnid == 0x1bc200f4) {
    return "int sys_lwmutex_unlock(sys_lwmutex_t *lwmutex)";
  } else if (fnid == 0xa146a143) {
    return "void sys_mempool_allocate_block(sys_mempool_t mempool)";
  } else if (fnid == 0xca9a60bf) {
    return "int sys_mempool_create(sys_mempool_t *mempool, void *chunk, const uint64_t chunk_size, const uint64_t block_size, const uint64_t ralignment)";
  } else if (fnid == 0x9d3c0f81) {
    return "void sys_mempool_destroy(sys_mempool_t mempool)";
  } else if (fnid == 0x608212fc) {
    return "int sys_mempool_free_block(sys_mempool_t mempool, void *block)";
  } else if (fnid == 0x25596f51) {
    return "uint64_t sys_mempool_get_count(sys_mempool_t mempool)";
  } else if (fnid == 0x05c65656) {
    return "void sys_mempool_try_allocate_block(sys_mempool_t mempool)";
  } else if (fnid == 0xb257540b) {
    return "int sys_mmapper_allocate_memory(uint64_t size, uint64_t flags, sys_memory_t *mem_id)";
  } else if (fnid == 0x70258515) {
    return "int sys_mmapper_allocate_memory_from_container(size_t size, sys_memory_container_t container, uint64_t flags, sys_memory_t *mem_id)";
  } else if (fnid == 0x409ad939) {
    return "int sys_mmapper_free_memory(sys_memory_t mem_id)";
  } else if (fnid == 0xdc578057) {
    return "int sys_mmapper_map_memory(sys_addr_t start_addr, sys_memory_t mem_id, uint64_t flags)";
  } else if (fnid == 0x4643ba6e) {
    return "int sys_mmapper_unmap_memory(sys_addr_t start_addr, sys_memory_t *mem_id)";
  } else if (fnid == 0x24a1ea07) {
    return "int sys_ppu_thread_create(sys_ppu_thread_t *thread_id, uint64_t arg, int prio, size_t stacksize, uint64_t flags, const char *threadname)";
  } else if (fnid == 0xaff080a4) {
    return "void sys_ppu_thread_exit(uint64_t val)";
  } else if (fnid == 0x350d454e) {
    return "int sys_ppu_thread_get_id(sys_ppu_thread_t *thread_id)";
  } else if (fnid == 0xa3e3be68) {
    return "void sys_ppu_thread_once(int *once_ctrl)";
  } else if (fnid == 0xe6f2c1e7) {
    return "void sys_process_exit(int status)";
  } else if (fnid == 0x4f7172c9) {
    return "int sys_process_is_stack(const void *p)";
  } else if (fnid == 0x0341bb97) {
    return "void sys_prx_get_module_id_by_address(void* addr)";
  } else if (fnid == 0xe0998dbf) {
    return "void sys_prx_get_module_id_by_name(const char* name, sys_prx_get_module_id_by_name_option_t *pOpt)";
  } else if (fnid == 0x84bb6774) {
    return "int sys_prx_get_module_info(sys_prx_module_info_t *pInfo)";
  } else if (fnid == 0xa5d06bf0) {
    return "int sys_prx_get_module_list(sys_prx_get_module_list_t *pInfo)";
  } else if (fnid == 0x74311398) {
    return "void sys_prx_get_my_module_id(void)";
  } else if (fnid == 0x26090058) {
    return "void sys_prx_load_module(const char* path)";
  } else if (fnid == 0xef68c17c) {
    return "void sys_prx_load_module_by_fd(int fd, off64_t offset)";
  } else if (fnid == 0xaa6d9bff) {
    return "void sys_prx_load_module_on_memcontainer(const char* path, sys_memory_container_t mem_container)";
  } else if (fnid == 0xa330ad84) {
    return "void sys_prx_load_module_on_memcontainer_by_fd(int fd, sys_memory_container_t mem_container)";
  } else if (fnid == 0x42b23552) {
    return "int sys_prx_register_library(void* library)";
  } else if (fnid == 0x9f18429d) {
    return "int sys_prx_start_module(size_t args, void *argp, int *modres)";
  } else if (fnid == 0x80fb0c19) {
    return "int sys_prx_stop_module(size_t args, void *argp, int *modres)";
  } else if (fnid == 0xd0ea47a7) {
    return "int sys_prx_unregister_library(void* library)";
  } else if (fnid == 0xb995662e) {
    return "int sys_raw_spu_image_load(sys_raw_spu_t id, sys_spu_image_t *img)";
  } else if (fnid == 0x893305fa) {
    return "int sys_raw_spu_load(sys_raw_spu_t id, const char *path, uint32_t *entry)";
  } else if (fnid == 0x8c2bb498) {
    return "void sys_spinlock_initialize(int *lock)";
  } else if (fnid == 0xa285139d) {
    return "void sys_spinlock_lock(int *lock)";
  } else if (fnid == 0x722a0254) {
    return "int sys_spinlock_trylock(int *lock)";
  } else if (fnid == 0x5267cb35) {
    return "void sys_spinlock_unlock(int *lock)";
  } else if (fnid == 0xe0da8efd) {
    return "int sys_spu_image_close(sys_spu_image_t *img)";
  } else if (fnid == 0xebe5f72f) {
    return "int sys_spu_image_import(sys_spu_image_t *img, const void *src, uint32_t type)";
  } else {
    return "";
  }
}


