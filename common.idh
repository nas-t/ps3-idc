/*
 * common.idc -- Common functions for my IDC scripts
 *
 * Copyright (C) Youness Alaoui (KaKaRoTo)
 * Copyright (C) nas
 *
 * This software is distributed under the terms of the GNU General Public
 * License ("GPL") version 3, as published by the Free Software Foundation.
 *
 */

#include <idc.idc>

#include "fnids.idh"
#include "syscall_names.idh"

static FindOpd() {
  auto ea, seg, toc, next_toc, found_seg, opd_start;

  found_seg = 0;

  for (seg = FirstSeg(); found_seg == 0 && NextSeg(seg) != seg; seg = NextSeg(seg)) {
    for (ea = SegStart(seg); ea + 8 < SegEnd(seg); ea = ea + 8) {
      toc = Dword(ea + 0x04);
      next_toc = Dword(ea + 0x0C);
      if (toc == 0  || toc == 0xFFFFFFFF || toc != next_toc) {
	found_seg = 0;
	break;
      }
      found_seg = seg;
    }
  }

  if (found_seg != 0) {
    RenameSeg(found_seg, ".opd");
    Message("Found Opd: 0x%X - TOC = 0x%X\n", found_seg, Dword(found_seg + 0x04));
  }else{
    opd_start = AskAddr(BADADDR, "Start of OPDs not found, please enter manually:");
    if (opd_start != BADADDR)
    {
      RenameSeg(opd_start, ".opd");
      RenameSeg(NextSeg(opd_start), ".got");
      return opd_start;
    }else
      return 0;
  }

  return found_seg;
}


static CreateOpd_lv2 (toc_addr) {
  auto ea, func;

  CreateOpdStructure();

  MakeName(toc_addr, "TOC");

  Message("Defining OPD section entries\n");

  ea = toc_addr - 0x8000;
  /* Find last OPD entry */
  while (ea != BADADDR && Dword(ea - 0xC) != toc_addr) {
    ea = ea - 0x04;
  }

  while (ea != BADADDR && Dword(ea - 0xC) == toc_addr) {
    ea = ea - 0x10;
    MakeUnknown(ea, 0x10, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x10, "OPD_s");
    func = Dword(ea + 0x4);
    MakeFunction(func, BADADDR);
  }
}

static CreateOpd_gprx (toc_addr) {
  auto ea, func;

  CreateOpdStructure();

  Message("Defining OPD section entries\n");

  ea = toc_addr - 0x8000;
  /* Find last OPD entry */
  while (ea != BADADDR && Dword(ea - 0x04) != toc_addr) {
    ea = ea - 0x04;
  }

  while (ea != BADADDR && Dword(ea - 0x04) == toc_addr) {
    ea = ea - 0x08;
    MakeUnknown(ea, 0x08, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x08, "OPD_s");
    func = Dword(ea);
    MakeFunction(func, BADADDR);
  }

  return ea;
}

static CreateOpd_prx (toc_addr) {
  auto ea, func;

  CreateOpdStructure();

  MakeName(toc_addr, "TOC");

  Message("Defining OPD section entries\n");

  ea = toc_addr - 0x8000;
  /* Find last OPD entry */
  while (ea != BADADDR && Dword(ea - 0xC) != toc_addr && ea > 0) {
    ea = ea - 0x04;
  }
  
  if(ea==0)
  {
    ea = NextSeg(FirstSeg());
    /* Find last OPD entry */
    while (ea != BADADDR && Dword(ea - 0xC) != toc_addr && ea > 0) {
      ea = ea + 0x04;
    }
  }
  
  Message("ea: 0x%x\n", ea);

  while (ea != BADADDR && Dword(ea - 0xC) == toc_addr) {
    ea = ea - 0x8;
    MakeUnknown(ea, 0x8, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x8, "OPD_s");
    func = Dword(ea + 0x4);
    MakeFunction(func, BADADDR);
  }
}

static CreateStructure(name) {
  auto id;

  Message(form("Creating structure %s\n", name));

  id = GetStrucIdByName(name);
  if (id != -1) {
    Message(form("Structure %s already exists. Renaming it\n", name));
    if (SetStrucName(id, form("%s_renamed", name)) == 0) {
      Message(form("Structure %s_renamed already exists. deleting existing structure\n", name));
      DelStruc(id);
    }
    id = -1;
  }
  id = AddStrucEx(-1, name, 0);
  if (id == -1) {
    Message (form("Error creating %s structure\n", name));
    return 0;
  }

  return id;
}


static CreateOpdStructure(void) {
  auto id;

  id = CreateStructure("OPD_s");
  AddStrucMember(id, "sub", 0x00, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "toc", 0x04, FF_DWRD | FF_0OFF, 0, 4);

  return 1;
}


static CreateOpdStructure64(void) {
  auto id;

  id = CreateStructure("OPD_s");
  AddStrucMember(id, "sub", 0x00, FF_QWRD | FF_0OFF, 0, 8);
  AddStrucMember(id, "toc", 0x08, FF_QWRD | FF_0OFF, 0, 8);
  AddStrucMember(id, "toc", 0x10, FF_QWRD, 0, 8);
  return 1;
}

static CreateOpd (toc_addr, opd) {
  auto ea, func;

  CreateOpdStructure();

  Message("Defining OPD section entries\n");

  //ea = toc_addr - 0x8000;
  /* Find last OPD entry */
  //while (ea != BADADDR && !(Dword(ea - 0x04) == toc_addr && Dword(ea - 0x0C) == toc_addr && Dword(ea - 0x14) == toc_addr && Dword(ea - 0x1C) == toc_addr && Dword(ea - 0x24) == toc_addr && Dword(ea - 0x2C) == toc_addr && Dword(ea - 0x34) == toc_addr)) {
  //  ea = ea - 0x04;
  //}

  ea = opd;
  while (ea != BADADDR && Dword(ea + 0x04) == toc_addr) {
    MakeUnknown(ea, 0x08, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x08, "OPD_s");
    func = Dword(ea);
    MakeFunction(func, BADADDR);
    ea = ea + 0x08;
  }

  return ea;
}

static CreateOpd64 (toc_addr, opd) {
  auto ea, func;

  CreateOpdStructure64();

  Message("Defining OPD section entries\n");

  //ea = toc_addr - 0x8000;
  /* Find last OPD entry */
  //while (ea != BADADDR && !(Dword(ea - 0x04) == toc_addr && Dword(ea - 0x0C) == toc_addr && Dword(ea - 0x14) == toc_addr && Dword(ea - 0x1C) == toc_addr && Dword(ea - 0x24) == toc_addr && Dword(ea - 0x2C) == toc_addr && Dword(ea - 0x34) == toc_addr)) {
  //  ea = ea - 0x04;
  //}

  ea = opd;
  while (ea != BADADDR && Qword(ea + 0x08) == toc_addr) {
    MakeUnknown(ea, 0x18, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x18, "OPD_s");
    func = Qword(ea);
    MakeFunction(func, BADADDR);
    ea = ea + 0x18;
  }

  return ea;
}

static CreateExportStructure(void) {
  auto id;

  id = CreateStructure("PS3ExportStub");
  AddStrucMember(id, "ssize", 0x00, FF_WORD, 0, 2);
  AddStrucMember(id, "header1", 0x02, FF_WORD, 0, 2);
  AddStrucMember(id, "header2", 0x04, FF_WORD, 0, 2);
  AddStrucMember(id, "exports", 0x06, FF_WORD, 0, 2);
  AddStrucMember(id, "zero1", 0x08, FF_DWRD, 0, 4);
  AddStrucMember(id, "zero2", 0x0C, FF_DWRD, 0, 4);
  AddStrucMember(id, "noname", 0x10, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "fnid", 0x14, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "stub", 0x18, FF_DWRD | FF_0OFF, 0, 4);

  return 1;
}




static CreateImportStructure(void) {
  auto id;

  id = CreateStructure("PS3ImportStub");
  AddStrucMember(id, "ssize", 0x00, FF_WORD, 0, 2);
  AddStrucMember(id, "header1", 0x02, FF_WORD, 0, 2);
  AddStrucMember(id, "header2", 0x04, FF_WORD, 0, 2);
  AddStrucMember(id, "imports", 0x06, FF_WORD, 0, 2);
  AddStrucMember(id, "zero1", 0x08, FF_DWRD, 0, 4);
  AddStrucMember(id, "zero2", 0x0C, FF_DWRD, 0, 4);
  AddStrucMember(id, "name", 0x10, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "fnid", 0x14, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "stub", 0x18, FF_DWRD | FF_0OFF, 0, 4);
  AddStrucMember(id, "zero3", 0x1C, FF_DWRD, 0, 4);
  AddStrucMember(id, "zero4", 0x20, FF_DWRD, 0, 4);
  AddStrucMember(id, "zero5", 0x24, FF_DWRD, 0, 4);
  AddStrucMember(id, "zero6", 0x28, FF_DWRD, 0, 4);

  return 1;
}


static CreateImports(import_start, import_end) {
  auto i, ea, imports, name_ptr, name, fnid_ptr, fnid, stub_ptr, stub;
  auto fnid_name, fnid_comment;
  
  Message("Defining Import stubs\n");
  for (ea = import_start; ea < import_end; ea = ea + 0x2C) {
    MakeUnknown(ea, 0x2C, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x2C, "PS3ImportStub");

    imports = Word(ea + 0x06);

    name_ptr = Dword(ea + 0x10);
    MakeStr(name_ptr, BADADDR);
    name = GetString(name_ptr, -1, ASCSTR_C);

    fnid_ptr = Dword(ea + 0x14);
    MakeName(fnid_ptr,  form("%s_ids", name));
    stub_ptr = Dword(ea + 0x18);
    MakeName(stub_ptr,  form("%s_ptrs", name));
    for (i = 0; i < imports; i++) {
      MakeDword(fnid_ptr + (i*4));
      fnid = Dword(fnid_ptr + (i*4));
      fnid_name = get_fnid_name(name, fnid);

      MakeComm(fnid_ptr + (i*4),  form("Import %s (%d): FNID 0x%X : %s", name, i, fnid, fnid_name));

      MakeDword(stub_ptr + (i*4));
      OpOff (stub_ptr + (i*4), 0, 0);
      stub = Dword(stub_ptr + (i*4));
      MakeFunction(stub, BADADDR);
      MakeName(stub,  form("_%s_%s", name, fnid_name));
      fnid_comment = get_fnid_comment(name, fnid);
      if (fnid_comment != "") 
	SetFunctionCmt(stub, fnid_comment, 1);
    }
    
    if((fnid_ptr) == SegStart(fnid_ptr))
    {
      RenameSeg(fnid_ptr, ".rodata.sceFNID");
      RenameSeg(SegStart(name_ptr), ".rodata.sceResident");
    }
    
    if((stub_ptr) == SegStart(stub_ptr))
    {
      RenameSeg(stub_ptr, ".data.sceFStub");
    }
  }
  
  if(SegStart(fnid_ptr) == SegStart(stub_ptr))
    RenameSeg(stub_ptr, ".data");
}


static CreateExports(export_start, export_end) {
  auto i, ea, exports, name_ptr, name, fnid_ptr, fnid, stub_ptr, stub_opd, stub;
  auto fnid_name, fnid_comment;
  
  Message("Defining Export stubs\n");
  for (ea = export_start; ea < export_end; ea = ea + 0x1c) {
    MakeUnknown(ea, 0x1c, DOUNK_SIMPLE);
    MakeStructEx (ea, 0x1c, "PS3ExportStub");

    exports = Word(ea + 0x06);
    name_ptr = Dword(ea + 0x10);
    if (name_ptr == 0) {
      name = "";
    } else {
      MakeStr(name_ptr, BADADDR);
      name = GetString(name_ptr, -1, ASCSTR_C);
    }

    fnid_ptr = Dword(ea + 0x14);
    MakeName(fnid_ptr,  form("%s_export_ids", name));
    stub_ptr = Dword(ea + 0x18);
    MakeName(stub_ptr,  form("%s_export_ptrs", name));
    for (i = 0; i < exports; i++) {
      MakeDword(fnid_ptr + (i*4));
      fnid = Dword(fnid_ptr + (i*4));
      fnid_name = get_fnid_name(name, fnid);
      MakeComm(fnid_ptr + (i*4),  form("Export %s(%d): FNID 0x%X : %s", name, i, fnid, fnid_name));

      MakeDword(stub_ptr + (i*4));
      OpOff (stub_ptr + (i*4), 0, 0);
      stub_opd = Dword(stub_ptr + (i*4));
      MakeName(stub_opd, form("_Export_%s_%s_opd", name, get_fnid_name(name, fnid)));
      stub = Dword(stub_opd);
      //Message("0x%x: _Export_%s_%s\n", stub, name, fnid_name);
      MakeFunction(stub, BADADDR);
      MakeName(stub,  form("_Export_%s_%s", name, fnid_name));
      fnid_comment = get_fnid_comment(name, fnid);
      if (fnid_comment != "") 
	SetFunctionCmt(stub, fnid_comment, 1);
    }
  }
}

static createFunc(addr, func_name)
{
  auto start;
  
  Message("0x%x: found %s\n", addr, func_name);
  MakeFunction(addr, BADADDR);
  start = GetFunctionAttr(addr,  FUNCATTR_START);
  MakeName(start, func_name);
  
  Message("0x%x: %s\n", start, func_name);
}

static FindLv2Syscalls(seg_start) {
  auto i, j, seg_end, syscall_name;
  
  seg_end=SegEnd(seg_start);
  
  for(i=seg_start;i<seg_end;i=i+4)
  {
    if(Dword(i)==0x44000002)
    {
      j=0x40;
      while(j>0)
      {
        MakeCode(i-j);
        if(Word(i-j) == 0x3960)
          syscall_name = get_lv2_rawname(GetOperandValue(i-j, 1));

        j = j - 4;
      }
    	    
      if(strlen(syscall_name)>0)
      {
        MakeComm(i, form("syscall_%s", syscall_name));
        Message("0x%x: syscall %s\n", i, syscall_name);
      }else{
        Message("failed to name Syscall: 0x%x\n", i);
      }
    }
  }
}


static FindLv1Syscalls(seg_start) {
  auto i, j, seg_end, syscall_name, tmp, tmp2;
  
  seg_end=SegEnd(seg_start);
  
  for(i=seg_start;i<seg_end;i=i+4)
  {
    if(Dword(i)==0x44000002)
    {
      j = 0;
      tmp = 0;
      while(j<0x40)
      {
        MakeCode(i-j);
        
        //li r11
        if(Word(i-j) == 0x3960)
        {
          syscall_name = get_lv1sc_rawname(GetOperandValue(i-j, 1));
          break;
        }

	//lis r11
	if(Word(i-j) == 0x3D60)
	{
	  tmp2 = GetOperandValue(i-j, 1) << 16;
	  tmp = tmp + tmp2;
	  syscall_name = get_lv1sc_rawname(tmp);
	  //Message("lis r11: 0x%x -> 0x%x\n", tmp2, tmp);
	  break;
	}


	//ori r11
	if(Word(i-j) == 0x616B)
	{
	  tmp = GetOperandValue(i-j, 2);
	  //Message("ori r11: 0x%x\n", GetOperandValue(i-j, 1) << 16);
	}

        j = j + 4;
      }
    	    
      if(strlen(syscall_name)>0)
      {
        MakeComm(i, form("syscall_%s", syscall_name));
        createFunc(i, form("syscall_%s", syscall_name));
        Message("0x%x: syscall %s\n", i, syscall_name);
      }else{
        Message("failed to name Syscall: 0x%x\n", i);
      }
    }
  }
}


static SegLen(seg)
{
  return (SegEnd(seg) - SegStart(seg));
}

static FindCtorDtor()
{
  auto seg, i, cnt, bss1, bss2, jcr;
  
  seg=FirstSeg();
  cnt=0;
  bss1=0;
  bss2=0;
  jcr=0;
  
  while(NextSeg(seg) != SegStart(seg))
  {
    Message("0x%x: %x %x %x\n", SegStart(seg), GetSegmentAttr(seg, SEGATTR_TYPE), GetSegmentAttr(seg, SEGATTR_PERM), SegLen(seg));
    if(Dword(seg) == 0xFFFFFFFF && Dword(SegEnd(seg)-4) == 0)
    {
      if(cnt==0)
      {
        RenameSeg(seg, ".ctors");
        cnt=1;
      }else{
        RenameSeg(seg, ".dtors");
        cnt=2;
      }
      for(i=seg;i<SegEnd(seg);i=i+4)
      {
        MakeDword(i);
        if(Dword(i) != 0 && Dword(i) != 0xFFFFFFFF)
          OpOff(i, FF_DWRD, 0);
      }
    }
    
    if(GetSegmentAttr(seg, SEGATTR_TYPE) == 3 && GetSegmentAttr(seg, SEGATTR_PERM) == 6 && Dword(seg) == 1)
      RenameSeg(seg, ".tdata");
    
    if(Dword(seg)==0 && (SegEnd(seg) == (SegStart(seg) + 4)) && cnt==2)
    {
      RenameSeg(seg, ".jcr");
      jcr = seg;
    }
      
    if(GetSegmentAttr(seg, SEGATTR_TYPE) == 9)
      if(bss1 == 0)
        bss1 = seg;
      else
        bss2 = seg;
      
    if(Dword(seg) == 0x7F454C46)
      RenameSeg(seg, ".spu_image");
      
    if(Dword(seg)==0x0000001c && (Dword(seg+0x20)==0x0000001c  || Dword(seg+0x20)==0x0000002c))
      RenameSeg(seg, ".eh_frame");

    if(Byte(seg)==0xFF && Byte(seg+0x28)==0xFF)
      RenameSeg(seg, ".gcc_except_table");
      
    if(SegLen(seg)==(Dword(seg)+4) && Dword(seg) != 0 && Dword(seg+4) == 0x13BCC5F6)
      RenameSeg(seg, ".sys_proc_param");
    
    if(SegLen(seg)==Dword(seg) && Dword(seg) != 0 && Dword(seg+4) == 0x1B434CEC)
    {
      RenameSeg(seg, ".sys_proc_prx_param");
      CreateSysPrxParamStructure();
      MakeStructEx (seg, 0x28, "SysPrxParam");
    }
    
    seg = NextSeg(seg);
  }
  
  if(bss1 > 0 && bss2 > 0)
  {
    RenameSeg(bss1, ".tbss");
    RenameSeg(bss2, ".bss");
    
    if(NextSeg(NextSeg(bss1))==bss2)
      RenameSeg(NextSeg(bss1), ".data");
  }
  
  if(bss1 > 0 && bss2 == 0)
    RenameSeg(bss1, ".bss");
    
  RenameSeg(NextSeg(jcr), ".data.rel.ro");
}

static isNullSeg(addr)
{
  if(SegStart(addr)+4 == SegEnd(addr) && Dword(SegStart(addr)) == 0)
    return 1;
  else
    return 0;
}


static CreateSysPrxParamStructure(void) {
  auto id;

  id = CreateStructure("SysPrxParam");
  AddStrucMember(id, "size", 0x00, FF_DWRD, 0, 4);
  AddStrucMember(id, "magic", 0x04, FF_DWRD, 0, 4);
  AddStrucMember(id, "version", 0x08, FF_DWRD, 0, 4);
  AddStrucMember(id, "unknown1", 0x0C, FF_DWRD, 0, 4);
  AddStrucMember(id, "exportStubStart", 0x10, FF_DWRD, 0, 4);
  AddStrucMember(id, "exportStubEnd", 0x14, FF_DWRD, 0, 4);
  AddStrucMember(id, "importStubStart", 0x18, FF_DWRD, 0, 4);
  AddStrucMember(id, "importStubEnd", 0x1C, FF_DWRD, 0, 4);
  AddStrucMember(id, "majorVersion", 0x20, FF_DWRD, 0, 4);
  AddStrucMember(id, "minorVersion", 0x24, FF_DWRD, 0, 4);
  return 1;
}

static FindCreatePpuThread()
{
  auto addr;
  addr = LocByName("_sysPrxForUser_sys_ppu_thread_create");

  if(addr == BADADDR)
    addr = LocByName("_Export_sysPrxForUser_sys_ppu_thread_create");
  
  if(addr != BADADDR)
  {
    Message ("found create_ppu_thread at 0x%x\n\n", addr);
    return addr;
  }
}


static NameThreads(seg, toc_addr)
{
  auto addr, end, func_addr, jump_target, i, thread_name, thread_offset, thread_name_ptr;


  //func_addr = AskAddr(BADADDR, "enter create thread sub address :");
  func_addr = FindCreatePpuThread();
  if (func_addr < 0)
  {
    	Message ("Error: couldn't find _sysPrxForUser_sys_ppu_thread_create\n");
    	return -1;
  }
  

  addr = SegStart(seg);
  while (addr<SegEnd(addr))
  {
  
    if(Byte(addr) == 0x48 || Byte(addr) == 0x4B)
    {
    	jump_target = (((Dword(addr) & 0xFFFFFF) | 0xFF000000 ) + addr - 1) & 0xFFFFFF;
    	if(jump_target == func_addr)
    	{
    	    MakeCode(addr);
    	    thread_name="";
    	    thread_name_ptr=-1;
    	    thread_offset=-1;
    	    i=0x40;
    	    while(i>0)
    	    {
    	    	MakeCode(addr-i);
    	    	
    	    	//li r9
    	    	if(Word(addr-i) == 0x8122)
    	    	    thread_name = GetString(Dword(GetOperandValue(addr-i, 1) + toc_addr), -1, 0);
    	    	
    	    	//li r4
    	    	if(Word(addr-i) == 0x8082)
		    thread_offset = Dword(Dword(GetOperandValue(addr-i, 1) + toc_addr));
		    
		//lis r9
		if(Word(addr-i) == 0x3D20)
		{
		  thread_name_ptr = 0;
		  thread_name_ptr = GetOperandValue(addr-i, 1) << 16;
		  Message("lis r9: 0x%x\n", GetOperandValue(addr-i, 1) << 16);
		}
		  
		//lis r4
		if(Word(addr-i) == 0x3C80)
		{
		  thread_offset = 0;
		  thread_offset = GetOperandValue(addr-i, 1)  << 16;
		  Message("lis r4: 0x%x\n", GetOperandValue(addr-i, 1)  << 16);
		}
		  
		//addic r9
		if(Word(addr-i) == 0x3129)
		{
		  thread_name_ptr = thread_name_ptr + GetOperandValue(addr-i, 2);
		  Message("addic r9: 0x%x -> 0x%x\n", GetOperandValue(addr-i, 2), thread_name_ptr);
		}
		  
		//addic r4
	        if(Word(addr-i) == 0x3084)
	        {
		  thread_offset = Dword(thread_offset + GetOperandValue(addr-i, 2));
		  Message("addic r4: 0x%x -> 0x%x\n", GetOperandValue(addr-i, 2), thread_offset);
		}
		    
    	    	i = i - 4;
    	    }
    	    
    	    if(thread_offset>0)
    	    {
    	      if(strlen(thread_name)==0)
    	      {
    	        if(thread_name_ptr>0)
    	          thread_name = GetString(thread_name_ptr, -1, 0);
    	        else
    	          thread_name = form("_%x", thread_offset);
    	      }
    	      Message("create _thread_%s (0x%x) at 0x%x\n", thread_name, thread_offset, addr);
    	      MakeFunction(thread_offset, BADADDR);
    	      MakeName(thread_offset, form("_thread_%s", thread_name));
    	    }else{
    	      Message("failed to find thread: 0x%x\n", addr);
    	    }
    	}
    }

    addr = addr + 4;
  }

}

static MakeOffsets(addr, end)
{
  while (addr<end)
  {
    MakeData(addr, FF_DWRD, 4, 0);
    if(Dword(addr)>0x100 && Dword(addr) != BADADDR)
    {
      OpOff(addr, FF_DWRD, 0);
    }
    addr = addr + 4;
  }
}